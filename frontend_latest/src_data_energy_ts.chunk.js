"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkhome_assistant_frontend"] = self["webpackChunkhome_assistant_frontend"] || []).push([["src_data_energy_ts"],{

/***/ "./src/common/util/group-by.ts":
/*!*************************************!*\
  !*** ./src/common/util/group-by.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"groupBy\": () => (/* binding */ groupBy)\n/* harmony export */ });\nconst groupBy = (list, keySelector) => {\n  const result = {};\n\n  for (const item of list) {\n    const key = keySelector(item);\n\n    if (key in result) {\n      result[key].push(item);\n    } else {\n      result[key] = [item];\n    }\n  }\n\n  return result;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvY29tbW9uL3V0aWwvZ3JvdXAtYnkudHMuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBSUE7O0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2hvbWUtYXNzaXN0YW50LWZyb250ZW5kLy4vc3JjL2NvbW1vbi91dGlsL2dyb3VwLWJ5LnRzP2Y4ZTAiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNvbnN0IGdyb3VwQnkgPSA8VD4oXG4gIGxpc3Q6IFRbXSxcbiAga2V5U2VsZWN0b3I6IChpdGVtOiBUKSA9PiBzdHJpbmdcbik6IHsgW2tleTogc3RyaW5nXTogVFtdIH0gPT4ge1xuICBjb25zdCByZXN1bHQgPSB7fTtcbiAgZm9yIChjb25zdCBpdGVtIG9mIGxpc3QpIHtcbiAgICBjb25zdCBrZXkgPSBrZXlTZWxlY3RvcihpdGVtKTtcbiAgICBpZiAoa2V5IGluIHJlc3VsdCkge1xuICAgICAgcmVzdWx0W2tleV0ucHVzaChpdGVtKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0W2tleV0gPSBbaXRlbV07XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/common/util/group-by.ts\n");

/***/ }),

/***/ "./src/common/util/subscribe-one.ts":
/*!******************************************!*\
  !*** ./src/common/util/subscribe-one.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"subscribeOne\": () => (/* binding */ subscribeOne)\n/* harmony export */ });\nconst subscribeOne = async (conn, subscribe) => new Promise(resolve => {\n  const unsub = subscribe(conn, items => {\n    unsub();\n    resolve(items);\n  });\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvY29tbW9uL3V0aWwvc3Vic2NyaWJlLW9uZS50cy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBRUE7QUFRQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaG9tZS1hc3Npc3RhbnQtZnJvbnRlbmQvLi9zcmMvY29tbW9uL3V0aWwvc3Vic2NyaWJlLW9uZS50cz83NzAxIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbm5lY3Rpb24sIFVuc3Vic2NyaWJlRnVuYyB9IGZyb20gXCJob21lLWFzc2lzdGFudC1qcy13ZWJzb2NrZXRcIjtcblxuZXhwb3J0IGNvbnN0IHN1YnNjcmliZU9uZSA9IGFzeW5jIDxUPihcbiAgY29ubjogQ29ubmVjdGlvbixcbiAgc3Vic2NyaWJlOiAoXG4gICAgY29ubjI6IENvbm5lY3Rpb24sXG4gICAgb25DaGFuZ2U6IChpdGVtczogVCkgPT4gdm9pZFxuICApID0+IFVuc3Vic2NyaWJlRnVuY1xuKSA9PlxuICBuZXcgUHJvbWlzZTxUPigocmVzb2x2ZSkgPT4ge1xuICAgIGNvbnN0IHVuc3ViID0gc3Vic2NyaWJlKGNvbm4sIChpdGVtcykgPT4ge1xuICAgICAgdW5zdWIoKTtcbiAgICAgIHJlc29sdmUoaXRlbXMpO1xuICAgIH0pO1xuICB9KTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/common/util/subscribe-one.ts\n");

/***/ }),

/***/ "./src/data/config_entries.ts":
/*!************************************!*\
  !*** ./src/data/config_entries.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ERROR_STATES\": () => (/* binding */ ERROR_STATES),\n/* harmony export */   \"getConfigEntries\": () => (/* binding */ getConfigEntries),\n/* harmony export */   \"updateConfigEntry\": () => (/* binding */ updateConfigEntry),\n/* harmony export */   \"deleteConfigEntry\": () => (/* binding */ deleteConfigEntry),\n/* harmony export */   \"reloadConfigEntry\": () => (/* binding */ reloadConfigEntry),\n/* harmony export */   \"disableConfigEntry\": () => (/* binding */ disableConfigEntry),\n/* harmony export */   \"enableConfigEntry\": () => (/* binding */ enableConfigEntry)\n/* harmony export */ });\nconst ERROR_STATES = [\"migration_error\", \"setup_error\", \"setup_retry\"];\nconst getConfigEntries = (hass, filters) => {\n  const params = {};\n\n  if (filters) {\n    if (filters.type) {\n      params.type_filter = filters.type;\n    }\n\n    if (filters.domain) {\n      params.domain = filters.domain;\n    }\n  }\n\n  return hass.callWS({\n    type: \"config_entries/get\",\n    ...params\n  });\n};\nconst updateConfigEntry = (hass, configEntryId, updatedValues) => hass.callWS({\n  type: \"config_entries/update\",\n  entry_id: configEntryId,\n  ...updatedValues\n});\nconst deleteConfigEntry = (hass, configEntryId) => hass.callApi(\"DELETE\", `config/config_entries/entry/${configEntryId}`);\nconst reloadConfigEntry = (hass, configEntryId) => hass.callApi(\"POST\", `config/config_entries/entry/${configEntryId}/reload`);\nconst disableConfigEntry = (hass, configEntryId) => hass.callWS({\n  type: \"config_entries/disable\",\n  entry_id: configEntryId,\n  disabled_by: \"user\"\n});\nconst enableConfigEntry = (hass, configEntryId) => hass.callWS({\n  type: \"config_entries/disable\",\n  entry_id: configEntryId,\n  disabled_by: null\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvZGF0YS9jb25maWdfZW50cmllcy50cy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBOEJBO0FBTUE7QUFJQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFGQTtBQUlBO0FBRUE7QUFNQTtBQUNBO0FBQ0E7QUFIQTtBQU1BO0FBS0E7QUFTQTtBQUtBO0FBQ0E7QUFDQTtBQUhBO0FBTUE7QUFJQTtBQUNBO0FBQ0E7QUFIQSIsInNvdXJjZXMiOlsid2VicGFjazovL2hvbWUtYXNzaXN0YW50LWZyb250ZW5kLy4vc3JjL2RhdGEvY29uZmlnX2VudHJpZXMudHM/MmYzMSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBIb21lQXNzaXN0YW50IH0gZnJvbSBcIi4uL3R5cGVzXCI7XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ29uZmlnRW50cnkge1xuICBlbnRyeV9pZDogc3RyaW5nO1xuICBkb21haW46IHN0cmluZztcbiAgdGl0bGU6IHN0cmluZztcbiAgc291cmNlOiBzdHJpbmc7XG4gIHN0YXRlOlxuICAgIHwgXCJsb2FkZWRcIlxuICAgIHwgXCJzZXR1cF9lcnJvclwiXG4gICAgfCBcIm1pZ3JhdGlvbl9lcnJvclwiXG4gICAgfCBcInNldHVwX3JldHJ5XCJcbiAgICB8IFwibm90X2xvYWRlZFwiXG4gICAgfCBcImZhaWxlZF91bmxvYWRcIjtcbiAgc3VwcG9ydHNfb3B0aW9uczogYm9vbGVhbjtcbiAgc3VwcG9ydHNfcmVtb3ZlX2RldmljZTogYm9vbGVhbjtcbiAgc3VwcG9ydHNfdW5sb2FkOiBib29sZWFuO1xuICBwcmVmX2Rpc2FibGVfbmV3X2VudGl0aWVzOiBib29sZWFuO1xuICBwcmVmX2Rpc2FibGVfcG9sbGluZzogYm9vbGVhbjtcbiAgZGlzYWJsZWRfYnk6IFwidXNlclwiIHwgbnVsbDtcbiAgcmVhc29uOiBzdHJpbmcgfCBudWxsO1xufVxuXG5leHBvcnQgdHlwZSBDb25maWdFbnRyeU11dGFibGVQYXJhbXMgPSBQYXJ0aWFsPFxuICBQaWNrPFxuICAgIENvbmZpZ0VudHJ5LFxuICAgIFwidGl0bGVcIiB8IFwicHJlZl9kaXNhYmxlX25ld19lbnRpdGllc1wiIHwgXCJwcmVmX2Rpc2FibGVfcG9sbGluZ1wiXG4gID5cbj47XG5cbmV4cG9ydCBjb25zdCBFUlJPUl9TVEFURVM6IENvbmZpZ0VudHJ5W1wic3RhdGVcIl1bXSA9IFtcbiAgXCJtaWdyYXRpb25fZXJyb3JcIixcbiAgXCJzZXR1cF9lcnJvclwiLFxuICBcInNldHVwX3JldHJ5XCIsXG5dO1xuXG5leHBvcnQgY29uc3QgZ2V0Q29uZmlnRW50cmllcyA9IChcbiAgaGFzczogSG9tZUFzc2lzdGFudCxcbiAgZmlsdGVycz86IHsgdHlwZT86IFwiaGVscGVyXCIgfCBcImludGVncmF0aW9uXCI7IGRvbWFpbj86IHN0cmluZyB9XG4pOiBQcm9taXNlPENvbmZpZ0VudHJ5W10+ID0+IHtcbiAgY29uc3QgcGFyYW1zOiBhbnkgPSB7fTtcbiAgaWYgKGZpbHRlcnMpIHtcbiAgICBpZiAoZmlsdGVycy50eXBlKSB7XG4gICAgICBwYXJhbXMudHlwZV9maWx0ZXIgPSBmaWx0ZXJzLnR5cGU7XG4gICAgfVxuICAgIGlmIChmaWx0ZXJzLmRvbWFpbikge1xuICAgICAgcGFyYW1zLmRvbWFpbiA9IGZpbHRlcnMuZG9tYWluO1xuICAgIH1cbiAgfVxuICByZXR1cm4gaGFzcy5jYWxsV1M8Q29uZmlnRW50cnlbXT4oe1xuICAgIHR5cGU6IFwiY29uZmlnX2VudHJpZXMvZ2V0XCIsXG4gICAgLi4ucGFyYW1zLFxuICB9KTtcbn07XG5cbmV4cG9ydCBjb25zdCB1cGRhdGVDb25maWdFbnRyeSA9IChcbiAgaGFzczogSG9tZUFzc2lzdGFudCxcbiAgY29uZmlnRW50cnlJZDogc3RyaW5nLFxuICB1cGRhdGVkVmFsdWVzOiBDb25maWdFbnRyeU11dGFibGVQYXJhbXNcbikgPT5cbiAgaGFzcy5jYWxsV1M8eyByZXF1aXJlX3Jlc3RhcnQ6IGJvb2xlYW47IGNvbmZpZ19lbnRyeTogQ29uZmlnRW50cnkgfT4oe1xuICAgIHR5cGU6IFwiY29uZmlnX2VudHJpZXMvdXBkYXRlXCIsXG4gICAgZW50cnlfaWQ6IGNvbmZpZ0VudHJ5SWQsXG4gICAgLi4udXBkYXRlZFZhbHVlcyxcbiAgfSk7XG5cbmV4cG9ydCBjb25zdCBkZWxldGVDb25maWdFbnRyeSA9IChoYXNzOiBIb21lQXNzaXN0YW50LCBjb25maWdFbnRyeUlkOiBzdHJpbmcpID0+XG4gIGhhc3MuY2FsbEFwaTx7XG4gICAgcmVxdWlyZV9yZXN0YXJ0OiBib29sZWFuO1xuICB9PihcIkRFTEVURVwiLCBgY29uZmlnL2NvbmZpZ19lbnRyaWVzL2VudHJ5LyR7Y29uZmlnRW50cnlJZH1gKTtcblxuZXhwb3J0IGNvbnN0IHJlbG9hZENvbmZpZ0VudHJ5ID0gKGhhc3M6IEhvbWVBc3Npc3RhbnQsIGNvbmZpZ0VudHJ5SWQ6IHN0cmluZykgPT5cbiAgaGFzcy5jYWxsQXBpPHtcbiAgICByZXF1aXJlX3Jlc3RhcnQ6IGJvb2xlYW47XG4gIH0+KFwiUE9TVFwiLCBgY29uZmlnL2NvbmZpZ19lbnRyaWVzL2VudHJ5LyR7Y29uZmlnRW50cnlJZH0vcmVsb2FkYCk7XG5cbmV4cG9ydCBpbnRlcmZhY2UgRGlzYWJsZUNvbmZpZ0VudHJ5UmVzdWx0IHtcbiAgcmVxdWlyZV9yZXN0YXJ0OiBib29sZWFuO1xufVxuXG5leHBvcnQgY29uc3QgZGlzYWJsZUNvbmZpZ0VudHJ5ID0gKFxuICBoYXNzOiBIb21lQXNzaXN0YW50LFxuICBjb25maWdFbnRyeUlkOiBzdHJpbmdcbikgPT5cbiAgaGFzcy5jYWxsV1M8RGlzYWJsZUNvbmZpZ0VudHJ5UmVzdWx0Pih7XG4gICAgdHlwZTogXCJjb25maWdfZW50cmllcy9kaXNhYmxlXCIsXG4gICAgZW50cnlfaWQ6IGNvbmZpZ0VudHJ5SWQsXG4gICAgZGlzYWJsZWRfYnk6IFwidXNlclwiLFxuICB9KTtcblxuZXhwb3J0IGNvbnN0IGVuYWJsZUNvbmZpZ0VudHJ5ID0gKGhhc3M6IEhvbWVBc3Npc3RhbnQsIGNvbmZpZ0VudHJ5SWQ6IHN0cmluZykgPT5cbiAgaGFzcy5jYWxsV1M8e1xuICAgIHJlcXVpcmVfcmVzdGFydDogYm9vbGVhbjtcbiAgfT4oe1xuICAgIHR5cGU6IFwiY29uZmlnX2VudHJpZXMvZGlzYWJsZVwiLFxuICAgIGVudHJ5X2lkOiBjb25maWdFbnRyeUlkLFxuICAgIGRpc2FibGVkX2J5OiBudWxsLFxuICB9KTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/data/config_entries.ts\n");

/***/ }),

/***/ "./src/data/energy.ts":
/*!****************************!*\
  !*** ./src/data/energy.ts ***!
  \****************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__) => {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"emptyFlowFromGridSourceEnergyPreference\": () => (/* binding */ emptyFlowFromGridSourceEnergyPreference),\n/* harmony export */   \"emptyFlowToGridSourceEnergyPreference\": () => (/* binding */ emptyFlowToGridSourceEnergyPreference),\n/* harmony export */   \"emptyGridSourceEnergyPreference\": () => (/* binding */ emptyGridSourceEnergyPreference),\n/* harmony export */   \"emptySolarEnergyPreference\": () => (/* binding */ emptySolarEnergyPreference),\n/* harmony export */   \"emptyBatteryEnergyPreference\": () => (/* binding */ emptyBatteryEnergyPreference),\n/* harmony export */   \"emptyGasEnergyPreference\": () => (/* binding */ emptyGasEnergyPreference),\n/* harmony export */   \"getEnergyInfo\": () => (/* binding */ getEnergyInfo),\n/* harmony export */   \"getEnergyPreferenceValidation\": () => (/* binding */ getEnergyPreferenceValidation),\n/* harmony export */   \"getEnergyPreferences\": () => (/* binding */ getEnergyPreferences),\n/* harmony export */   \"saveEnergyPreferences\": () => (/* binding */ saveEnergyPreferences),\n/* harmony export */   \"getFossilEnergyConsumption\": () => (/* binding */ getFossilEnergyConsumption),\n/* harmony export */   \"energySourcesByType\": () => (/* binding */ energySourcesByType),\n/* harmony export */   \"getEnergyDataCollection\": () => (/* binding */ getEnergyDataCollection),\n/* harmony export */   \"getEnergySolarForecasts\": () => (/* binding */ getEnergySolarForecasts),\n/* harmony export */   \"ENERGY_GAS_VOLUME_UNITS\": () => (/* binding */ ENERGY_GAS_VOLUME_UNITS),\n/* harmony export */   \"ENERGY_GAS_ENERGY_UNITS\": () => (/* binding */ ENERGY_GAS_ENERGY_UNITS),\n/* harmony export */   \"ENERGY_GAS_UNITS\": () => (/* binding */ ENERGY_GAS_UNITS),\n/* harmony export */   \"getEnergyGasUnitCategory\": () => (/* binding */ getEnergyGasUnitCategory),\n/* harmony export */   \"getEnergyGasUnit\": () => (/* binding */ getEnergyGasUnit)\n/* harmony export */ });\n/* harmony import */ var date_fns_esm__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! date-fns/esm */ \"./node_modules/date-fns/esm/differenceInDays/index.js\");\n/* harmony import */ var date_fns_esm__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! date-fns/esm */ \"./node_modules/date-fns/esm/addHours/index.js\");\n/* harmony import */ var date_fns_esm__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! date-fns/esm */ \"./node_modules/date-fns/esm/addMonths/index.js\");\n/* harmony import */ var date_fns_esm__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! date-fns/esm */ \"./node_modules/date-fns/esm/addDays/index.js\");\n/* harmony import */ var date_fns_esm__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! date-fns/esm */ \"./node_modules/date-fns/esm/addMilliseconds/index.js\");\n/* harmony import */ var date_fns_esm__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! date-fns/esm */ \"./node_modules/date-fns/esm/startOfToday/index.js\");\n/* harmony import */ var date_fns_esm__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! date-fns/esm */ \"./node_modules/date-fns/esm/startOfYesterday/index.js\");\n/* harmony import */ var date_fns_esm__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! date-fns/esm */ \"./node_modules/date-fns/esm/endOfToday/index.js\");\n/* harmony import */ var date_fns_esm__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! date-fns/esm */ \"./node_modules/date-fns/esm/endOfYesterday/index.js\");\n/* harmony import */ var home_assistant_js_websocket__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! home-assistant-js-websocket */ \"./node_modules/home-assistant-js-websocket/dist/collection.js\");\n/* harmony import */ var _common_util_group_by__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common/util/group-by */ \"./src/common/util/group-by.ts\");\n/* harmony import */ var _common_util_subscribe_one__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../common/util/subscribe-one */ \"./src/common/util/subscribe-one.ts\");\n/* harmony import */ var _config_entries__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./config_entries */ \"./src/data/config_entries.ts\");\n/* harmony import */ var _entity_registry__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./entity_registry */ \"./src/data/entity_registry.ts\");\n/* harmony import */ var _history__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./history */ \"./src/data/history.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_history__WEBPACK_IMPORTED_MODULE_4__]);\n_history__WEBPACK_IMPORTED_MODULE_4__ = (__webpack_async_dependencies__.then ? await __webpack_async_dependencies__ : __webpack_async_dependencies__)[0];\n\n\n\n\n\n\n\nconst energyCollectionKeys = [];\nconst emptyFlowFromGridSourceEnergyPreference = () => ({\n  stat_energy_from: \"\",\n  stat_cost: null,\n  entity_energy_from: null,\n  entity_energy_price: null,\n  number_energy_price: null\n});\nconst emptyFlowToGridSourceEnergyPreference = () => ({\n  stat_energy_to: \"\",\n  stat_compensation: null,\n  entity_energy_to: null,\n  entity_energy_price: null,\n  number_energy_price: null\n});\nconst emptyGridSourceEnergyPreference = () => ({\n  type: \"grid\",\n  flow_from: [],\n  flow_to: [],\n  cost_adjustment_day: 0\n});\nconst emptySolarEnergyPreference = () => ({\n  type: \"solar\",\n  stat_energy_from: \"\",\n  config_entry_solar_forecast: null\n});\nconst emptyBatteryEnergyPreference = () => ({\n  type: \"battery\",\n  stat_energy_from: \"\",\n  stat_energy_to: \"\"\n});\nconst emptyGasEnergyPreference = () => ({\n  type: \"gas\",\n  stat_energy_from: \"\",\n  stat_cost: null,\n  entity_energy_from: null,\n  entity_energy_price: null,\n  number_energy_price: null\n});\nconst getEnergyInfo = hass => hass.callWS({\n  type: \"energy/info\"\n});\nconst getEnergyPreferenceValidation = hass => hass.callWS({\n  type: \"energy/validate\"\n});\nconst getEnergyPreferences = hass => hass.callWS({\n  type: \"energy/get_prefs\"\n});\nconst saveEnergyPreferences = async (hass, prefs) => {\n  const newPrefs = hass.callWS({\n    type: \"energy/save_prefs\",\n    ...prefs\n  });\n  clearEnergyCollectionPreferences(hass);\n  return newPrefs;\n};\nconst getFossilEnergyConsumption = async (hass, startTime, energy_statistic_ids, co2_statistic_id, endTime, period = \"hour\") => hass.callWS({\n  type: \"energy/fossil_energy_consumption\",\n  start_time: startTime.toISOString(),\n  end_time: endTime === null || endTime === void 0 ? void 0 : endTime.toISOString(),\n  energy_statistic_ids,\n  co2_statistic_id,\n  period\n});\nconst energySourcesByType = prefs => (0,_common_util_group_by__WEBPACK_IMPORTED_MODULE_0__.groupBy)(prefs.energy_sources, item => item.type);\n\nconst getEnergyData = async (hass, prefs, start, end, compare) => {\n  const [configEntries, entityRegistryEntries, info] = await Promise.all([(0,_config_entries__WEBPACK_IMPORTED_MODULE_2__.getConfigEntries)(hass, {\n    domain: \"co2signal\"\n  }), (0,_common_util_subscribe_one__WEBPACK_IMPORTED_MODULE_1__.subscribeOne)(hass.connection, _entity_registry__WEBPACK_IMPORTED_MODULE_3__.subscribeEntityRegistry), getEnergyInfo(hass)]);\n  const co2SignalConfigEntry = configEntries.length ? configEntries[0] : undefined;\n  let co2SignalEntity;\n\n  if (co2SignalConfigEntry) {\n    for (const entry of entityRegistryEntries) {\n      if (entry.config_entry_id !== co2SignalConfigEntry.entry_id) {\n        continue;\n      } // The integration offers 2 entities. We want the % one.\n\n\n      const co2State = hass.states[entry.entity_id];\n\n      if (!co2State || co2State.attributes.unit_of_measurement !== \"%\") {\n        continue;\n      }\n\n      co2SignalEntity = co2State.entity_id;\n      break;\n    }\n  }\n\n  const consumptionStatIDs = [];\n  const statIDs = [];\n\n  for (const source of prefs.energy_sources) {\n    if (source.type === \"solar\") {\n      statIDs.push(source.stat_energy_from);\n      continue;\n    }\n\n    if (source.type === \"gas\") {\n      statIDs.push(source.stat_energy_from);\n\n      if (source.stat_cost) {\n        statIDs.push(source.stat_cost);\n      }\n\n      const costStatId = info.cost_sensors[source.stat_energy_from];\n\n      if (costStatId) {\n        statIDs.push(costStatId);\n      }\n\n      continue;\n    }\n\n    if (source.type === \"battery\") {\n      statIDs.push(source.stat_energy_from);\n      statIDs.push(source.stat_energy_to);\n      continue;\n    } // grid source\n\n\n    for (const flowFrom of source.flow_from) {\n      consumptionStatIDs.push(flowFrom.stat_energy_from);\n      statIDs.push(flowFrom.stat_energy_from);\n\n      if (flowFrom.stat_cost) {\n        statIDs.push(flowFrom.stat_cost);\n      }\n\n      const costStatId = info.cost_sensors[flowFrom.stat_energy_from];\n\n      if (costStatId) {\n        statIDs.push(costStatId);\n      }\n    }\n\n    for (const flowTo of source.flow_to) {\n      statIDs.push(flowTo.stat_energy_to);\n\n      if (flowTo.stat_compensation) {\n        statIDs.push(flowTo.stat_compensation);\n      }\n\n      const costStatId = info.cost_sensors[flowTo.stat_energy_to];\n\n      if (costStatId) {\n        statIDs.push(costStatId);\n      }\n    }\n  }\n\n  const dayDifference = (0,date_fns_esm__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(end || new Date(), start);\n  const period = dayDifference > 35 ? \"month\" : dayDifference > 2 ? \"day\" : \"hour\"; // Subtract 1 hour from start to get starting point data\n\n  const startMinHour = (0,date_fns_esm__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(start, -1);\n  const stats = await (0,_history__WEBPACK_IMPORTED_MODULE_4__.fetchStatistics)(hass, startMinHour, end, statIDs, period);\n  let statsCompare;\n  let startCompare;\n  let endCompare;\n\n  if (compare) {\n    if (dayDifference > 27 && dayDifference < 32) {\n      // When comparing a month, we want to start at the begining of the month\n      startCompare = (0,date_fns_esm__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(start, -1);\n    } else {\n      startCompare = (0,date_fns_esm__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(start, (dayDifference + 1) * -1);\n    }\n\n    const compareStartMinHour = (0,date_fns_esm__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(startCompare, -1);\n    endCompare = (0,date_fns_esm__WEBPACK_IMPORTED_MODULE_9__[\"default\"])(start, -1);\n    statsCompare = await (0,_history__WEBPACK_IMPORTED_MODULE_4__.fetchStatistics)(hass, compareStartMinHour, endCompare, statIDs, period);\n  }\n\n  let fossilEnergyConsumption;\n  let fossilEnergyConsumptionCompare;\n\n  if (co2SignalEntity !== undefined) {\n    fossilEnergyConsumption = await getFossilEnergyConsumption(hass, start, consumptionStatIDs, co2SignalEntity, end, dayDifference > 35 ? \"month\" : dayDifference > 2 ? \"day\" : \"hour\");\n\n    if (compare) {\n      fossilEnergyConsumptionCompare = await getFossilEnergyConsumption(hass, startCompare, consumptionStatIDs, co2SignalEntity, endCompare, dayDifference > 35 ? \"month\" : dayDifference > 2 ? \"day\" : \"hour\");\n    }\n  }\n\n  Object.values(stats).forEach(stat => {\n    // if the start of the first value is after the requested period, we have the first data point, and should add a zero point\n    if (stat.length && new Date(stat[0].start) > startMinHour) {\n      stat.unshift({ ...stat[0],\n        start: startMinHour.toISOString(),\n        end: startMinHour.toISOString(),\n        sum: 0,\n        state: 0\n      });\n    }\n  });\n  const statsMetadataArray = await (0,_history__WEBPACK_IMPORTED_MODULE_4__.getStatisticMetadata)(hass, statIDs);\n  const statsMetadata = {};\n  statsMetadataArray.forEach(x => {\n    statsMetadata[x.statistic_id] = x;\n  });\n  const data = {\n    start,\n    end,\n    startCompare,\n    endCompare,\n    info,\n    prefs,\n    stats,\n    statsMetadata,\n    statsCompare,\n    co2SignalConfigEntry,\n    co2SignalEntity,\n    fossilEnergyConsumption,\n    fossilEnergyConsumptionCompare\n  };\n  return data;\n};\n\nconst clearEnergyCollectionPreferences = hass => {\n  energyCollectionKeys.forEach(key => {\n    const energyCollection = getEnergyDataCollection(hass, {\n      key\n    });\n    energyCollection.clearPrefs();\n\n    if (energyCollection._active) {\n      energyCollection.refresh();\n    }\n  });\n};\n\nconst getEnergyDataCollection = (hass, options = {}) => {\n  let key = \"_energy\";\n\n  if (options.key) {\n    if (!options.key.startsWith(\"energy_\")) {\n      throw new Error(\"Key need to start with energy_\");\n    }\n\n    key = `_${options.key}`;\n  }\n\n  if (hass.connection[key]) {\n    return hass.connection[key];\n  }\n\n  energyCollectionKeys.push(options.key);\n  const collection = (0,home_assistant_js_websocket__WEBPACK_IMPORTED_MODULE_10__.getCollection)(hass.connection, key, async () => {\n    if (!collection.prefs) {\n      // This will raise if not found.\n      // Detect by checking `e.code === \"not_found\"\n      collection.prefs = await getEnergyPreferences(hass);\n    }\n\n    if (collection._refreshTimeout) {\n      clearTimeout(collection._refreshTimeout);\n    }\n\n    if (collection._active && (!collection.end || collection.end > new Date())) {\n      // The stats are created every hour\n      // Schedule a refresh for 20 minutes past the hour\n      // If the end is larger than the current time.\n      const nextFetch = new Date();\n\n      if (nextFetch.getMinutes() >= 20) {\n        nextFetch.setHours(nextFetch.getHours() + 1);\n      }\n\n      nextFetch.setMinutes(20, 0, 0);\n      collection._refreshTimeout = window.setTimeout(() => collection.refresh(), nextFetch.getTime() - Date.now());\n    }\n\n    return getEnergyData(hass, collection.prefs, collection.start, collection.end, collection.compare);\n  });\n  const origSubscribe = collection.subscribe;\n\n  collection.subscribe = subscriber => {\n    const unsub = origSubscribe(subscriber);\n    collection._active++;\n    return () => {\n      collection._active--;\n\n      if (collection._active < 1) {\n        clearTimeout(collection._refreshTimeout);\n        collection._refreshTimeout = undefined;\n      }\n\n      unsub();\n    };\n  };\n\n  collection._active = 0;\n  collection.prefs = options.prefs;\n  const now = new Date(); // Set start to start of today if we have data for today, otherwise yesterday\n\n  collection.start = now.getHours() > 0 ? (0,date_fns_esm__WEBPACK_IMPORTED_MODULE_11__[\"default\"])() : (0,date_fns_esm__WEBPACK_IMPORTED_MODULE_12__[\"default\"])();\n  collection.end = now.getHours() > 0 ? (0,date_fns_esm__WEBPACK_IMPORTED_MODULE_13__[\"default\"])() : (0,date_fns_esm__WEBPACK_IMPORTED_MODULE_14__[\"default\"])();\n\n  const scheduleUpdatePeriod = () => {\n    collection._updatePeriodTimeout = window.setTimeout(() => {\n      collection.start = (0,date_fns_esm__WEBPACK_IMPORTED_MODULE_11__[\"default\"])();\n      collection.end = (0,date_fns_esm__WEBPACK_IMPORTED_MODULE_13__[\"default\"])();\n      scheduleUpdatePeriod();\n    }, (0,date_fns_esm__WEBPACK_IMPORTED_MODULE_6__[\"default\"])((0,date_fns_esm__WEBPACK_IMPORTED_MODULE_13__[\"default\"])(), 1).getTime() - Date.now() // Switch to next day an hour after the day changed\n    );\n  };\n\n  scheduleUpdatePeriod();\n\n  collection.clearPrefs = () => {\n    collection.prefs = undefined;\n  };\n\n  collection.setPeriod = (newStart, newEnd) => {\n    var _collection$end;\n\n    collection.start = newStart;\n    collection.end = newEnd;\n\n    if (collection.start.getTime() === (0,date_fns_esm__WEBPACK_IMPORTED_MODULE_11__[\"default\"])().getTime() && ((_collection$end = collection.end) === null || _collection$end === void 0 ? void 0 : _collection$end.getTime()) === (0,date_fns_esm__WEBPACK_IMPORTED_MODULE_13__[\"default\"])().getTime() && !collection._updatePeriodTimeout) {\n      scheduleUpdatePeriod();\n    } else if (collection._updatePeriodTimeout) {\n      clearTimeout(collection._updatePeriodTimeout);\n      collection._updatePeriodTimeout = undefined;\n    }\n  };\n\n  collection.setCompare = compare => {\n    collection.compare = compare;\n  };\n\n  return collection;\n};\nconst getEnergySolarForecasts = hass => hass.callWS({\n  type: \"energy/solar_forecast\"\n});\nconst ENERGY_GAS_VOLUME_UNITS = [\"m³\", \"ft³\"];\nconst ENERGY_GAS_ENERGY_UNITS = [\"kWh\"];\nconst ENERGY_GAS_UNITS = [...ENERGY_GAS_VOLUME_UNITS, ...ENERGY_GAS_ENERGY_UNITS];\nconst getEnergyGasUnitCategory = (hass, prefs) => {\n  for (const source of prefs.energy_sources) {\n    if (source.type !== \"gas\") {\n      continue;\n    }\n\n    const entity = hass.states[source.stat_energy_from];\n\n    if (entity) {\n      return ENERGY_GAS_VOLUME_UNITS.includes(entity.attributes.unit_of_measurement) ? \"volume\" : \"energy\";\n    }\n  }\n\n  return undefined;\n};\nconst getEnergyGasUnit = (hass, prefs, statisticsMetaData = {}) => {\n  for (const source of prefs.energy_sources) {\n    if (source.type !== \"gas\") {\n      continue;\n    }\n\n    const entity = hass.states[source.stat_energy_from];\n\n    if (entity !== null && entity !== void 0 && entity.attributes.unit_of_measurement) {\n      // Wh is normalized to kWh by stats generation\n      return entity.attributes.unit_of_measurement === \"Wh\" ? \"kWh\" : entity.attributes.unit_of_measurement;\n    }\n\n    const statisticIdWithMeta = statisticsMetaData[source.stat_energy_from];\n\n    if (statisticIdWithMeta !== null && statisticIdWithMeta !== void 0 && statisticIdWithMeta.unit_of_measurement) {\n      return statisticIdWithMeta.unit_of_measurement === \"Wh\" ? \"kWh\" : statisticIdWithMeta.unit_of_measurement;\n    }\n  }\n\n  return undefined;\n};\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvZGF0YS9lbmVyZ3kudHMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBV0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBT0E7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFMQTtBQVFBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUxBO0FBUUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUpBO0FBT0E7QUFFQTtBQUNBO0FBQ0E7QUFIQTtBQU1BO0FBRUE7QUFDQTtBQUNBO0FBSEE7QUFLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQU5BO0FBK0dBO0FBRUE7QUFEQTtBQUlBO0FBRUE7QUFEQTtBQUlBO0FBRUE7QUFEQTtBQUlBO0FBSUE7QUFDQTtBQUNBO0FBRkE7QUFJQTtBQUNBO0FBQ0E7QUFNQTtBQVNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQU5BO0FBZ0JBOztBQW1CQTtBQU9BO0FBQ0E7QUFBQTtBQUtBO0FBSUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7O0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTs7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBOztBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBOztBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFJQTtBQUVBO0FBUUE7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFFQTtBQU9BOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFRQTtBQUNBO0FBUUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBTEE7QUFPQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFiQTtBQWdCQTtBQUNBOztBQWVBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBSUE7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFFQTtBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBSUE7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBRUE7QUFJQTs7QUFFQTtBQU9BO0FBR0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBTEE7QUFRQTs7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBQ0E7QUFBQTs7QUFDQTtBQUNBOztBQUNBO0FBS0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQURBO0FBSUE7QUFDQTtBQUNBO0FBT0E7QUFJQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFDQTtBQUNBO0FBS0E7QUFDQTs7QUFDQTtBQUNBO0FBRUE7QUFLQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFHQTs7QUFDQTs7QUFDQTtBQUNBO0FBR0E7QUFDQTs7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaG9tZS1hc3Npc3RhbnQtZnJvbnRlbmQvLi9zcmMvZGF0YS9lbmVyZ3kudHM/ZGM0MyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBhZGREYXlzLFxuICBhZGRIb3VycyxcbiAgYWRkTWlsbGlzZWNvbmRzLFxuICBhZGRNb250aHMsXG4gIGRpZmZlcmVuY2VJbkRheXMsXG4gIGVuZE9mVG9kYXksXG4gIGVuZE9mWWVzdGVyZGF5LFxuICBzdGFydE9mVG9kYXksXG4gIHN0YXJ0T2ZZZXN0ZXJkYXksXG59IGZyb20gXCJkYXRlLWZucy9lc21cIjtcbmltcG9ydCB7IENvbGxlY3Rpb24sIGdldENvbGxlY3Rpb24gfSBmcm9tIFwiaG9tZS1hc3Npc3RhbnQtanMtd2Vic29ja2V0XCI7XG5pbXBvcnQgeyBncm91cEJ5IH0gZnJvbSBcIi4uL2NvbW1vbi91dGlsL2dyb3VwLWJ5XCI7XG5pbXBvcnQgeyBzdWJzY3JpYmVPbmUgfSBmcm9tIFwiLi4vY29tbW9uL3V0aWwvc3Vic2NyaWJlLW9uZVwiO1xuaW1wb3J0IHsgSG9tZUFzc2lzdGFudCB9IGZyb20gXCIuLi90eXBlc1wiO1xuaW1wb3J0IHsgQ29uZmlnRW50cnksIGdldENvbmZpZ0VudHJpZXMgfSBmcm9tIFwiLi9jb25maWdfZW50cmllc1wiO1xuaW1wb3J0IHsgc3Vic2NyaWJlRW50aXR5UmVnaXN0cnkgfSBmcm9tIFwiLi9lbnRpdHlfcmVnaXN0cnlcIjtcbmltcG9ydCB7XG4gIGZldGNoU3RhdGlzdGljcyxcbiAgZ2V0U3RhdGlzdGljTWV0YWRhdGEsXG4gIFN0YXRpc3RpY3MsXG4gIFN0YXRpc3RpY3NNZXRhRGF0YSxcbn0gZnJvbSBcIi4vaGlzdG9yeVwiO1xuXG5jb25zdCBlbmVyZ3lDb2xsZWN0aW9uS2V5czogKHN0cmluZyB8IHVuZGVmaW5lZClbXSA9IFtdO1xuXG5leHBvcnQgY29uc3QgZW1wdHlGbG93RnJvbUdyaWRTb3VyY2VFbmVyZ3lQcmVmZXJlbmNlID1cbiAgKCk6IEZsb3dGcm9tR3JpZFNvdXJjZUVuZXJneVByZWZlcmVuY2UgPT4gKHtcbiAgICBzdGF0X2VuZXJneV9mcm9tOiBcIlwiLFxuICAgIHN0YXRfY29zdDogbnVsbCxcbiAgICBlbnRpdHlfZW5lcmd5X2Zyb206IG51bGwsXG4gICAgZW50aXR5X2VuZXJneV9wcmljZTogbnVsbCxcbiAgICBudW1iZXJfZW5lcmd5X3ByaWNlOiBudWxsLFxuICB9KTtcblxuZXhwb3J0IGNvbnN0IGVtcHR5Rmxvd1RvR3JpZFNvdXJjZUVuZXJneVByZWZlcmVuY2UgPVxuICAoKTogRmxvd1RvR3JpZFNvdXJjZUVuZXJneVByZWZlcmVuY2UgPT4gKHtcbiAgICBzdGF0X2VuZXJneV90bzogXCJcIixcbiAgICBzdGF0X2NvbXBlbnNhdGlvbjogbnVsbCxcbiAgICBlbnRpdHlfZW5lcmd5X3RvOiBudWxsLFxuICAgIGVudGl0eV9lbmVyZ3lfcHJpY2U6IG51bGwsXG4gICAgbnVtYmVyX2VuZXJneV9wcmljZTogbnVsbCxcbiAgfSk7XG5cbmV4cG9ydCBjb25zdCBlbXB0eUdyaWRTb3VyY2VFbmVyZ3lQcmVmZXJlbmNlID1cbiAgKCk6IEdyaWRTb3VyY2VUeXBlRW5lcmd5UHJlZmVyZW5jZSA9PiAoe1xuICAgIHR5cGU6IFwiZ3JpZFwiLFxuICAgIGZsb3dfZnJvbTogW10sXG4gICAgZmxvd190bzogW10sXG4gICAgY29zdF9hZGp1c3RtZW50X2RheTogMCxcbiAgfSk7XG5cbmV4cG9ydCBjb25zdCBlbXB0eVNvbGFyRW5lcmd5UHJlZmVyZW5jZSA9XG4gICgpOiBTb2xhclNvdXJjZVR5cGVFbmVyZ3lQcmVmZXJlbmNlID0+ICh7XG4gICAgdHlwZTogXCJzb2xhclwiLFxuICAgIHN0YXRfZW5lcmd5X2Zyb206IFwiXCIsXG4gICAgY29uZmlnX2VudHJ5X3NvbGFyX2ZvcmVjYXN0OiBudWxsLFxuICB9KTtcblxuZXhwb3J0IGNvbnN0IGVtcHR5QmF0dGVyeUVuZXJneVByZWZlcmVuY2UgPVxuICAoKTogQmF0dGVyeVNvdXJjZVR5cGVFbmVyZ3lQcmVmZXJlbmNlID0+ICh7XG4gICAgdHlwZTogXCJiYXR0ZXJ5XCIsXG4gICAgc3RhdF9lbmVyZ3lfZnJvbTogXCJcIixcbiAgICBzdGF0X2VuZXJneV90bzogXCJcIixcbiAgfSk7XG5leHBvcnQgY29uc3QgZW1wdHlHYXNFbmVyZ3lQcmVmZXJlbmNlID0gKCk6IEdhc1NvdXJjZVR5cGVFbmVyZ3lQcmVmZXJlbmNlID0+ICh7XG4gIHR5cGU6IFwiZ2FzXCIsXG4gIHN0YXRfZW5lcmd5X2Zyb206IFwiXCIsXG4gIHN0YXRfY29zdDogbnVsbCxcbiAgZW50aXR5X2VuZXJneV9mcm9tOiBudWxsLFxuICBlbnRpdHlfZW5lcmd5X3ByaWNlOiBudWxsLFxuICBudW1iZXJfZW5lcmd5X3ByaWNlOiBudWxsLFxufSk7XG5cbmludGVyZmFjZSBFbmVyZ3lTb2xhckZvcmVjYXN0IHtcbiAgd2hfaG91cnM6IFJlY29yZDxzdHJpbmcsIG51bWJlcj47XG59XG5leHBvcnQgdHlwZSBFbmVyZ3lTb2xhckZvcmVjYXN0cyA9IHtcbiAgW2NvbmZpZ19lbnRyeV9pZDogc3RyaW5nXTogRW5lcmd5U29sYXJGb3JlY2FzdDtcbn07XG5cbmV4cG9ydCBpbnRlcmZhY2UgRGV2aWNlQ29uc3VtcHRpb25FbmVyZ3lQcmVmZXJlbmNlIHtcbiAgLy8gVGhpcyBpcyBhbiBldmVyIGluY3JlYXNpbmcgdmFsdWVcbiAgc3RhdF9jb25zdW1wdGlvbjogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEZsb3dGcm9tR3JpZFNvdXJjZUVuZXJneVByZWZlcmVuY2Uge1xuICAvLyBrV2ggbWV0ZXJcbiAgc3RhdF9lbmVyZ3lfZnJvbTogc3RyaW5nO1xuXG4gIC8vICQgbWV0ZXJcbiAgc3RhdF9jb3N0OiBzdHJpbmcgfCBudWxsO1xuXG4gIC8vIENhbiBiZSB1c2VkIHRvIGdlbmVyYXRlIGNvc3RzIGlmIHN0YXRfY29zdCBvbWl0dGVkXG4gIGVudGl0eV9lbmVyZ3lfZnJvbTogc3RyaW5nIHwgbnVsbDtcbiAgZW50aXR5X2VuZXJneV9wcmljZTogc3RyaW5nIHwgbnVsbDtcbiAgbnVtYmVyX2VuZXJneV9wcmljZTogbnVtYmVyIHwgbnVsbDtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBGbG93VG9HcmlkU291cmNlRW5lcmd5UHJlZmVyZW5jZSB7XG4gIC8vIGtXaCBtZXRlclxuICBzdGF0X2VuZXJneV90bzogc3RyaW5nO1xuXG4gIC8vICQgbWV0ZXJcbiAgc3RhdF9jb21wZW5zYXRpb246IHN0cmluZyB8IG51bGw7XG5cbiAgLy8gQ2FuIGJlIHVzZWQgdG8gZ2VuZXJhdGUgY29zdHMgaWYgc3RhdF9jb3N0IG9taXR0ZWRcbiAgZW50aXR5X2VuZXJneV90bzogc3RyaW5nIHwgbnVsbDtcbiAgZW50aXR5X2VuZXJneV9wcmljZTogc3RyaW5nIHwgbnVsbDtcbiAgbnVtYmVyX2VuZXJneV9wcmljZTogbnVtYmVyIHwgbnVsbDtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBHcmlkU291cmNlVHlwZUVuZXJneVByZWZlcmVuY2Uge1xuICB0eXBlOiBcImdyaWRcIjtcblxuICBmbG93X2Zyb206IEZsb3dGcm9tR3JpZFNvdXJjZUVuZXJneVByZWZlcmVuY2VbXTtcbiAgZmxvd190bzogRmxvd1RvR3JpZFNvdXJjZUVuZXJneVByZWZlcmVuY2VbXTtcblxuICBjb3N0X2FkanVzdG1lbnRfZGF5OiBudW1iZXI7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgU29sYXJTb3VyY2VUeXBlRW5lcmd5UHJlZmVyZW5jZSB7XG4gIHR5cGU6IFwic29sYXJcIjtcblxuICBzdGF0X2VuZXJneV9mcm9tOiBzdHJpbmc7XG4gIGNvbmZpZ19lbnRyeV9zb2xhcl9mb3JlY2FzdDogc3RyaW5nW10gfCBudWxsO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEJhdHRlcnlTb3VyY2VUeXBlRW5lcmd5UHJlZmVyZW5jZSB7XG4gIHR5cGU6IFwiYmF0dGVyeVwiO1xuICBzdGF0X2VuZXJneV9mcm9tOiBzdHJpbmc7XG4gIHN0YXRfZW5lcmd5X3RvOiBzdHJpbmc7XG59XG5leHBvcnQgaW50ZXJmYWNlIEdhc1NvdXJjZVR5cGVFbmVyZ3lQcmVmZXJlbmNlIHtcbiAgdHlwZTogXCJnYXNcIjtcblxuICAvLyBrV2ggbWV0ZXJcbiAgc3RhdF9lbmVyZ3lfZnJvbTogc3RyaW5nO1xuXG4gIC8vICQgbWV0ZXJcbiAgc3RhdF9jb3N0OiBzdHJpbmcgfCBudWxsO1xuXG4gIC8vIENhbiBiZSB1c2VkIHRvIGdlbmVyYXRlIGNvc3RzIGlmIHN0YXRfY29zdCBvbWl0dGVkXG4gIGVudGl0eV9lbmVyZ3lfZnJvbTogc3RyaW5nIHwgbnVsbDtcbiAgZW50aXR5X2VuZXJneV9wcmljZTogc3RyaW5nIHwgbnVsbDtcbiAgbnVtYmVyX2VuZXJneV9wcmljZTogbnVtYmVyIHwgbnVsbDtcbiAgdW5pdF9vZl9tZWFzdXJlbWVudD86IHN0cmluZyB8IG51bGw7XG59XG5cbnR5cGUgRW5lcmd5U291cmNlID1cbiAgfCBTb2xhclNvdXJjZVR5cGVFbmVyZ3lQcmVmZXJlbmNlXG4gIHwgR3JpZFNvdXJjZVR5cGVFbmVyZ3lQcmVmZXJlbmNlXG4gIHwgQmF0dGVyeVNvdXJjZVR5cGVFbmVyZ3lQcmVmZXJlbmNlXG4gIHwgR2FzU291cmNlVHlwZUVuZXJneVByZWZlcmVuY2U7XG5cbmV4cG9ydCBpbnRlcmZhY2UgRW5lcmd5UHJlZmVyZW5jZXMge1xuICBlbmVyZ3lfc291cmNlczogRW5lcmd5U291cmNlW107XG4gIGRldmljZV9jb25zdW1wdGlvbjogRGV2aWNlQ29uc3VtcHRpb25FbmVyZ3lQcmVmZXJlbmNlW107XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgRW5lcmd5SW5mbyB7XG4gIGNvc3Rfc2Vuc29yczogUmVjb3JkPHN0cmluZywgc3RyaW5nPjtcbiAgc29sYXJfZm9yZWNhc3RfZG9tYWluczogc3RyaW5nW107XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgRW5lcmd5VmFsaWRhdGlvbklzc3VlIHtcbiAgdHlwZTogc3RyaW5nO1xuICBpZGVudGlmaWVyOiBzdHJpbmc7XG4gIHZhbHVlPzogdW5rbm93bjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBFbmVyZ3lQcmVmZXJlbmNlc1ZhbGlkYXRpb24ge1xuICBlbmVyZ3lfc291cmNlczogRW5lcmd5VmFsaWRhdGlvbklzc3VlW11bXTtcbiAgZGV2aWNlX2NvbnN1bXB0aW9uOiBFbmVyZ3lWYWxpZGF0aW9uSXNzdWVbXVtdO1xufVxuXG5leHBvcnQgY29uc3QgZ2V0RW5lcmd5SW5mbyA9IChoYXNzOiBIb21lQXNzaXN0YW50KSA9PlxuICBoYXNzLmNhbGxXUzxFbmVyZ3lJbmZvPih7XG4gICAgdHlwZTogXCJlbmVyZ3kvaW5mb1wiLFxuICB9KTtcblxuZXhwb3J0IGNvbnN0IGdldEVuZXJneVByZWZlcmVuY2VWYWxpZGF0aW9uID0gKGhhc3M6IEhvbWVBc3Npc3RhbnQpID0+XG4gIGhhc3MuY2FsbFdTPEVuZXJneVByZWZlcmVuY2VzVmFsaWRhdGlvbj4oe1xuICAgIHR5cGU6IFwiZW5lcmd5L3ZhbGlkYXRlXCIsXG4gIH0pO1xuXG5leHBvcnQgY29uc3QgZ2V0RW5lcmd5UHJlZmVyZW5jZXMgPSAoaGFzczogSG9tZUFzc2lzdGFudCkgPT5cbiAgaGFzcy5jYWxsV1M8RW5lcmd5UHJlZmVyZW5jZXM+KHtcbiAgICB0eXBlOiBcImVuZXJneS9nZXRfcHJlZnNcIixcbiAgfSk7XG5cbmV4cG9ydCBjb25zdCBzYXZlRW5lcmd5UHJlZmVyZW5jZXMgPSBhc3luYyAoXG4gIGhhc3M6IEhvbWVBc3Npc3RhbnQsXG4gIHByZWZzOiBQYXJ0aWFsPEVuZXJneVByZWZlcmVuY2VzPlxuKSA9PiB7XG4gIGNvbnN0IG5ld1ByZWZzID0gaGFzcy5jYWxsV1M8RW5lcmd5UHJlZmVyZW5jZXM+KHtcbiAgICB0eXBlOiBcImVuZXJneS9zYXZlX3ByZWZzXCIsXG4gICAgLi4ucHJlZnMsXG4gIH0pO1xuICBjbGVhckVuZXJneUNvbGxlY3Rpb25QcmVmZXJlbmNlcyhoYXNzKTtcbiAgcmV0dXJuIG5ld1ByZWZzO1xufTtcblxuZXhwb3J0IGludGVyZmFjZSBGb3NzaWxFbmVyZ3lDb25zdW1wdGlvbiB7XG4gIFtkYXRlOiBzdHJpbmddOiBudW1iZXI7XG59XG5cbmV4cG9ydCBjb25zdCBnZXRGb3NzaWxFbmVyZ3lDb25zdW1wdGlvbiA9IGFzeW5jIChcbiAgaGFzczogSG9tZUFzc2lzdGFudCxcbiAgc3RhcnRUaW1lOiBEYXRlLFxuICBlbmVyZ3lfc3RhdGlzdGljX2lkczogc3RyaW5nW10sXG4gIGNvMl9zdGF0aXN0aWNfaWQ6IHN0cmluZyxcbiAgZW5kVGltZT86IERhdGUsXG4gIHBlcmlvZDogXCI1bWludXRlXCIgfCBcImhvdXJcIiB8IFwiZGF5XCIgfCBcIm1vbnRoXCIgPSBcImhvdXJcIlxuKSA9PlxuICBoYXNzLmNhbGxXUzxGb3NzaWxFbmVyZ3lDb25zdW1wdGlvbj4oe1xuICAgIHR5cGU6IFwiZW5lcmd5L2Zvc3NpbF9lbmVyZ3lfY29uc3VtcHRpb25cIixcbiAgICBzdGFydF90aW1lOiBzdGFydFRpbWUudG9JU09TdHJpbmcoKSxcbiAgICBlbmRfdGltZTogZW5kVGltZT8udG9JU09TdHJpbmcoKSxcbiAgICBlbmVyZ3lfc3RhdGlzdGljX2lkcyxcbiAgICBjbzJfc3RhdGlzdGljX2lkLFxuICAgIHBlcmlvZCxcbiAgfSk7XG5cbmludGVyZmFjZSBFbmVyZ3lTb3VyY2VCeVR5cGUge1xuICBncmlkPzogR3JpZFNvdXJjZVR5cGVFbmVyZ3lQcmVmZXJlbmNlW107XG4gIHNvbGFyPzogU29sYXJTb3VyY2VUeXBlRW5lcmd5UHJlZmVyZW5jZVtdO1xuICBiYXR0ZXJ5PzogQmF0dGVyeVNvdXJjZVR5cGVFbmVyZ3lQcmVmZXJlbmNlW107XG4gIGdhcz86IEdhc1NvdXJjZVR5cGVFbmVyZ3lQcmVmZXJlbmNlW107XG59XG5cbmV4cG9ydCBjb25zdCBlbmVyZ3lTb3VyY2VzQnlUeXBlID0gKHByZWZzOiBFbmVyZ3lQcmVmZXJlbmNlcykgPT5cbiAgZ3JvdXBCeShwcmVmcy5lbmVyZ3lfc291cmNlcywgKGl0ZW0pID0+IGl0ZW0udHlwZSkgYXMgRW5lcmd5U291cmNlQnlUeXBlO1xuXG5leHBvcnQgaW50ZXJmYWNlIEVuZXJneURhdGEge1xuICBzdGFydDogRGF0ZTtcbiAgZW5kPzogRGF0ZTtcbiAgc3RhcnRDb21wYXJlPzogRGF0ZTtcbiAgZW5kQ29tcGFyZT86IERhdGU7XG4gIHByZWZzOiBFbmVyZ3lQcmVmZXJlbmNlcztcbiAgaW5mbzogRW5lcmd5SW5mbztcbiAgc3RhdHM6IFN0YXRpc3RpY3M7XG4gIHN0YXRzTWV0YWRhdGE6IFJlY29yZDxzdHJpbmcsIFN0YXRpc3RpY3NNZXRhRGF0YT47XG4gIHN0YXRzQ29tcGFyZTogU3RhdGlzdGljcztcbiAgY28yU2lnbmFsQ29uZmlnRW50cnk/OiBDb25maWdFbnRyeTtcbiAgY28yU2lnbmFsRW50aXR5Pzogc3RyaW5nO1xuICBmb3NzaWxFbmVyZ3lDb25zdW1wdGlvbj86IEZvc3NpbEVuZXJneUNvbnN1bXB0aW9uO1xuICBmb3NzaWxFbmVyZ3lDb25zdW1wdGlvbkNvbXBhcmU/OiBGb3NzaWxFbmVyZ3lDb25zdW1wdGlvbjtcbn1cblxuY29uc3QgZ2V0RW5lcmd5RGF0YSA9IGFzeW5jIChcbiAgaGFzczogSG9tZUFzc2lzdGFudCxcbiAgcHJlZnM6IEVuZXJneVByZWZlcmVuY2VzLFxuICBzdGFydDogRGF0ZSxcbiAgZW5kPzogRGF0ZSxcbiAgY29tcGFyZT86IGJvb2xlYW5cbik6IFByb21pc2U8RW5lcmd5RGF0YT4gPT4ge1xuICBjb25zdCBbY29uZmlnRW50cmllcywgZW50aXR5UmVnaXN0cnlFbnRyaWVzLCBpbmZvXSA9IGF3YWl0IFByb21pc2UuYWxsKFtcbiAgICBnZXRDb25maWdFbnRyaWVzKGhhc3MsIHsgZG9tYWluOiBcImNvMnNpZ25hbFwiIH0pLFxuICAgIHN1YnNjcmliZU9uZShoYXNzLmNvbm5lY3Rpb24sIHN1YnNjcmliZUVudGl0eVJlZ2lzdHJ5KSxcbiAgICBnZXRFbmVyZ3lJbmZvKGhhc3MpLFxuICBdKTtcblxuICBjb25zdCBjbzJTaWduYWxDb25maWdFbnRyeSA9IGNvbmZpZ0VudHJpZXMubGVuZ3RoXG4gICAgPyBjb25maWdFbnRyaWVzWzBdXG4gICAgOiB1bmRlZmluZWQ7XG5cbiAgbGV0IGNvMlNpZ25hbEVudGl0eTogc3RyaW5nIHwgdW5kZWZpbmVkO1xuXG4gIGlmIChjbzJTaWduYWxDb25maWdFbnRyeSkge1xuICAgIGZvciAoY29uc3QgZW50cnkgb2YgZW50aXR5UmVnaXN0cnlFbnRyaWVzKSB7XG4gICAgICBpZiAoZW50cnkuY29uZmlnX2VudHJ5X2lkICE9PSBjbzJTaWduYWxDb25maWdFbnRyeS5lbnRyeV9pZCkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgLy8gVGhlIGludGVncmF0aW9uIG9mZmVycyAyIGVudGl0aWVzLiBXZSB3YW50IHRoZSAlIG9uZS5cbiAgICAgIGNvbnN0IGNvMlN0YXRlID0gaGFzcy5zdGF0ZXNbZW50cnkuZW50aXR5X2lkXTtcbiAgICAgIGlmICghY28yU3RhdGUgfHwgY28yU3RhdGUuYXR0cmlidXRlcy51bml0X29mX21lYXN1cmVtZW50ICE9PSBcIiVcIikge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgY28yU2lnbmFsRW50aXR5ID0gY28yU3RhdGUuZW50aXR5X2lkO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgY29uc3QgY29uc3VtcHRpb25TdGF0SURzOiBzdHJpbmdbXSA9IFtdO1xuICBjb25zdCBzdGF0SURzOiBzdHJpbmdbXSA9IFtdO1xuXG4gIGZvciAoY29uc3Qgc291cmNlIG9mIHByZWZzLmVuZXJneV9zb3VyY2VzKSB7XG4gICAgaWYgKHNvdXJjZS50eXBlID09PSBcInNvbGFyXCIpIHtcbiAgICAgIHN0YXRJRHMucHVzaChzb3VyY2Uuc3RhdF9lbmVyZ3lfZnJvbSk7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICBpZiAoc291cmNlLnR5cGUgPT09IFwiZ2FzXCIpIHtcbiAgICAgIHN0YXRJRHMucHVzaChzb3VyY2Uuc3RhdF9lbmVyZ3lfZnJvbSk7XG4gICAgICBpZiAoc291cmNlLnN0YXRfY29zdCkge1xuICAgICAgICBzdGF0SURzLnB1c2goc291cmNlLnN0YXRfY29zdCk7XG4gICAgICB9XG4gICAgICBjb25zdCBjb3N0U3RhdElkID0gaW5mby5jb3N0X3NlbnNvcnNbc291cmNlLnN0YXRfZW5lcmd5X2Zyb21dO1xuICAgICAgaWYgKGNvc3RTdGF0SWQpIHtcbiAgICAgICAgc3RhdElEcy5wdXNoKGNvc3RTdGF0SWQpO1xuICAgICAgfVxuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgaWYgKHNvdXJjZS50eXBlID09PSBcImJhdHRlcnlcIikge1xuICAgICAgc3RhdElEcy5wdXNoKHNvdXJjZS5zdGF0X2VuZXJneV9mcm9tKTtcbiAgICAgIHN0YXRJRHMucHVzaChzb3VyY2Uuc3RhdF9lbmVyZ3lfdG8pO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgLy8gZ3JpZCBzb3VyY2VcbiAgICBmb3IgKGNvbnN0IGZsb3dGcm9tIG9mIHNvdXJjZS5mbG93X2Zyb20pIHtcbiAgICAgIGNvbnN1bXB0aW9uU3RhdElEcy5wdXNoKGZsb3dGcm9tLnN0YXRfZW5lcmd5X2Zyb20pO1xuICAgICAgc3RhdElEcy5wdXNoKGZsb3dGcm9tLnN0YXRfZW5lcmd5X2Zyb20pO1xuICAgICAgaWYgKGZsb3dGcm9tLnN0YXRfY29zdCkge1xuICAgICAgICBzdGF0SURzLnB1c2goZmxvd0Zyb20uc3RhdF9jb3N0KTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGNvc3RTdGF0SWQgPSBpbmZvLmNvc3Rfc2Vuc29yc1tmbG93RnJvbS5zdGF0X2VuZXJneV9mcm9tXTtcbiAgICAgIGlmIChjb3N0U3RhdElkKSB7XG4gICAgICAgIHN0YXRJRHMucHVzaChjb3N0U3RhdElkKTtcbiAgICAgIH1cbiAgICB9XG4gICAgZm9yIChjb25zdCBmbG93VG8gb2Ygc291cmNlLmZsb3dfdG8pIHtcbiAgICAgIHN0YXRJRHMucHVzaChmbG93VG8uc3RhdF9lbmVyZ3lfdG8pO1xuICAgICAgaWYgKGZsb3dUby5zdGF0X2NvbXBlbnNhdGlvbikge1xuICAgICAgICBzdGF0SURzLnB1c2goZmxvd1RvLnN0YXRfY29tcGVuc2F0aW9uKTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGNvc3RTdGF0SWQgPSBpbmZvLmNvc3Rfc2Vuc29yc1tmbG93VG8uc3RhdF9lbmVyZ3lfdG9dO1xuICAgICAgaWYgKGNvc3RTdGF0SWQpIHtcbiAgICAgICAgc3RhdElEcy5wdXNoKGNvc3RTdGF0SWQpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGNvbnN0IGRheURpZmZlcmVuY2UgPSBkaWZmZXJlbmNlSW5EYXlzKGVuZCB8fCBuZXcgRGF0ZSgpLCBzdGFydCk7XG4gIGNvbnN0IHBlcmlvZCA9XG4gICAgZGF5RGlmZmVyZW5jZSA+IDM1ID8gXCJtb250aFwiIDogZGF5RGlmZmVyZW5jZSA+IDIgPyBcImRheVwiIDogXCJob3VyXCI7XG5cbiAgLy8gU3VidHJhY3QgMSBob3VyIGZyb20gc3RhcnQgdG8gZ2V0IHN0YXJ0aW5nIHBvaW50IGRhdGFcbiAgY29uc3Qgc3RhcnRNaW5Ib3VyID0gYWRkSG91cnMoc3RhcnQsIC0xKTtcblxuICBjb25zdCBzdGF0cyA9IGF3YWl0IGZldGNoU3RhdGlzdGljcyhcbiAgICBoYXNzISxcbiAgICBzdGFydE1pbkhvdXIsXG4gICAgZW5kLFxuICAgIHN0YXRJRHMsXG4gICAgcGVyaW9kXG4gICk7XG5cbiAgbGV0IHN0YXRzQ29tcGFyZTtcbiAgbGV0IHN0YXJ0Q29tcGFyZTtcbiAgbGV0IGVuZENvbXBhcmU7XG4gIGlmIChjb21wYXJlKSB7XG4gICAgaWYgKGRheURpZmZlcmVuY2UgPiAyNyAmJiBkYXlEaWZmZXJlbmNlIDwgMzIpIHtcbiAgICAgIC8vIFdoZW4gY29tcGFyaW5nIGEgbW9udGgsIHdlIHdhbnQgdG8gc3RhcnQgYXQgdGhlIGJlZ2luaW5nIG9mIHRoZSBtb250aFxuICAgICAgc3RhcnRDb21wYXJlID0gYWRkTW9udGhzKHN0YXJ0LCAtMSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0YXJ0Q29tcGFyZSA9IGFkZERheXMoc3RhcnQsIChkYXlEaWZmZXJlbmNlICsgMSkgKiAtMSk7XG4gICAgfVxuXG4gICAgY29uc3QgY29tcGFyZVN0YXJ0TWluSG91ciA9IGFkZEhvdXJzKHN0YXJ0Q29tcGFyZSwgLTEpO1xuICAgIGVuZENvbXBhcmUgPSBhZGRNaWxsaXNlY29uZHMoc3RhcnQsIC0xKTtcblxuICAgIHN0YXRzQ29tcGFyZSA9IGF3YWl0IGZldGNoU3RhdGlzdGljcyhcbiAgICAgIGhhc3MhLFxuICAgICAgY29tcGFyZVN0YXJ0TWluSG91cixcbiAgICAgIGVuZENvbXBhcmUsXG4gICAgICBzdGF0SURzLFxuICAgICAgcGVyaW9kXG4gICAgKTtcbiAgfVxuXG4gIGxldCBmb3NzaWxFbmVyZ3lDb25zdW1wdGlvbjogRm9zc2lsRW5lcmd5Q29uc3VtcHRpb24gfCB1bmRlZmluZWQ7XG4gIGxldCBmb3NzaWxFbmVyZ3lDb25zdW1wdGlvbkNvbXBhcmU6IEZvc3NpbEVuZXJneUNvbnN1bXB0aW9uIHwgdW5kZWZpbmVkO1xuXG4gIGlmIChjbzJTaWduYWxFbnRpdHkgIT09IHVuZGVmaW5lZCkge1xuICAgIGZvc3NpbEVuZXJneUNvbnN1bXB0aW9uID0gYXdhaXQgZ2V0Rm9zc2lsRW5lcmd5Q29uc3VtcHRpb24oXG4gICAgICBoYXNzISxcbiAgICAgIHN0YXJ0LFxuICAgICAgY29uc3VtcHRpb25TdGF0SURzLFxuICAgICAgY28yU2lnbmFsRW50aXR5LFxuICAgICAgZW5kLFxuICAgICAgZGF5RGlmZmVyZW5jZSA+IDM1ID8gXCJtb250aFwiIDogZGF5RGlmZmVyZW5jZSA+IDIgPyBcImRheVwiIDogXCJob3VyXCJcbiAgICApO1xuICAgIGlmIChjb21wYXJlKSB7XG4gICAgICBmb3NzaWxFbmVyZ3lDb25zdW1wdGlvbkNvbXBhcmUgPSBhd2FpdCBnZXRGb3NzaWxFbmVyZ3lDb25zdW1wdGlvbihcbiAgICAgICAgaGFzcyEsXG4gICAgICAgIHN0YXJ0Q29tcGFyZSxcbiAgICAgICAgY29uc3VtcHRpb25TdGF0SURzLFxuICAgICAgICBjbzJTaWduYWxFbnRpdHksXG4gICAgICAgIGVuZENvbXBhcmUsXG4gICAgICAgIGRheURpZmZlcmVuY2UgPiAzNSA/IFwibW9udGhcIiA6IGRheURpZmZlcmVuY2UgPiAyID8gXCJkYXlcIiA6IFwiaG91clwiXG4gICAgICApO1xuICAgIH1cbiAgfVxuXG4gIE9iamVjdC52YWx1ZXMoc3RhdHMpLmZvckVhY2goKHN0YXQpID0+IHtcbiAgICAvLyBpZiB0aGUgc3RhcnQgb2YgdGhlIGZpcnN0IHZhbHVlIGlzIGFmdGVyIHRoZSByZXF1ZXN0ZWQgcGVyaW9kLCB3ZSBoYXZlIHRoZSBmaXJzdCBkYXRhIHBvaW50LCBhbmQgc2hvdWxkIGFkZCBhIHplcm8gcG9pbnRcbiAgICBpZiAoc3RhdC5sZW5ndGggJiYgbmV3IERhdGUoc3RhdFswXS5zdGFydCkgPiBzdGFydE1pbkhvdXIpIHtcbiAgICAgIHN0YXQudW5zaGlmdCh7XG4gICAgICAgIC4uLnN0YXRbMF0sXG4gICAgICAgIHN0YXJ0OiBzdGFydE1pbkhvdXIudG9JU09TdHJpbmcoKSxcbiAgICAgICAgZW5kOiBzdGFydE1pbkhvdXIudG9JU09TdHJpbmcoKSxcbiAgICAgICAgc3VtOiAwLFxuICAgICAgICBzdGF0ZTogMCxcbiAgICAgIH0pO1xuICAgIH1cbiAgfSk7XG5cbiAgY29uc3Qgc3RhdHNNZXRhZGF0YUFycmF5ID0gYXdhaXQgZ2V0U3RhdGlzdGljTWV0YWRhdGEoaGFzcywgc3RhdElEcyk7XG4gIGNvbnN0IHN0YXRzTWV0YWRhdGE6IFJlY29yZDxzdHJpbmcsIFN0YXRpc3RpY3NNZXRhRGF0YT4gPSB7fTtcbiAgc3RhdHNNZXRhZGF0YUFycmF5LmZvckVhY2goKHgpID0+IHtcbiAgICBzdGF0c01ldGFkYXRhW3guc3RhdGlzdGljX2lkXSA9IHg7XG4gIH0pO1xuXG4gIGNvbnN0IGRhdGE6IEVuZXJneURhdGEgPSB7XG4gICAgc3RhcnQsXG4gICAgZW5kLFxuICAgIHN0YXJ0Q29tcGFyZSxcbiAgICBlbmRDb21wYXJlLFxuICAgIGluZm8sXG4gICAgcHJlZnMsXG4gICAgc3RhdHMsXG4gICAgc3RhdHNNZXRhZGF0YSxcbiAgICBzdGF0c0NvbXBhcmUsXG4gICAgY28yU2lnbmFsQ29uZmlnRW50cnksXG4gICAgY28yU2lnbmFsRW50aXR5LFxuICAgIGZvc3NpbEVuZXJneUNvbnN1bXB0aW9uLFxuICAgIGZvc3NpbEVuZXJneUNvbnN1bXB0aW9uQ29tcGFyZSxcbiAgfTtcblxuICByZXR1cm4gZGF0YTtcbn07XG5cbmV4cG9ydCBpbnRlcmZhY2UgRW5lcmd5Q29sbGVjdGlvbiBleHRlbmRzIENvbGxlY3Rpb248RW5lcmd5RGF0YT4ge1xuICBzdGFydDogRGF0ZTtcbiAgZW5kPzogRGF0ZTtcbiAgY29tcGFyZT86IGJvb2xlYW47XG4gIHByZWZzPzogRW5lcmd5UHJlZmVyZW5jZXM7XG4gIGNsZWFyUHJlZnMoKTogdm9pZDtcbiAgc2V0UGVyaW9kKG5ld1N0YXJ0OiBEYXRlLCBuZXdFbmQ/OiBEYXRlKTogdm9pZDtcbiAgc2V0Q29tcGFyZShjb21wYXJlOiBib29sZWFuKTogdm9pZDtcbiAgX3JlZnJlc2hUaW1lb3V0PzogbnVtYmVyO1xuICBfdXBkYXRlUGVyaW9kVGltZW91dD86IG51bWJlcjtcbiAgX2FjdGl2ZTogbnVtYmVyO1xufVxuXG5jb25zdCBjbGVhckVuZXJneUNvbGxlY3Rpb25QcmVmZXJlbmNlcyA9IChoYXNzOiBIb21lQXNzaXN0YW50KSA9PiB7XG4gIGVuZXJneUNvbGxlY3Rpb25LZXlzLmZvckVhY2goKGtleSkgPT4ge1xuICAgIGNvbnN0IGVuZXJneUNvbGxlY3Rpb24gPSBnZXRFbmVyZ3lEYXRhQ29sbGVjdGlvbihoYXNzLCB7IGtleSB9KTtcbiAgICBlbmVyZ3lDb2xsZWN0aW9uLmNsZWFyUHJlZnMoKTtcbiAgICBpZiAoZW5lcmd5Q29sbGVjdGlvbi5fYWN0aXZlKSB7XG4gICAgICBlbmVyZ3lDb2xsZWN0aW9uLnJlZnJlc2goKTtcbiAgICB9XG4gIH0pO1xufTtcblxuZXhwb3J0IGNvbnN0IGdldEVuZXJneURhdGFDb2xsZWN0aW9uID0gKFxuICBoYXNzOiBIb21lQXNzaXN0YW50LFxuICBvcHRpb25zOiB7IHByZWZzPzogRW5lcmd5UHJlZmVyZW5jZXM7IGtleT86IHN0cmluZyB9ID0ge31cbik6IEVuZXJneUNvbGxlY3Rpb24gPT4ge1xuICBsZXQga2V5ID0gXCJfZW5lcmd5XCI7XG4gIGlmIChvcHRpb25zLmtleSkge1xuICAgIGlmICghb3B0aW9ucy5rZXkuc3RhcnRzV2l0aChcImVuZXJneV9cIikpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIktleSBuZWVkIHRvIHN0YXJ0IHdpdGggZW5lcmd5X1wiKTtcbiAgICB9XG4gICAga2V5ID0gYF8ke29wdGlvbnMua2V5fWA7XG4gIH1cblxuICBpZiAoKGhhc3MuY29ubmVjdGlvbiBhcyBhbnkpW2tleV0pIHtcbiAgICByZXR1cm4gKGhhc3MuY29ubmVjdGlvbiBhcyBhbnkpW2tleV07XG4gIH1cblxuICBlbmVyZ3lDb2xsZWN0aW9uS2V5cy5wdXNoKG9wdGlvbnMua2V5KTtcblxuICBjb25zdCBjb2xsZWN0aW9uID0gZ2V0Q29sbGVjdGlvbjxFbmVyZ3lEYXRhPihcbiAgICBoYXNzLmNvbm5lY3Rpb24sXG4gICAga2V5LFxuICAgIGFzeW5jICgpID0+IHtcbiAgICAgIGlmICghY29sbGVjdGlvbi5wcmVmcykge1xuICAgICAgICAvLyBUaGlzIHdpbGwgcmFpc2UgaWYgbm90IGZvdW5kLlxuICAgICAgICAvLyBEZXRlY3QgYnkgY2hlY2tpbmcgYGUuY29kZSA9PT0gXCJub3RfZm91bmRcIlxuICAgICAgICBjb2xsZWN0aW9uLnByZWZzID0gYXdhaXQgZ2V0RW5lcmd5UHJlZmVyZW5jZXMoaGFzcyk7XG4gICAgICB9XG5cbiAgICAgIGlmIChjb2xsZWN0aW9uLl9yZWZyZXNoVGltZW91dCkge1xuICAgICAgICBjbGVhclRpbWVvdXQoY29sbGVjdGlvbi5fcmVmcmVzaFRpbWVvdXQpO1xuICAgICAgfVxuXG4gICAgICBpZiAoXG4gICAgICAgIGNvbGxlY3Rpb24uX2FjdGl2ZSAmJlxuICAgICAgICAoIWNvbGxlY3Rpb24uZW5kIHx8IGNvbGxlY3Rpb24uZW5kID4gbmV3IERhdGUoKSlcbiAgICAgICkge1xuICAgICAgICAvLyBUaGUgc3RhdHMgYXJlIGNyZWF0ZWQgZXZlcnkgaG91clxuICAgICAgICAvLyBTY2hlZHVsZSBhIHJlZnJlc2ggZm9yIDIwIG1pbnV0ZXMgcGFzdCB0aGUgaG91clxuICAgICAgICAvLyBJZiB0aGUgZW5kIGlzIGxhcmdlciB0aGFuIHRoZSBjdXJyZW50IHRpbWUuXG4gICAgICAgIGNvbnN0IG5leHRGZXRjaCA9IG5ldyBEYXRlKCk7XG4gICAgICAgIGlmIChuZXh0RmV0Y2guZ2V0TWludXRlcygpID49IDIwKSB7XG4gICAgICAgICAgbmV4dEZldGNoLnNldEhvdXJzKG5leHRGZXRjaC5nZXRIb3VycygpICsgMSk7XG4gICAgICAgIH1cbiAgICAgICAgbmV4dEZldGNoLnNldE1pbnV0ZXMoMjAsIDAsIDApO1xuXG4gICAgICAgIGNvbGxlY3Rpb24uX3JlZnJlc2hUaW1lb3V0ID0gd2luZG93LnNldFRpbWVvdXQoXG4gICAgICAgICAgKCkgPT4gY29sbGVjdGlvbi5yZWZyZXNoKCksXG4gICAgICAgICAgbmV4dEZldGNoLmdldFRpbWUoKSAtIERhdGUubm93KClcbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGdldEVuZXJneURhdGEoXG4gICAgICAgIGhhc3MsXG4gICAgICAgIGNvbGxlY3Rpb24ucHJlZnMsXG4gICAgICAgIGNvbGxlY3Rpb24uc3RhcnQsXG4gICAgICAgIGNvbGxlY3Rpb24uZW5kLFxuICAgICAgICBjb2xsZWN0aW9uLmNvbXBhcmVcbiAgICAgICk7XG4gICAgfVxuICApIGFzIEVuZXJneUNvbGxlY3Rpb247XG5cbiAgY29uc3Qgb3JpZ1N1YnNjcmliZSA9IGNvbGxlY3Rpb24uc3Vic2NyaWJlO1xuXG4gIGNvbGxlY3Rpb24uc3Vic2NyaWJlID0gKHN1YnNjcmliZXI6IChkYXRhOiBFbmVyZ3lEYXRhKSA9PiB2b2lkKSA9PiB7XG4gICAgY29uc3QgdW5zdWIgPSBvcmlnU3Vic2NyaWJlKHN1YnNjcmliZXIpO1xuICAgIGNvbGxlY3Rpb24uX2FjdGl2ZSsrO1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBjb2xsZWN0aW9uLl9hY3RpdmUtLTtcbiAgICAgIGlmIChjb2xsZWN0aW9uLl9hY3RpdmUgPCAxKSB7XG4gICAgICAgIGNsZWFyVGltZW91dChjb2xsZWN0aW9uLl9yZWZyZXNoVGltZW91dCk7XG4gICAgICAgIGNvbGxlY3Rpb24uX3JlZnJlc2hUaW1lb3V0ID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgdW5zdWIoKTtcbiAgICB9O1xuICB9O1xuXG4gIGNvbGxlY3Rpb24uX2FjdGl2ZSA9IDA7XG4gIGNvbGxlY3Rpb24ucHJlZnMgPSBvcHRpb25zLnByZWZzO1xuICBjb25zdCBub3cgPSBuZXcgRGF0ZSgpO1xuICAvLyBTZXQgc3RhcnQgdG8gc3RhcnQgb2YgdG9kYXkgaWYgd2UgaGF2ZSBkYXRhIGZvciB0b2RheSwgb3RoZXJ3aXNlIHllc3RlcmRheVxuICBjb2xsZWN0aW9uLnN0YXJ0ID0gbm93LmdldEhvdXJzKCkgPiAwID8gc3RhcnRPZlRvZGF5KCkgOiBzdGFydE9mWWVzdGVyZGF5KCk7XG4gIGNvbGxlY3Rpb24uZW5kID0gbm93LmdldEhvdXJzKCkgPiAwID8gZW5kT2ZUb2RheSgpIDogZW5kT2ZZZXN0ZXJkYXkoKTtcblxuICBjb25zdCBzY2hlZHVsZVVwZGF0ZVBlcmlvZCA9ICgpID0+IHtcbiAgICBjb2xsZWN0aW9uLl91cGRhdGVQZXJpb2RUaW1lb3V0ID0gd2luZG93LnNldFRpbWVvdXQoXG4gICAgICAoKSA9PiB7XG4gICAgICAgIGNvbGxlY3Rpb24uc3RhcnQgPSBzdGFydE9mVG9kYXkoKTtcbiAgICAgICAgY29sbGVjdGlvbi5lbmQgPSBlbmRPZlRvZGF5KCk7XG4gICAgICAgIHNjaGVkdWxlVXBkYXRlUGVyaW9kKCk7XG4gICAgICB9LFxuICAgICAgYWRkSG91cnMoZW5kT2ZUb2RheSgpLCAxKS5nZXRUaW1lKCkgLSBEYXRlLm5vdygpIC8vIFN3aXRjaCB0byBuZXh0IGRheSBhbiBob3VyIGFmdGVyIHRoZSBkYXkgY2hhbmdlZFxuICAgICk7XG4gIH07XG4gIHNjaGVkdWxlVXBkYXRlUGVyaW9kKCk7XG5cbiAgY29sbGVjdGlvbi5jbGVhclByZWZzID0gKCkgPT4ge1xuICAgIGNvbGxlY3Rpb24ucHJlZnMgPSB1bmRlZmluZWQ7XG4gIH07XG4gIGNvbGxlY3Rpb24uc2V0UGVyaW9kID0gKG5ld1N0YXJ0OiBEYXRlLCBuZXdFbmQ/OiBEYXRlKSA9PiB7XG4gICAgY29sbGVjdGlvbi5zdGFydCA9IG5ld1N0YXJ0O1xuICAgIGNvbGxlY3Rpb24uZW5kID0gbmV3RW5kO1xuICAgIGlmIChcbiAgICAgIGNvbGxlY3Rpb24uc3RhcnQuZ2V0VGltZSgpID09PSBzdGFydE9mVG9kYXkoKS5nZXRUaW1lKCkgJiZcbiAgICAgIGNvbGxlY3Rpb24uZW5kPy5nZXRUaW1lKCkgPT09IGVuZE9mVG9kYXkoKS5nZXRUaW1lKCkgJiZcbiAgICAgICFjb2xsZWN0aW9uLl91cGRhdGVQZXJpb2RUaW1lb3V0XG4gICAgKSB7XG4gICAgICBzY2hlZHVsZVVwZGF0ZVBlcmlvZCgpO1xuICAgIH0gZWxzZSBpZiAoY29sbGVjdGlvbi5fdXBkYXRlUGVyaW9kVGltZW91dCkge1xuICAgICAgY2xlYXJUaW1lb3V0KGNvbGxlY3Rpb24uX3VwZGF0ZVBlcmlvZFRpbWVvdXQpO1xuICAgICAgY29sbGVjdGlvbi5fdXBkYXRlUGVyaW9kVGltZW91dCA9IHVuZGVmaW5lZDtcbiAgICB9XG4gIH07XG4gIGNvbGxlY3Rpb24uc2V0Q29tcGFyZSA9IChjb21wYXJlOiBib29sZWFuKSA9PiB7XG4gICAgY29sbGVjdGlvbi5jb21wYXJlID0gY29tcGFyZTtcbiAgfTtcbiAgcmV0dXJuIGNvbGxlY3Rpb247XG59O1xuXG5leHBvcnQgY29uc3QgZ2V0RW5lcmd5U29sYXJGb3JlY2FzdHMgPSAoaGFzczogSG9tZUFzc2lzdGFudCkgPT5cbiAgaGFzcy5jYWxsV1M8RW5lcmd5U29sYXJGb3JlY2FzdHM+KHtcbiAgICB0eXBlOiBcImVuZXJneS9zb2xhcl9mb3JlY2FzdFwiLFxuICB9KTtcblxuZXhwb3J0IGNvbnN0IEVORVJHWV9HQVNfVk9MVU1FX1VOSVRTID0gW1wibcKzXCIsIFwiZnTCs1wiXTtcbmV4cG9ydCBjb25zdCBFTkVSR1lfR0FTX0VORVJHWV9VTklUUyA9IFtcImtXaFwiXTtcbmV4cG9ydCBjb25zdCBFTkVSR1lfR0FTX1VOSVRTID0gW1xuICAuLi5FTkVSR1lfR0FTX1ZPTFVNRV9VTklUUyxcbiAgLi4uRU5FUkdZX0dBU19FTkVSR1lfVU5JVFMsXG5dO1xuXG5leHBvcnQgdHlwZSBFbmVyZ3lHYXNVbml0ID0gXCJ2b2x1bWVcIiB8IFwiZW5lcmd5XCI7XG5cbmV4cG9ydCBjb25zdCBnZXRFbmVyZ3lHYXNVbml0Q2F0ZWdvcnkgPSAoXG4gIGhhc3M6IEhvbWVBc3Npc3RhbnQsXG4gIHByZWZzOiBFbmVyZ3lQcmVmZXJlbmNlc1xuKTogRW5lcmd5R2FzVW5pdCB8IHVuZGVmaW5lZCA9PiB7XG4gIGZvciAoY29uc3Qgc291cmNlIG9mIHByZWZzLmVuZXJneV9zb3VyY2VzKSB7XG4gICAgaWYgKHNvdXJjZS50eXBlICE9PSBcImdhc1wiKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICBjb25zdCBlbnRpdHkgPSBoYXNzLnN0YXRlc1tzb3VyY2Uuc3RhdF9lbmVyZ3lfZnJvbV07XG4gICAgaWYgKGVudGl0eSkge1xuICAgICAgcmV0dXJuIEVORVJHWV9HQVNfVk9MVU1FX1VOSVRTLmluY2x1ZGVzKFxuICAgICAgICBlbnRpdHkuYXR0cmlidXRlcy51bml0X29mX21lYXN1cmVtZW50IVxuICAgICAgKVxuICAgICAgICA/IFwidm9sdW1lXCJcbiAgICAgICAgOiBcImVuZXJneVwiO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdW5kZWZpbmVkO1xufTtcblxuZXhwb3J0IGNvbnN0IGdldEVuZXJneUdhc1VuaXQgPSAoXG4gIGhhc3M6IEhvbWVBc3Npc3RhbnQsXG4gIHByZWZzOiBFbmVyZ3lQcmVmZXJlbmNlcyxcbiAgc3RhdGlzdGljc01ldGFEYXRhOiBSZWNvcmQ8c3RyaW5nLCBTdGF0aXN0aWNzTWV0YURhdGE+ID0ge31cbik6IHN0cmluZyB8IHVuZGVmaW5lZCA9PiB7XG4gIGZvciAoY29uc3Qgc291cmNlIG9mIHByZWZzLmVuZXJneV9zb3VyY2VzKSB7XG4gICAgaWYgKHNvdXJjZS50eXBlICE9PSBcImdhc1wiKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgY29uc3QgZW50aXR5ID0gaGFzcy5zdGF0ZXNbc291cmNlLnN0YXRfZW5lcmd5X2Zyb21dO1xuICAgIGlmIChlbnRpdHk/LmF0dHJpYnV0ZXMudW5pdF9vZl9tZWFzdXJlbWVudCkge1xuICAgICAgLy8gV2ggaXMgbm9ybWFsaXplZCB0byBrV2ggYnkgc3RhdHMgZ2VuZXJhdGlvblxuICAgICAgcmV0dXJuIGVudGl0eS5hdHRyaWJ1dGVzLnVuaXRfb2ZfbWVhc3VyZW1lbnQgPT09IFwiV2hcIlxuICAgICAgICA/IFwia1doXCJcbiAgICAgICAgOiBlbnRpdHkuYXR0cmlidXRlcy51bml0X29mX21lYXN1cmVtZW50O1xuICAgIH1cbiAgICBjb25zdCBzdGF0aXN0aWNJZFdpdGhNZXRhID0gc3RhdGlzdGljc01ldGFEYXRhW3NvdXJjZS5zdGF0X2VuZXJneV9mcm9tXTtcbiAgICBpZiAoc3RhdGlzdGljSWRXaXRoTWV0YT8udW5pdF9vZl9tZWFzdXJlbWVudCkge1xuICAgICAgcmV0dXJuIHN0YXRpc3RpY0lkV2l0aE1ldGEudW5pdF9vZl9tZWFzdXJlbWVudCA9PT0gXCJXaFwiXG4gICAgICAgID8gXCJrV2hcIlxuICAgICAgICA6IHN0YXRpc3RpY0lkV2l0aE1ldGEudW5pdF9vZl9tZWFzdXJlbWVudDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHVuZGVmaW5lZDtcbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/data/energy.ts\n");

/***/ }),

/***/ "./src/data/entity_registry.ts":
/*!*************************************!*\
  !*** ./src/data/entity_registry.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"findBatteryEntity\": () => (/* binding */ findBatteryEntity),\n/* harmony export */   \"findBatteryChargingEntity\": () => (/* binding */ findBatteryChargingEntity),\n/* harmony export */   \"computeEntityRegistryName\": () => (/* binding */ computeEntityRegistryName),\n/* harmony export */   \"getExtendedEntityRegistryEntry\": () => (/* binding */ getExtendedEntityRegistryEntry),\n/* harmony export */   \"updateEntityRegistryEntry\": () => (/* binding */ updateEntityRegistryEntry),\n/* harmony export */   \"removeEntityRegistryEntry\": () => (/* binding */ removeEntityRegistryEntry),\n/* harmony export */   \"fetchEntityRegistry\": () => (/* binding */ fetchEntityRegistry),\n/* harmony export */   \"subscribeEntityRegistry\": () => (/* binding */ subscribeEntityRegistry),\n/* harmony export */   \"sortEntityRegistryByName\": () => (/* binding */ sortEntityRegistryByName)\n/* harmony export */ });\n/* harmony import */ var home_assistant_js_websocket__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! home-assistant-js-websocket */ \"./node_modules/home-assistant-js-websocket/dist/collection.js\");\n/* harmony import */ var _common_entity_compute_state_name__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common/entity/compute_state_name */ \"./src/common/entity/compute_state_name.ts\");\n/* harmony import */ var _common_string_compare__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../common/string/compare */ \"./src/common/string/compare.ts\");\n/* harmony import */ var _common_util_debounce__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../common/util/debounce */ \"./src/common/util/debounce.ts\");\n\n\n\n\nconst findBatteryEntity = (hass, entities) => entities.find(entity => hass.states[entity.entity_id] && hass.states[entity.entity_id].attributes.device_class === \"battery\");\nconst findBatteryChargingEntity = (hass, entities) => entities.find(entity => hass.states[entity.entity_id] && hass.states[entity.entity_id].attributes.device_class === \"battery_charging\");\nconst computeEntityRegistryName = (hass, entry) => {\n  if (entry.name) {\n    return entry.name;\n  }\n\n  const state = hass.states[entry.entity_id];\n  return state ? (0,_common_entity_compute_state_name__WEBPACK_IMPORTED_MODULE_0__.computeStateName)(state) : entry.entity_id;\n};\nconst getExtendedEntityRegistryEntry = (hass, entityId) => hass.callWS({\n  type: \"config/entity_registry/get\",\n  entity_id: entityId\n});\nconst updateEntityRegistryEntry = (hass, entityId, updates) => hass.callWS({\n  type: \"config/entity_registry/update\",\n  entity_id: entityId,\n  ...updates\n});\nconst removeEntityRegistryEntry = (hass, entityId) => hass.callWS({\n  type: \"config/entity_registry/remove\",\n  entity_id: entityId\n});\nconst fetchEntityRegistry = conn => conn.sendMessagePromise({\n  type: \"config/entity_registry/list\"\n});\n\nconst subscribeEntityRegistryUpdates = (conn, store) => conn.subscribeEvents((0,_common_util_debounce__WEBPACK_IMPORTED_MODULE_2__.debounce)(() => fetchEntityRegistry(conn).then(entities => store.setState(entities, true)), 500, true), \"entity_registry_updated\");\n\nconst subscribeEntityRegistry = (conn, onChange) => (0,home_assistant_js_websocket__WEBPACK_IMPORTED_MODULE_3__.createCollection)(\"_entityRegistry\", fetchEntityRegistry, subscribeEntityRegistryUpdates, conn, onChange);\nconst sortEntityRegistryByName = entries => entries.sort((entry1, entry2) => (0,_common_string_compare__WEBPACK_IMPORTED_MODULE_1__.caseInsensitiveStringCompare)(entry1.name || \"\", entry2.name || \"\"));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvZGF0YS9lbnRpdHlfcmVnaXN0cnkudHMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBRUE7QUFDQTtBQUNBO0FBdURBO0FBVUE7QUFXQTtBQUlBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUtBO0FBQ0E7QUFGQTtBQUtBO0FBTUE7QUFDQTtBQUNBO0FBSEE7QUFNQTtBQUtBO0FBQ0E7QUFGQTtBQUtBO0FBRUE7QUFEQTs7QUFJQTs7QUFnQkE7QUFZQSIsInNvdXJjZXMiOlsid2VicGFjazovL2hvbWUtYXNzaXN0YW50LWZyb250ZW5kLy4vc3JjL2RhdGEvZW50aXR5X3JlZ2lzdHJ5LnRzPzNhNzkiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29ubmVjdGlvbiwgY3JlYXRlQ29sbGVjdGlvbiB9IGZyb20gXCJob21lLWFzc2lzdGFudC1qcy13ZWJzb2NrZXRcIjtcbmltcG9ydCB7IFN0b3JlIH0gZnJvbSBcImhvbWUtYXNzaXN0YW50LWpzLXdlYnNvY2tldC9kaXN0L3N0b3JlXCI7XG5pbXBvcnQgeyBjb21wdXRlU3RhdGVOYW1lIH0gZnJvbSBcIi4uL2NvbW1vbi9lbnRpdHkvY29tcHV0ZV9zdGF0ZV9uYW1lXCI7XG5pbXBvcnQgeyBjYXNlSW5zZW5zaXRpdmVTdHJpbmdDb21wYXJlIH0gZnJvbSBcIi4uL2NvbW1vbi9zdHJpbmcvY29tcGFyZVwiO1xuaW1wb3J0IHsgZGVib3VuY2UgfSBmcm9tIFwiLi4vY29tbW9uL3V0aWwvZGVib3VuY2VcIjtcbmltcG9ydCB7IEhvbWVBc3Npc3RhbnQgfSBmcm9tIFwiLi4vdHlwZXNcIjtcblxuZXhwb3J0IGludGVyZmFjZSBFbnRpdHlSZWdpc3RyeUVudHJ5IHtcbiAgZW50aXR5X2lkOiBzdHJpbmc7XG4gIG5hbWU6IHN0cmluZyB8IG51bGw7XG4gIGljb246IHN0cmluZyB8IG51bGw7XG4gIHBsYXRmb3JtOiBzdHJpbmc7XG4gIGNvbmZpZ19lbnRyeV9pZDogc3RyaW5nIHwgbnVsbDtcbiAgZGV2aWNlX2lkOiBzdHJpbmcgfCBudWxsO1xuICBhcmVhX2lkOiBzdHJpbmcgfCBudWxsO1xuICBkaXNhYmxlZF9ieTogc3RyaW5nIHwgbnVsbDtcbiAgaGlkZGVuX2J5OiBzdHJpbmcgfCBudWxsO1xuICBlbnRpdHlfY2F0ZWdvcnk6IFwiY29uZmlnXCIgfCBcImRpYWdub3N0aWNcIiB8IG51bGw7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgRXh0RW50aXR5UmVnaXN0cnlFbnRyeSBleHRlbmRzIEVudGl0eVJlZ2lzdHJ5RW50cnkge1xuICB1bmlxdWVfaWQ6IHN0cmluZztcbiAgY2FwYWJpbGl0aWVzOiBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPjtcbiAgb3JpZ2luYWxfbmFtZT86IHN0cmluZztcbiAgb3JpZ2luYWxfaWNvbj86IHN0cmluZztcbiAgZGV2aWNlX2NsYXNzPzogc3RyaW5nO1xuICBvcmlnaW5hbF9kZXZpY2VfY2xhc3M/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVXBkYXRlRW50aXR5UmVnaXN0cnlFbnRyeVJlc3VsdCB7XG4gIGVudGl0eV9lbnRyeTogRXh0RW50aXR5UmVnaXN0cnlFbnRyeTtcbiAgcmVsb2FkX2RlbGF5PzogbnVtYmVyO1xuICByZXF1aXJlX3Jlc3RhcnQ/OiBib29sZWFuO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFNlbnNvckVudGl0eU9wdGlvbnMge1xuICB1bml0X29mX21lYXN1cmVtZW50Pzogc3RyaW5nIHwgbnVsbDtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBXZWF0aGVyRW50aXR5T3B0aW9ucyB7XG4gIHByZWNpcGl0YXRpb25fdW5pdD86IHN0cmluZyB8IG51bGw7XG4gIHByZXNzdXJlX3VuaXQ/OiBzdHJpbmcgfCBudWxsO1xuICB0ZW1wZXJhdHVyZV91bml0Pzogc3RyaW5nIHwgbnVsbDtcbiAgdmlzaWJpbGl0eV91bml0Pzogc3RyaW5nIHwgbnVsbDtcbiAgd2luZF9zcGVlZF91bml0Pzogc3RyaW5nIHwgbnVsbDtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBFbnRpdHlSZWdpc3RyeUVudHJ5VXBkYXRlUGFyYW1zIHtcbiAgbmFtZT86IHN0cmluZyB8IG51bGw7XG4gIGljb24/OiBzdHJpbmcgfCBudWxsO1xuICBkZXZpY2VfY2xhc3M/OiBzdHJpbmcgfCBudWxsO1xuICBhcmVhX2lkPzogc3RyaW5nIHwgbnVsbDtcbiAgZGlzYWJsZWRfYnk/OiBzdHJpbmcgfCBudWxsO1xuICBoaWRkZW5fYnk6IHN0cmluZyB8IG51bGw7XG4gIG5ld19lbnRpdHlfaWQ/OiBzdHJpbmc7XG4gIG9wdGlvbnNfZG9tYWluPzogc3RyaW5nO1xuICBvcHRpb25zPzogU2Vuc29yRW50aXR5T3B0aW9ucyB8IFdlYXRoZXJFbnRpdHlPcHRpb25zO1xufVxuXG5leHBvcnQgY29uc3QgZmluZEJhdHRlcnlFbnRpdHkgPSAoXG4gIGhhc3M6IEhvbWVBc3Npc3RhbnQsXG4gIGVudGl0aWVzOiBFbnRpdHlSZWdpc3RyeUVudHJ5W11cbik6IEVudGl0eVJlZ2lzdHJ5RW50cnkgfCB1bmRlZmluZWQgPT5cbiAgZW50aXRpZXMuZmluZChcbiAgICAoZW50aXR5KSA9PlxuICAgICAgaGFzcy5zdGF0ZXNbZW50aXR5LmVudGl0eV9pZF0gJiZcbiAgICAgIGhhc3Muc3RhdGVzW2VudGl0eS5lbnRpdHlfaWRdLmF0dHJpYnV0ZXMuZGV2aWNlX2NsYXNzID09PSBcImJhdHRlcnlcIlxuICApO1xuXG5leHBvcnQgY29uc3QgZmluZEJhdHRlcnlDaGFyZ2luZ0VudGl0eSA9IChcbiAgaGFzczogSG9tZUFzc2lzdGFudCxcbiAgZW50aXRpZXM6IEVudGl0eVJlZ2lzdHJ5RW50cnlbXVxuKTogRW50aXR5UmVnaXN0cnlFbnRyeSB8IHVuZGVmaW5lZCA9PlxuICBlbnRpdGllcy5maW5kKFxuICAgIChlbnRpdHkpID0+XG4gICAgICBoYXNzLnN0YXRlc1tlbnRpdHkuZW50aXR5X2lkXSAmJlxuICAgICAgaGFzcy5zdGF0ZXNbZW50aXR5LmVudGl0eV9pZF0uYXR0cmlidXRlcy5kZXZpY2VfY2xhc3MgPT09XG4gICAgICAgIFwiYmF0dGVyeV9jaGFyZ2luZ1wiXG4gICk7XG5cbmV4cG9ydCBjb25zdCBjb21wdXRlRW50aXR5UmVnaXN0cnlOYW1lID0gKFxuICBoYXNzOiBIb21lQXNzaXN0YW50LFxuICBlbnRyeTogRW50aXR5UmVnaXN0cnlFbnRyeVxuKTogc3RyaW5nIHwgbnVsbCA9PiB7XG4gIGlmIChlbnRyeS5uYW1lKSB7XG4gICAgcmV0dXJuIGVudHJ5Lm5hbWU7XG4gIH1cbiAgY29uc3Qgc3RhdGUgPSBoYXNzLnN0YXRlc1tlbnRyeS5lbnRpdHlfaWRdO1xuICByZXR1cm4gc3RhdGUgPyBjb21wdXRlU3RhdGVOYW1lKHN0YXRlKSA6IGVudHJ5LmVudGl0eV9pZDtcbn07XG5cbmV4cG9ydCBjb25zdCBnZXRFeHRlbmRlZEVudGl0eVJlZ2lzdHJ5RW50cnkgPSAoXG4gIGhhc3M6IEhvbWVBc3Npc3RhbnQsXG4gIGVudGl0eUlkOiBzdHJpbmdcbik6IFByb21pc2U8RXh0RW50aXR5UmVnaXN0cnlFbnRyeT4gPT5cbiAgaGFzcy5jYWxsV1Moe1xuICAgIHR5cGU6IFwiY29uZmlnL2VudGl0eV9yZWdpc3RyeS9nZXRcIixcbiAgICBlbnRpdHlfaWQ6IGVudGl0eUlkLFxuICB9KTtcblxuZXhwb3J0IGNvbnN0IHVwZGF0ZUVudGl0eVJlZ2lzdHJ5RW50cnkgPSAoXG4gIGhhc3M6IEhvbWVBc3Npc3RhbnQsXG4gIGVudGl0eUlkOiBzdHJpbmcsXG4gIHVwZGF0ZXM6IFBhcnRpYWw8RW50aXR5UmVnaXN0cnlFbnRyeVVwZGF0ZVBhcmFtcz5cbik6IFByb21pc2U8VXBkYXRlRW50aXR5UmVnaXN0cnlFbnRyeVJlc3VsdD4gPT5cbiAgaGFzcy5jYWxsV1Moe1xuICAgIHR5cGU6IFwiY29uZmlnL2VudGl0eV9yZWdpc3RyeS91cGRhdGVcIixcbiAgICBlbnRpdHlfaWQ6IGVudGl0eUlkLFxuICAgIC4uLnVwZGF0ZXMsXG4gIH0pO1xuXG5leHBvcnQgY29uc3QgcmVtb3ZlRW50aXR5UmVnaXN0cnlFbnRyeSA9IChcbiAgaGFzczogSG9tZUFzc2lzdGFudCxcbiAgZW50aXR5SWQ6IHN0cmluZ1xuKTogUHJvbWlzZTx2b2lkPiA9PlxuICBoYXNzLmNhbGxXUyh7XG4gICAgdHlwZTogXCJjb25maWcvZW50aXR5X3JlZ2lzdHJ5L3JlbW92ZVwiLFxuICAgIGVudGl0eV9pZDogZW50aXR5SWQsXG4gIH0pO1xuXG5leHBvcnQgY29uc3QgZmV0Y2hFbnRpdHlSZWdpc3RyeSA9IChjb25uOiBDb25uZWN0aW9uKSA9PlxuICBjb25uLnNlbmRNZXNzYWdlUHJvbWlzZTxFbnRpdHlSZWdpc3RyeUVudHJ5W10+KHtcbiAgICB0eXBlOiBcImNvbmZpZy9lbnRpdHlfcmVnaXN0cnkvbGlzdFwiLFxuICB9KTtcblxuY29uc3Qgc3Vic2NyaWJlRW50aXR5UmVnaXN0cnlVcGRhdGVzID0gKFxuICBjb25uOiBDb25uZWN0aW9uLFxuICBzdG9yZTogU3RvcmU8RW50aXR5UmVnaXN0cnlFbnRyeVtdPlxuKSA9PlxuICBjb25uLnN1YnNjcmliZUV2ZW50cyhcbiAgICBkZWJvdW5jZShcbiAgICAgICgpID0+XG4gICAgICAgIGZldGNoRW50aXR5UmVnaXN0cnkoY29ubikudGhlbigoZW50aXRpZXMpID0+XG4gICAgICAgICAgc3RvcmUuc2V0U3RhdGUoZW50aXRpZXMsIHRydWUpXG4gICAgICAgICksXG4gICAgICA1MDAsXG4gICAgICB0cnVlXG4gICAgKSxcbiAgICBcImVudGl0eV9yZWdpc3RyeV91cGRhdGVkXCJcbiAgKTtcblxuZXhwb3J0IGNvbnN0IHN1YnNjcmliZUVudGl0eVJlZ2lzdHJ5ID0gKFxuICBjb25uOiBDb25uZWN0aW9uLFxuICBvbkNoYW5nZTogKGVudGl0aWVzOiBFbnRpdHlSZWdpc3RyeUVudHJ5W10pID0+IHZvaWRcbikgPT5cbiAgY3JlYXRlQ29sbGVjdGlvbjxFbnRpdHlSZWdpc3RyeUVudHJ5W10+KFxuICAgIFwiX2VudGl0eVJlZ2lzdHJ5XCIsXG4gICAgZmV0Y2hFbnRpdHlSZWdpc3RyeSxcbiAgICBzdWJzY3JpYmVFbnRpdHlSZWdpc3RyeVVwZGF0ZXMsXG4gICAgY29ubixcbiAgICBvbkNoYW5nZVxuICApO1xuXG5leHBvcnQgY29uc3Qgc29ydEVudGl0eVJlZ2lzdHJ5QnlOYW1lID0gKGVudHJpZXM6IEVudGl0eVJlZ2lzdHJ5RW50cnlbXSkgPT5cbiAgZW50cmllcy5zb3J0KChlbnRyeTEsIGVudHJ5MikgPT5cbiAgICBjYXNlSW5zZW5zaXRpdmVTdHJpbmdDb21wYXJlKGVudHJ5MS5uYW1lIHx8IFwiXCIsIGVudHJ5Mi5uYW1lIHx8IFwiXCIpXG4gICk7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/data/entity_registry.ts\n");

/***/ }),

/***/ "./src/data/history.ts":
/*!*****************************!*\
  !*** ./src/data/history.ts ***!
  \*****************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__) => {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"entityIdHistoryNeedsAttributes\": () => (/* binding */ entityIdHistoryNeedsAttributes),\n/* harmony export */   \"fetchRecent\": () => (/* binding */ fetchRecent),\n/* harmony export */   \"fetchRecentWS\": () => (/* binding */ fetchRecentWS),\n/* harmony export */   \"fetchDate\": () => (/* binding */ fetchDate),\n/* harmony export */   \"fetchDateWS\": () => (/* binding */ fetchDateWS),\n/* harmony export */   \"computeHistory\": () => (/* binding */ computeHistory),\n/* harmony export */   \"getStatisticIds\": () => (/* binding */ getStatisticIds),\n/* harmony export */   \"getStatisticMetadata\": () => (/* binding */ getStatisticMetadata),\n/* harmony export */   \"fetchStatistics\": () => (/* binding */ fetchStatistics),\n/* harmony export */   \"validateStatistics\": () => (/* binding */ validateStatistics),\n/* harmony export */   \"updateStatisticsMetadata\": () => (/* binding */ updateStatisticsMetadata),\n/* harmony export */   \"clearStatistics\": () => (/* binding */ clearStatistics),\n/* harmony export */   \"calculateStatisticSumGrowth\": () => (/* binding */ calculateStatisticSumGrowth),\n/* harmony export */   \"calculateStatisticsSumGrowth\": () => (/* binding */ calculateStatisticsSumGrowth),\n/* harmony export */   \"statisticsHaveType\": () => (/* binding */ statisticsHaveType),\n/* harmony export */   \"adjustStatisticsSum\": () => (/* binding */ adjustStatisticsSum),\n/* harmony export */   \"getStatisticLabel\": () => (/* binding */ getStatisticLabel)\n/* harmony export */ });\n/* harmony import */ var _common_entity_compute_domain__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common/entity/compute_domain */ \"./src/common/entity/compute_domain.ts\");\n/* harmony import */ var _common_entity_compute_state_display__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../common/entity/compute_state_display */ \"./src/common/entity/compute_state_display.ts\");\n/* harmony import */ var _common_entity_compute_state_name__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../common/entity/compute_state_name */ \"./src/common/entity/compute_state_name.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_common_entity_compute_state_display__WEBPACK_IMPORTED_MODULE_1__]);\n_common_entity_compute_state_display__WEBPACK_IMPORTED_MODULE_1__ = (__webpack_async_dependencies__.then ? await __webpack_async_dependencies__ : __webpack_async_dependencies__)[0];\n\n\n\nconst DOMAINS_USE_LAST_UPDATED = [\"climate\", \"humidifier\", \"water_heater\"];\nconst NEED_ATTRIBUTE_DOMAINS = [\"climate\", \"humidifier\", \"input_datetime\", \"thermostat\", \"water_heater\"];\nconst LINE_ATTRIBUTES_TO_KEEP = [\"temperature\", \"current_temperature\", \"target_temp_low\", \"target_temp_high\", \"hvac_action\", \"humidity\", \"mode\"];\nconst entityIdHistoryNeedsAttributes = (hass, entityId) => !hass.states[entityId] || NEED_ATTRIBUTE_DOMAINS.includes((0,_common_entity_compute_domain__WEBPACK_IMPORTED_MODULE_0__.computeDomain)(entityId));\nconst fetchRecent = (hass, entityId, startTime, endTime, skipInitialState = false, significantChangesOnly, minimalResponse = true, noAttributes) => {\n  let url = \"history/period\";\n\n  if (startTime) {\n    url += \"/\" + startTime.toISOString();\n  }\n\n  url += \"?filter_entity_id=\" + entityId;\n\n  if (endTime) {\n    url += \"&end_time=\" + endTime.toISOString();\n  }\n\n  if (skipInitialState) {\n    url += \"&skip_initial_state\";\n  }\n\n  if (significantChangesOnly !== undefined) {\n    url += `&significant_changes_only=${Number(significantChangesOnly)}`;\n  }\n\n  if (minimalResponse) {\n    url += \"&minimal_response\";\n  }\n\n  if (noAttributes) {\n    url += \"&no_attributes\";\n  }\n\n  return hass.callApi(\"GET\", url);\n};\nconst fetchRecentWS = (hass, entityId, startTime, endTime, skipInitialState = false, significantChangesOnly, minimalResponse = true, noAttributes) => hass.callWS({\n  type: \"history/history_during_period\",\n  start_time: startTime.toISOString(),\n  end_time: endTime.toISOString(),\n  significant_changes_only: significantChangesOnly || false,\n  include_start_time_state: !skipInitialState,\n  minimal_response: minimalResponse,\n  no_attributes: noAttributes || false,\n  entity_ids: entityId.split(\",\")\n});\nconst fetchDate = (hass, startTime, endTime, entityIds) => hass.callApi(\"GET\", `history/period/${startTime.toISOString()}?end_time=${endTime.toISOString()}&minimal_response${entityIds ? `&filter_entity_id=${entityIds.join(\",\")}` : ``}`);\nconst fetchDateWS = (hass, startTime, endTime, entityIds) => {\n  const params = {\n    type: \"history/history_during_period\",\n    start_time: startTime.toISOString(),\n    end_time: endTime.toISOString(),\n    minimal_response: true,\n    no_attributes: !entityIds.map(entityId => entityIdHistoryNeedsAttributes(hass, entityId)).reduce((cur, next) => cur || next, false)\n  };\n\n  if (entityIds.length !== 0) {\n    return hass.callWS({ ...params,\n      entity_ids: entityIds\n    });\n  }\n\n  return hass.callWS(params);\n};\n\nconst equalState = (obj1, obj2) => obj1.state === obj2.state && (!obj1.attributes || !obj2.attributes || LINE_ATTRIBUTES_TO_KEEP.every(attr => obj1.attributes[attr] === obj2.attributes[attr]));\n\nconst processTimelineEntity = (localize, language, entityId, states) => {\n  const data = [];\n  const first = states[0];\n\n  for (const state of states) {\n    if (data.length > 0 && state.s === data[data.length - 1].state) {\n      continue;\n    }\n\n    data.push({\n      state_localize: (0,_common_entity_compute_state_display__WEBPACK_IMPORTED_MODULE_1__.computeStateDisplayFromEntityAttributes)(localize, language, entityId, state.a || first.a, state.s),\n      state: state.s,\n      // lc (last_changed) may be omitted if its the same\n      // as lu (last_updated).\n      last_changed: (state.lc ? state.lc : state.lu) * 1000\n    });\n  }\n\n  return {\n    name: (0,_common_entity_compute_state_name__WEBPACK_IMPORTED_MODULE_2__.computeStateNameFromEntityAttributes)(entityId, states[0].a),\n    entity_id: entityId,\n    data\n  };\n};\n\nconst processLineChartEntities = (unit, entities) => {\n  const data = [];\n  Object.keys(entities).forEach(entityId => {\n    const states = entities[entityId];\n    const first = states[0];\n    const domain = (0,_common_entity_compute_domain__WEBPACK_IMPORTED_MODULE_0__.computeDomain)(entityId);\n    const processedStates = [];\n\n    for (const state of states) {\n      let processedState;\n\n      if (DOMAINS_USE_LAST_UPDATED.includes(domain)) {\n        processedState = {\n          state: state.s,\n          last_changed: state.lu * 1000,\n          attributes: {}\n        };\n\n        for (const attr of LINE_ATTRIBUTES_TO_KEEP) {\n          if (attr in state.a) {\n            processedState.attributes[attr] = state.a[attr];\n          }\n        }\n      } else {\n        processedState = {\n          state: state.s,\n          // lc (last_changed) may be omitted if its the same\n          // as lu (last_updated).\n          last_changed: (state.lc ? state.lc : state.lu) * 1000,\n          attributes: {}\n        };\n      }\n\n      if (processedStates.length > 1 && equalState(processedState, processedStates[processedStates.length - 1]) && equalState(processedState, processedStates[processedStates.length - 2])) {\n        continue;\n      }\n\n      processedStates.push(processedState);\n    }\n\n    data.push({\n      domain,\n      name: (0,_common_entity_compute_state_name__WEBPACK_IMPORTED_MODULE_2__.computeStateNameFromEntityAttributes)(entityId, first.a),\n      entity_id: entityId,\n      states: processedStates\n    });\n  });\n  return {\n    unit,\n    identifier: Object.keys(entities).join(\"\"),\n    data\n  };\n};\n\nconst stateUsesUnits = state => attributesHaveUnits(state.attributes);\n\nconst attributesHaveUnits = attributes => \"unit_of_measurement\" in attributes || \"state_class\" in attributes;\n\nconst computeHistory = (hass, stateHistory, localize) => {\n  const lineChartDevices = {};\n  const timelineDevices = [];\n\n  if (!stateHistory) {\n    return {\n      line: [],\n      timeline: []\n    };\n  }\n\n  Object.keys(stateHistory).forEach(entityId => {\n    const stateInfo = stateHistory[entityId];\n\n    if (stateInfo.length === 0) {\n      return;\n    }\n\n    const currentState = entityId in hass.states ? hass.states[entityId] : undefined;\n    const stateWithUnitorStateClass = !currentState && stateInfo.find(state => state.a && attributesHaveUnits(state.a));\n    let unit;\n\n    if (currentState && stateUsesUnits(currentState)) {\n      unit = currentState.attributes.unit_of_measurement || \" \";\n    } else if (stateWithUnitorStateClass) {\n      unit = stateWithUnitorStateClass.a.unit_of_measurement || \" \";\n    } else {\n      unit = {\n        climate: hass.config.unit_system.temperature,\n        counter: \"#\",\n        humidifier: \"%\",\n        input_number: \"#\",\n        number: \"#\",\n        water_heater: hass.config.unit_system.temperature\n      }[(0,_common_entity_compute_domain__WEBPACK_IMPORTED_MODULE_0__.computeDomain)(entityId)];\n    }\n\n    if (!unit) {\n      timelineDevices.push(processTimelineEntity(localize, hass.locale, entityId, stateInfo));\n    } else if (unit in lineChartDevices && entityId in lineChartDevices[unit]) {\n      lineChartDevices[unit][entityId].push(...stateInfo);\n    } else {\n      if (!(unit in lineChartDevices)) {\n        lineChartDevices[unit] = {};\n      }\n\n      lineChartDevices[unit][entityId] = stateInfo;\n    }\n  });\n  const unitStates = Object.keys(lineChartDevices).map(unit => processLineChartEntities(unit, lineChartDevices[unit]));\n  return {\n    line: unitStates,\n    timeline: timelineDevices\n  };\n}; // Statistics\n\nconst getStatisticIds = (hass, statistic_type) => hass.callWS({\n  type: \"history/list_statistic_ids\",\n  statistic_type\n});\nconst getStatisticMetadata = (hass, statistic_ids) => hass.callWS({\n  type: \"recorder/get_statistics_metadata\",\n  statistic_ids\n});\nconst fetchStatistics = (hass, startTime, endTime, statistic_ids, period = \"hour\") => hass.callWS({\n  type: \"history/statistics_during_period\",\n  start_time: startTime.toISOString(),\n  end_time: endTime === null || endTime === void 0 ? void 0 : endTime.toISOString(),\n  statistic_ids,\n  period\n});\nconst validateStatistics = hass => hass.callWS({\n  type: \"recorder/validate_statistics\"\n});\nconst updateStatisticsMetadata = (hass, statistic_id, unit_of_measurement) => hass.callWS({\n  type: \"recorder/update_statistics_metadata\",\n  statistic_id,\n  unit_of_measurement\n});\nconst clearStatistics = (hass, statistic_ids) => hass.callWS({\n  type: \"recorder/clear_statistics\",\n  statistic_ids\n});\nconst calculateStatisticSumGrowth = values => {\n  if (!values || values.length < 2) {\n    return null;\n  }\n\n  const endSum = values[values.length - 1].sum;\n\n  if (endSum === null) {\n    return null;\n  }\n\n  const startSum = values[0].sum;\n\n  if (startSum === null) {\n    return endSum;\n  }\n\n  return endSum - startSum;\n};\nconst calculateStatisticsSumGrowth = (data, stats) => {\n  let totalGrowth = null;\n\n  for (const stat of stats) {\n    if (!(stat in data)) {\n      continue;\n    }\n\n    const statGrowth = calculateStatisticSumGrowth(data[stat]);\n\n    if (statGrowth === null) {\n      continue;\n    }\n\n    if (totalGrowth === null) {\n      totalGrowth = statGrowth;\n    } else {\n      totalGrowth += statGrowth;\n    }\n  }\n\n  return totalGrowth;\n};\nconst statisticsHaveType = (stats, type) => stats.some(stat => stat[type] !== null);\nconst adjustStatisticsSum = (hass, statistic_id, start_time, adjustment) => hass.callWS({\n  type: \"recorder/adjust_sum_statistics\",\n  statistic_id,\n  start_time,\n  adjustment\n});\nconst getStatisticLabel = (hass, statisticsId, statisticsMetaData) => {\n  const entity = hass.states[statisticsId];\n\n  if (entity) {\n    return (0,_common_entity_compute_state_name__WEBPACK_IMPORTED_MODULE_2__.computeStateName)(entity);\n  }\n\n  const statisticMetaData = statisticsMetaData[statisticsId];\n  return (statisticMetaData === null || statisticMetaData === void 0 ? void 0 : statisticMetaData.name) || statisticsId;\n};\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/data/history.ts\n");

/***/ })

}]);