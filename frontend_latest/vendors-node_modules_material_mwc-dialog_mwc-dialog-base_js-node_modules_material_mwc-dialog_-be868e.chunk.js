/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkhome_assistant_frontend"] = self["webpackChunkhome_assistant_frontend"] || []).push([["vendors-node_modules_material_mwc-dialog_mwc-dialog-base_js-node_modules_material_mwc-dialog_-be868e"],{

/***/ "./node_modules/@material/animation/animationframe.js":
/*!************************************************************!*\
  !*** ./node_modules/@material/animation/animationframe.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"AnimationFrame\": () => (/* binding */ AnimationFrame)\n/* harmony export */ });\n/**\n * @license\n * Copyright 2020 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\n/**\n * AnimationFrame provides a user-friendly abstraction around requesting\n * and canceling animation frames.\n */\nvar AnimationFrame = function () {\n  function AnimationFrame() {\n    this.rafIDs = new Map();\n  }\n  /**\n   * Requests an animation frame. Cancels any existing frame with the same key.\n   * @param {string} key The key for this callback.\n   * @param {FrameRequestCallback} callback The callback to be executed.\n   */\n\n\n  AnimationFrame.prototype.request = function (key, callback) {\n    var _this = this;\n\n    this.cancel(key);\n    var frameID = requestAnimationFrame(function (frame) {\n      _this.rafIDs.delete(key); // Callback must come *after* the key is deleted so that nested calls to\n      // request with the same key are not deleted.\n\n\n      callback(frame);\n    });\n    this.rafIDs.set(key, frameID);\n  };\n  /**\n   * Cancels a queued callback with the given key.\n   * @param {string} key The key for this callback.\n   */\n\n\n  AnimationFrame.prototype.cancel = function (key) {\n    var rafID = this.rafIDs.get(key);\n\n    if (rafID) {\n      cancelAnimationFrame(rafID);\n      this.rafIDs.delete(key);\n    }\n  };\n  /**\n   * Cancels all queued callback.\n   */\n\n\n  AnimationFrame.prototype.cancelAll = function () {\n    var _this = this; // Need to use forEach because it's the only iteration method supported\n    // by IE11. Suppress the underscore because we don't need it.\n    // tslint:disable-next-line:enforce-name-casing\n\n\n    this.rafIDs.forEach(function (_, key) {\n      _this.cancel(key);\n    });\n  };\n  /**\n   * Returns the queue of unexecuted callback keys.\n   */\n\n\n  AnimationFrame.prototype.getQueue = function () {\n    var queue = []; // Need to use forEach because it's the only iteration method supported\n    // by IE11. Suppress the underscore because we don't need it.\n    // tslint:disable-next-line:enforce-name-casing\n\n    this.rafIDs.forEach(function (_, key) {\n      queue.push(key);\n    });\n    return queue;\n  };\n\n  return AnimationFrame;\n}();\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsL2FuaW1hdGlvbi9hbmltYXRpb25mcmFtZS5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXFCQTs7QUFFQTs7O0FBR0E7QUFDQTtBQUFBO0FBQ0E7QUF1REE7QUFyREE7Ozs7QUFJQTs7O0FBQ0E7QUFBQTs7QUFDQTtBQUNBO0FBQ0E7QUFFQTs7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTs7O0FBR0E7OztBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBOztBQUVBOzs7QUFDQTtBQUFBO0FBRUE7QUFDQTs7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTs7QUFFQTs7O0FBQ0E7QUFDQTtBQUVBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUFBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaG9tZS1hc3Npc3RhbnQtZnJvbnRlbmQvYW5pbWF0aW9uZnJhbWUudHM/YmM3NCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgSW5jLlxuICpcbiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbiAqIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbiAqIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbiAqIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbiAqIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuICogZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbiAqXG4gKiBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuICogYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4gKlxuICogVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuICogSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4gKiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbiAqIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbiAqIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4gKiBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4gKiBUSEUgU09GVFdBUkUuXG4gKi9cbi8qKlxuICogQW5pbWF0aW9uRnJhbWUgcHJvdmlkZXMgYSB1c2VyLWZyaWVuZGx5IGFic3RyYWN0aW9uIGFyb3VuZCByZXF1ZXN0aW5nXG4gKiBhbmQgY2FuY2VsaW5nIGFuaW1hdGlvbiBmcmFtZXMuXG4gKi9cbnZhciBBbmltYXRpb25GcmFtZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBBbmltYXRpb25GcmFtZSgpIHtcbiAgICAgICAgdGhpcy5yYWZJRHMgPSBuZXcgTWFwKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJlcXVlc3RzIGFuIGFuaW1hdGlvbiBmcmFtZS4gQ2FuY2VscyBhbnkgZXhpc3RpbmcgZnJhbWUgd2l0aCB0aGUgc2FtZSBrZXkuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IGZvciB0aGlzIGNhbGxiYWNrLlxuICAgICAqIEBwYXJhbSB7RnJhbWVSZXF1ZXN0Q2FsbGJhY2t9IGNhbGxiYWNrIFRoZSBjYWxsYmFjayB0byBiZSBleGVjdXRlZC5cbiAgICAgKi9cbiAgICBBbmltYXRpb25GcmFtZS5wcm90b3R5cGUucmVxdWVzdCA9IGZ1bmN0aW9uIChrZXksIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHRoaXMuY2FuY2VsKGtleSk7XG4gICAgICAgIHZhciBmcmFtZUlEID0gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZ1bmN0aW9uIChmcmFtZSkge1xuICAgICAgICAgICAgX3RoaXMucmFmSURzLmRlbGV0ZShrZXkpO1xuICAgICAgICAgICAgLy8gQ2FsbGJhY2sgbXVzdCBjb21lICphZnRlciogdGhlIGtleSBpcyBkZWxldGVkIHNvIHRoYXQgbmVzdGVkIGNhbGxzIHRvXG4gICAgICAgICAgICAvLyByZXF1ZXN0IHdpdGggdGhlIHNhbWUga2V5IGFyZSBub3QgZGVsZXRlZC5cbiAgICAgICAgICAgIGNhbGxiYWNrKGZyYW1lKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMucmFmSURzLnNldChrZXksIGZyYW1lSUQpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQ2FuY2VscyBhIHF1ZXVlZCBjYWxsYmFjayB3aXRoIHRoZSBnaXZlbiBrZXkuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IGZvciB0aGlzIGNhbGxiYWNrLlxuICAgICAqL1xuICAgIEFuaW1hdGlvbkZyYW1lLnByb3RvdHlwZS5jYW5jZWwgPSBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIHZhciByYWZJRCA9IHRoaXMucmFmSURzLmdldChrZXkpO1xuICAgICAgICBpZiAocmFmSUQpIHtcbiAgICAgICAgICAgIGNhbmNlbEFuaW1hdGlvbkZyYW1lKHJhZklEKTtcbiAgICAgICAgICAgIHRoaXMucmFmSURzLmRlbGV0ZShrZXkpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBDYW5jZWxzIGFsbCBxdWV1ZWQgY2FsbGJhY2suXG4gICAgICovXG4gICAgQW5pbWF0aW9uRnJhbWUucHJvdG90eXBlLmNhbmNlbEFsbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgLy8gTmVlZCB0byB1c2UgZm9yRWFjaCBiZWNhdXNlIGl0J3MgdGhlIG9ubHkgaXRlcmF0aW9uIG1ldGhvZCBzdXBwb3J0ZWRcbiAgICAgICAgLy8gYnkgSUUxMS4gU3VwcHJlc3MgdGhlIHVuZGVyc2NvcmUgYmVjYXVzZSB3ZSBkb24ndCBuZWVkIGl0LlxuICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6ZW5mb3JjZS1uYW1lLWNhc2luZ1xuICAgICAgICB0aGlzLnJhZklEcy5mb3JFYWNoKGZ1bmN0aW9uIChfLCBrZXkpIHtcbiAgICAgICAgICAgIF90aGlzLmNhbmNlbChrZXkpO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIHF1ZXVlIG9mIHVuZXhlY3V0ZWQgY2FsbGJhY2sga2V5cy5cbiAgICAgKi9cbiAgICBBbmltYXRpb25GcmFtZS5wcm90b3R5cGUuZ2V0UXVldWUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBxdWV1ZSA9IFtdO1xuICAgICAgICAvLyBOZWVkIHRvIHVzZSBmb3JFYWNoIGJlY2F1c2UgaXQncyB0aGUgb25seSBpdGVyYXRpb24gbWV0aG9kIHN1cHBvcnRlZFxuICAgICAgICAvLyBieSBJRTExLiBTdXBwcmVzcyB0aGUgdW5kZXJzY29yZSBiZWNhdXNlIHdlIGRvbid0IG5lZWQgaXQuXG4gICAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTplbmZvcmNlLW5hbWUtY2FzaW5nXG4gICAgICAgIHRoaXMucmFmSURzLmZvckVhY2goZnVuY3Rpb24gKF8sIGtleSkge1xuICAgICAgICAgICAgcXVldWUucHVzaChrZXkpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHF1ZXVlO1xuICAgIH07XG4gICAgcmV0dXJuIEFuaW1hdGlvbkZyYW1lO1xufSgpKTtcbmV4cG9ydCB7IEFuaW1hdGlvbkZyYW1lIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hbmltYXRpb25mcmFtZS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@material/animation/animationframe.js\n");

/***/ }),

/***/ "./node_modules/@material/dialog/constants.js":
/*!****************************************************!*\
  !*** ./node_modules/@material/dialog/constants.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cssClasses\": () => (/* binding */ cssClasses),\n/* harmony export */   \"strings\": () => (/* binding */ strings),\n/* harmony export */   \"numbers\": () => (/* binding */ numbers)\n/* harmony export */ });\n/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nvar cssClasses = {\n  CLOSING: 'mdc-dialog--closing',\n  OPEN: 'mdc-dialog--open',\n  OPENING: 'mdc-dialog--opening',\n  SCROLLABLE: 'mdc-dialog--scrollable',\n  SCROLL_LOCK: 'mdc-dialog-scroll-lock',\n  STACKED: 'mdc-dialog--stacked',\n  FULLSCREEN: 'mdc-dialog--fullscreen',\n  // Class for showing a scroll divider on full-screen dialog header element.\n  // Should only be displayed on scrollable content, when the dialog content is\n  // scrolled \"underneath\" the header.\n  SCROLL_DIVIDER_HEADER: 'mdc-dialog-scroll-divider-header',\n  // Class for showing a scroll divider on a full-screen dialog footer element.\n  // Should only be displayed on scrolalble content, when the dialog content is\n  // obscured \"underneath\" the footer.\n  SCROLL_DIVIDER_FOOTER: 'mdc-dialog-scroll-divider-footer',\n  // The \"surface scrim\" is a scrim covering only the surface of a dialog. This\n  // is used in situations where a confirmation dialog is shown over an already\n  // opened full-screen dialog. On larger screen-sizes, the full-screen dialog\n  // is sized as a modal and so in these situations we display a \"surface scrim\"\n  // to prevent a \"double scrim\" (where the scrim from the secondary\n  // confirmation dialog would overlap with the scrim from the full-screen\n  // dialog).\n  SURFACE_SCRIM_SHOWN: 'mdc-dialog__surface-scrim--shown',\n  // \"Showing\" animating class for the surface-scrim.\n  SURFACE_SCRIM_SHOWING: 'mdc-dialog__surface-scrim--showing',\n  // \"Hiding\" animating class for the surface-scrim.\n  SURFACE_SCRIM_HIDING: 'mdc-dialog__surface-scrim--hiding',\n  // Class to hide a dialog's scrim (used in conjunction with a surface-scrim).\n  // Note that we only hide the original scrim rather than removing it entirely\n  // to prevent interactions with the content behind this scrim, and to capture\n  // scrim clicks.\n  SCRIM_HIDDEN: 'mdc-dialog__scrim--hidden'\n};\nvar strings = {\n  ACTION_ATTRIBUTE: 'data-mdc-dialog-action',\n  BUTTON_DEFAULT_ATTRIBUTE: 'data-mdc-dialog-button-default',\n  BUTTON_SELECTOR: '.mdc-dialog__button',\n  CLOSED_EVENT: 'MDCDialog:closed',\n  CLOSE_ACTION: 'close',\n  CLOSING_EVENT: 'MDCDialog:closing',\n  CONTAINER_SELECTOR: '.mdc-dialog__container',\n  CONTENT_SELECTOR: '.mdc-dialog__content',\n  DESTROY_ACTION: 'destroy',\n  INITIAL_FOCUS_ATTRIBUTE: 'data-mdc-dialog-initial-focus',\n  OPENED_EVENT: 'MDCDialog:opened',\n  OPENING_EVENT: 'MDCDialog:opening',\n  SCRIM_SELECTOR: '.mdc-dialog__scrim',\n  SUPPRESS_DEFAULT_PRESS_SELECTOR: ['textarea', '.mdc-menu .mdc-list-item', '.mdc-menu .mdc-deprecated-list-item'].join(', '),\n  SURFACE_SELECTOR: '.mdc-dialog__surface'\n};\nvar numbers = {\n  DIALOG_ANIMATION_CLOSE_TIME_MS: 75,\n  DIALOG_ANIMATION_OPEN_TIME_MS: 150\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsL2RpYWxvZy9jb25zdGFudHMuanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXFCQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQWhDQTtBQW1DQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFLQTtBQW5CQTtBQXNCQTtBQUNBO0FBQ0E7QUFGQSIsInNvdXJjZXMiOlsid2VicGFjazovL2hvbWUtYXNzaXN0YW50LWZyb250ZW5kL2NvbnN0YW50cy50cz85YmJmIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE2IEdvb2dsZSBJbmMuXG4gKlxuICogUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuICogb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuICogaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuICogdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuICogY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG4gKiBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuICpcbiAqIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXG4gKiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbiAqXG4gKiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4gKiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbiAqIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuICogQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuICogTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbiAqIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cbiAqIFRIRSBTT0ZUV0FSRS5cbiAqL1xuZXhwb3J0IHZhciBjc3NDbGFzc2VzID0ge1xuICAgIENMT1NJTkc6ICdtZGMtZGlhbG9nLS1jbG9zaW5nJyxcbiAgICBPUEVOOiAnbWRjLWRpYWxvZy0tb3BlbicsXG4gICAgT1BFTklORzogJ21kYy1kaWFsb2ctLW9wZW5pbmcnLFxuICAgIFNDUk9MTEFCTEU6ICdtZGMtZGlhbG9nLS1zY3JvbGxhYmxlJyxcbiAgICBTQ1JPTExfTE9DSzogJ21kYy1kaWFsb2ctc2Nyb2xsLWxvY2snLFxuICAgIFNUQUNLRUQ6ICdtZGMtZGlhbG9nLS1zdGFja2VkJyxcbiAgICBGVUxMU0NSRUVOOiAnbWRjLWRpYWxvZy0tZnVsbHNjcmVlbicsXG4gICAgLy8gQ2xhc3MgZm9yIHNob3dpbmcgYSBzY3JvbGwgZGl2aWRlciBvbiBmdWxsLXNjcmVlbiBkaWFsb2cgaGVhZGVyIGVsZW1lbnQuXG4gICAgLy8gU2hvdWxkIG9ubHkgYmUgZGlzcGxheWVkIG9uIHNjcm9sbGFibGUgY29udGVudCwgd2hlbiB0aGUgZGlhbG9nIGNvbnRlbnQgaXNcbiAgICAvLyBzY3JvbGxlZCBcInVuZGVybmVhdGhcIiB0aGUgaGVhZGVyLlxuICAgIFNDUk9MTF9ESVZJREVSX0hFQURFUjogJ21kYy1kaWFsb2ctc2Nyb2xsLWRpdmlkZXItaGVhZGVyJyxcbiAgICAvLyBDbGFzcyBmb3Igc2hvd2luZyBhIHNjcm9sbCBkaXZpZGVyIG9uIGEgZnVsbC1zY3JlZW4gZGlhbG9nIGZvb3RlciBlbGVtZW50LlxuICAgIC8vIFNob3VsZCBvbmx5IGJlIGRpc3BsYXllZCBvbiBzY3JvbGFsYmxlIGNvbnRlbnQsIHdoZW4gdGhlIGRpYWxvZyBjb250ZW50IGlzXG4gICAgLy8gb2JzY3VyZWQgXCJ1bmRlcm5lYXRoXCIgdGhlIGZvb3Rlci5cbiAgICBTQ1JPTExfRElWSURFUl9GT09URVI6ICdtZGMtZGlhbG9nLXNjcm9sbC1kaXZpZGVyLWZvb3RlcicsXG4gICAgLy8gVGhlIFwic3VyZmFjZSBzY3JpbVwiIGlzIGEgc2NyaW0gY292ZXJpbmcgb25seSB0aGUgc3VyZmFjZSBvZiBhIGRpYWxvZy4gVGhpc1xuICAgIC8vIGlzIHVzZWQgaW4gc2l0dWF0aW9ucyB3aGVyZSBhIGNvbmZpcm1hdGlvbiBkaWFsb2cgaXMgc2hvd24gb3ZlciBhbiBhbHJlYWR5XG4gICAgLy8gb3BlbmVkIGZ1bGwtc2NyZWVuIGRpYWxvZy4gT24gbGFyZ2VyIHNjcmVlbi1zaXplcywgdGhlIGZ1bGwtc2NyZWVuIGRpYWxvZ1xuICAgIC8vIGlzIHNpemVkIGFzIGEgbW9kYWwgYW5kIHNvIGluIHRoZXNlIHNpdHVhdGlvbnMgd2UgZGlzcGxheSBhIFwic3VyZmFjZSBzY3JpbVwiXG4gICAgLy8gdG8gcHJldmVudCBhIFwiZG91YmxlIHNjcmltXCIgKHdoZXJlIHRoZSBzY3JpbSBmcm9tIHRoZSBzZWNvbmRhcnlcbiAgICAvLyBjb25maXJtYXRpb24gZGlhbG9nIHdvdWxkIG92ZXJsYXAgd2l0aCB0aGUgc2NyaW0gZnJvbSB0aGUgZnVsbC1zY3JlZW5cbiAgICAvLyBkaWFsb2cpLlxuICAgIFNVUkZBQ0VfU0NSSU1fU0hPV046ICdtZGMtZGlhbG9nX19zdXJmYWNlLXNjcmltLS1zaG93bicsXG4gICAgLy8gXCJTaG93aW5nXCIgYW5pbWF0aW5nIGNsYXNzIGZvciB0aGUgc3VyZmFjZS1zY3JpbS5cbiAgICBTVVJGQUNFX1NDUklNX1NIT1dJTkc6ICdtZGMtZGlhbG9nX19zdXJmYWNlLXNjcmltLS1zaG93aW5nJyxcbiAgICAvLyBcIkhpZGluZ1wiIGFuaW1hdGluZyBjbGFzcyBmb3IgdGhlIHN1cmZhY2Utc2NyaW0uXG4gICAgU1VSRkFDRV9TQ1JJTV9ISURJTkc6ICdtZGMtZGlhbG9nX19zdXJmYWNlLXNjcmltLS1oaWRpbmcnLFxuICAgIC8vIENsYXNzIHRvIGhpZGUgYSBkaWFsb2cncyBzY3JpbSAodXNlZCBpbiBjb25qdW5jdGlvbiB3aXRoIGEgc3VyZmFjZS1zY3JpbSkuXG4gICAgLy8gTm90ZSB0aGF0IHdlIG9ubHkgaGlkZSB0aGUgb3JpZ2luYWwgc2NyaW0gcmF0aGVyIHRoYW4gcmVtb3ZpbmcgaXQgZW50aXJlbHlcbiAgICAvLyB0byBwcmV2ZW50IGludGVyYWN0aW9ucyB3aXRoIHRoZSBjb250ZW50IGJlaGluZCB0aGlzIHNjcmltLCBhbmQgdG8gY2FwdHVyZVxuICAgIC8vIHNjcmltIGNsaWNrcy5cbiAgICBTQ1JJTV9ISURERU46ICdtZGMtZGlhbG9nX19zY3JpbS0taGlkZGVuJyxcbn07XG5leHBvcnQgdmFyIHN0cmluZ3MgPSB7XG4gICAgQUNUSU9OX0FUVFJJQlVURTogJ2RhdGEtbWRjLWRpYWxvZy1hY3Rpb24nLFxuICAgIEJVVFRPTl9ERUZBVUxUX0FUVFJJQlVURTogJ2RhdGEtbWRjLWRpYWxvZy1idXR0b24tZGVmYXVsdCcsXG4gICAgQlVUVE9OX1NFTEVDVE9SOiAnLm1kYy1kaWFsb2dfX2J1dHRvbicsXG4gICAgQ0xPU0VEX0VWRU5UOiAnTURDRGlhbG9nOmNsb3NlZCcsXG4gICAgQ0xPU0VfQUNUSU9OOiAnY2xvc2UnLFxuICAgIENMT1NJTkdfRVZFTlQ6ICdNRENEaWFsb2c6Y2xvc2luZycsXG4gICAgQ09OVEFJTkVSX1NFTEVDVE9SOiAnLm1kYy1kaWFsb2dfX2NvbnRhaW5lcicsXG4gICAgQ09OVEVOVF9TRUxFQ1RPUjogJy5tZGMtZGlhbG9nX19jb250ZW50JyxcbiAgICBERVNUUk9ZX0FDVElPTjogJ2Rlc3Ryb3knLFxuICAgIElOSVRJQUxfRk9DVVNfQVRUUklCVVRFOiAnZGF0YS1tZGMtZGlhbG9nLWluaXRpYWwtZm9jdXMnLFxuICAgIE9QRU5FRF9FVkVOVDogJ01EQ0RpYWxvZzpvcGVuZWQnLFxuICAgIE9QRU5JTkdfRVZFTlQ6ICdNRENEaWFsb2c6b3BlbmluZycsXG4gICAgU0NSSU1fU0VMRUNUT1I6ICcubWRjLWRpYWxvZ19fc2NyaW0nLFxuICAgIFNVUFBSRVNTX0RFRkFVTFRfUFJFU1NfU0VMRUNUT1I6IFtcbiAgICAgICAgJ3RleHRhcmVhJyxcbiAgICAgICAgJy5tZGMtbWVudSAubWRjLWxpc3QtaXRlbScsXG4gICAgICAgICcubWRjLW1lbnUgLm1kYy1kZXByZWNhdGVkLWxpc3QtaXRlbScsXG4gICAgXS5qb2luKCcsICcpLFxuICAgIFNVUkZBQ0VfU0VMRUNUT1I6ICcubWRjLWRpYWxvZ19fc3VyZmFjZScsXG59O1xuZXhwb3J0IHZhciBudW1iZXJzID0ge1xuICAgIERJQUxPR19BTklNQVRJT05fQ0xPU0VfVElNRV9NUzogNzUsXG4gICAgRElBTE9HX0FOSU1BVElPTl9PUEVOX1RJTUVfTVM6IDE1MCxcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb25zdGFudHMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@material/dialog/constants.js\n");

/***/ }),

/***/ "./node_modules/@material/dialog/foundation.js":
/*!*****************************************************!*\
  !*** ./node_modules/@material/dialog/foundation.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"MDCDialogFoundation\": () => (/* binding */ MDCDialogFoundation),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.es6.js\");\n/* harmony import */ var _material_animation_animationframe__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @material/animation/animationframe */ \"./node_modules/@material/animation/animationframe.js\");\n/* harmony import */ var _material_base_foundation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @material/base/foundation */ \"./node_modules/@material/base/foundation.js\");\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./constants */ \"./node_modules/@material/dialog/constants.js\");\n/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\n\n\n\nvar AnimationKeys;\n\n(function (AnimationKeys) {\n  AnimationKeys[\"POLL_SCROLL_POS\"] = \"poll_scroll_position\";\n  AnimationKeys[\"POLL_LAYOUT_CHANGE\"] = \"poll_layout_change\";\n})(AnimationKeys || (AnimationKeys = {}));\n\nvar MDCDialogFoundation = function (_super) {\n  (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(MDCDialogFoundation, _super);\n\n  function MDCDialogFoundation(adapter) {\n    var _this = _super.call(this, (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, MDCDialogFoundation.defaultAdapter), adapter)) || this;\n\n    _this.dialogOpen = false;\n    _this.isFullscreen = false;\n    _this.animationFrame = 0;\n    _this.animationTimer = 0;\n    _this.escapeKeyAction = _constants__WEBPACK_IMPORTED_MODULE_1__.strings.CLOSE_ACTION;\n    _this.scrimClickAction = _constants__WEBPACK_IMPORTED_MODULE_1__.strings.CLOSE_ACTION;\n    _this.autoStackButtons = true;\n    _this.areButtonsStacked = false;\n    _this.suppressDefaultPressSelector = _constants__WEBPACK_IMPORTED_MODULE_1__.strings.SUPPRESS_DEFAULT_PRESS_SELECTOR;\n    _this.animFrame = new _material_animation_animationframe__WEBPACK_IMPORTED_MODULE_2__.AnimationFrame();\n\n    _this.contentScrollHandler = function () {\n      _this.handleScrollEvent();\n    };\n\n    _this.windowResizeHandler = function () {\n      _this.layout();\n    };\n\n    _this.windowOrientationChangeHandler = function () {\n      _this.layout();\n    };\n\n    return _this;\n  }\n\n  Object.defineProperty(MDCDialogFoundation, \"cssClasses\", {\n    get: function () {\n      return _constants__WEBPACK_IMPORTED_MODULE_1__.cssClasses;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(MDCDialogFoundation, \"strings\", {\n    get: function () {\n      return _constants__WEBPACK_IMPORTED_MODULE_1__.strings;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(MDCDialogFoundation, \"numbers\", {\n    get: function () {\n      return _constants__WEBPACK_IMPORTED_MODULE_1__.numbers;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(MDCDialogFoundation, \"defaultAdapter\", {\n    get: function () {\n      return {\n        addBodyClass: function () {\n          return undefined;\n        },\n        addClass: function () {\n          return undefined;\n        },\n        areButtonsStacked: function () {\n          return false;\n        },\n        clickDefaultButton: function () {\n          return undefined;\n        },\n        eventTargetMatches: function () {\n          return false;\n        },\n        getActionFromEvent: function () {\n          return '';\n        },\n        getInitialFocusEl: function () {\n          return null;\n        },\n        hasClass: function () {\n          return false;\n        },\n        isContentScrollable: function () {\n          return false;\n        },\n        notifyClosed: function () {\n          return undefined;\n        },\n        notifyClosing: function () {\n          return undefined;\n        },\n        notifyOpened: function () {\n          return undefined;\n        },\n        notifyOpening: function () {\n          return undefined;\n        },\n        releaseFocus: function () {\n          return undefined;\n        },\n        removeBodyClass: function () {\n          return undefined;\n        },\n        removeClass: function () {\n          return undefined;\n        },\n        reverseButtons: function () {\n          return undefined;\n        },\n        trapFocus: function () {\n          return undefined;\n        },\n        registerContentEventHandler: function () {\n          return undefined;\n        },\n        deregisterContentEventHandler: function () {\n          return undefined;\n        },\n        isScrollableContentAtTop: function () {\n          return false;\n        },\n        isScrollableContentAtBottom: function () {\n          return false;\n        },\n        registerWindowEventHandler: function () {\n          return undefined;\n        },\n        deregisterWindowEventHandler: function () {\n          return undefined;\n        }\n      };\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  MDCDialogFoundation.prototype.init = function () {\n    if (this.adapter.hasClass(_constants__WEBPACK_IMPORTED_MODULE_1__.cssClasses.STACKED)) {\n      this.setAutoStackButtons(false);\n    }\n\n    this.isFullscreen = this.adapter.hasClass(_constants__WEBPACK_IMPORTED_MODULE_1__.cssClasses.FULLSCREEN);\n  };\n\n  MDCDialogFoundation.prototype.destroy = function () {\n    if (this.animationTimer) {\n      clearTimeout(this.animationTimer);\n      this.handleAnimationTimerEnd();\n    }\n\n    if (this.isFullscreen) {\n      this.adapter.deregisterContentEventHandler('scroll', this.contentScrollHandler);\n    }\n\n    this.animFrame.cancelAll();\n    this.adapter.deregisterWindowEventHandler('resize', this.windowResizeHandler);\n    this.adapter.deregisterWindowEventHandler('orientationchange', this.windowOrientationChangeHandler);\n  };\n\n  MDCDialogFoundation.prototype.open = function (dialogOptions) {\n    var _this = this;\n\n    this.dialogOpen = true;\n    this.adapter.notifyOpening();\n    this.adapter.addClass(_constants__WEBPACK_IMPORTED_MODULE_1__.cssClasses.OPENING);\n\n    if (this.isFullscreen) {\n      // A scroll event listener is registered even if the dialog is not\n      // scrollable on open, since the window resize event, or orientation\n      // change may make the dialog scrollable after it is opened.\n      this.adapter.registerContentEventHandler('scroll', this.contentScrollHandler);\n    }\n\n    if (dialogOptions && dialogOptions.isAboveFullscreenDialog) {\n      this.adapter.addClass(_constants__WEBPACK_IMPORTED_MODULE_1__.cssClasses.SCRIM_HIDDEN);\n    }\n\n    this.adapter.registerWindowEventHandler('resize', this.windowResizeHandler);\n    this.adapter.registerWindowEventHandler('orientationchange', this.windowOrientationChangeHandler); // Wait a frame once display is no longer \"none\", to establish basis for\n    // animation\n\n    this.runNextAnimationFrame(function () {\n      _this.adapter.addClass(_constants__WEBPACK_IMPORTED_MODULE_1__.cssClasses.OPEN);\n\n      _this.adapter.addBodyClass(_constants__WEBPACK_IMPORTED_MODULE_1__.cssClasses.SCROLL_LOCK);\n\n      _this.layout();\n\n      _this.animationTimer = setTimeout(function () {\n        _this.handleAnimationTimerEnd();\n\n        _this.adapter.trapFocus(_this.adapter.getInitialFocusEl());\n\n        _this.adapter.notifyOpened();\n      }, _constants__WEBPACK_IMPORTED_MODULE_1__.numbers.DIALOG_ANIMATION_OPEN_TIME_MS);\n    });\n  };\n\n  MDCDialogFoundation.prototype.close = function (action) {\n    var _this = this;\n\n    if (action === void 0) {\n      action = '';\n    }\n\n    if (!this.dialogOpen) {\n      // Avoid redundant close calls (and events), e.g. from keydown on elements\n      // that inherently emit click\n      return;\n    }\n\n    this.dialogOpen = false;\n    this.adapter.notifyClosing(action);\n    this.adapter.addClass(_constants__WEBPACK_IMPORTED_MODULE_1__.cssClasses.CLOSING);\n    this.adapter.removeClass(_constants__WEBPACK_IMPORTED_MODULE_1__.cssClasses.OPEN);\n    this.adapter.removeBodyClass(_constants__WEBPACK_IMPORTED_MODULE_1__.cssClasses.SCROLL_LOCK);\n\n    if (this.isFullscreen) {\n      this.adapter.deregisterContentEventHandler('scroll', this.contentScrollHandler);\n    }\n\n    this.adapter.deregisterWindowEventHandler('resize', this.windowResizeHandler);\n    this.adapter.deregisterWindowEventHandler('orientationchange', this.windowOrientationChangeHandler);\n    cancelAnimationFrame(this.animationFrame);\n    this.animationFrame = 0;\n    clearTimeout(this.animationTimer);\n    this.animationTimer = setTimeout(function () {\n      _this.adapter.releaseFocus();\n\n      _this.handleAnimationTimerEnd();\n\n      _this.adapter.notifyClosed(action);\n    }, _constants__WEBPACK_IMPORTED_MODULE_1__.numbers.DIALOG_ANIMATION_CLOSE_TIME_MS);\n  };\n  /**\n   * Used only in instances of showing a secondary dialog over a full-screen\n   * dialog. Shows the \"surface scrim\" displayed over the full-screen dialog.\n   */\n\n\n  MDCDialogFoundation.prototype.showSurfaceScrim = function () {\n    var _this = this;\n\n    this.adapter.addClass(_constants__WEBPACK_IMPORTED_MODULE_1__.cssClasses.SURFACE_SCRIM_SHOWING);\n    this.runNextAnimationFrame(function () {\n      _this.adapter.addClass(_constants__WEBPACK_IMPORTED_MODULE_1__.cssClasses.SURFACE_SCRIM_SHOWN);\n    });\n  };\n  /**\n   * Used only in instances of showing a secondary dialog over a full-screen\n   * dialog. Hides the \"surface scrim\" displayed over the full-screen dialog.\n   */\n\n\n  MDCDialogFoundation.prototype.hideSurfaceScrim = function () {\n    this.adapter.removeClass(_constants__WEBPACK_IMPORTED_MODULE_1__.cssClasses.SURFACE_SCRIM_SHOWN);\n    this.adapter.addClass(_constants__WEBPACK_IMPORTED_MODULE_1__.cssClasses.SURFACE_SCRIM_HIDING);\n  };\n  /**\n   * Handles `transitionend` event triggered when surface scrim animation is\n   * finished.\n   */\n\n\n  MDCDialogFoundation.prototype.handleSurfaceScrimTransitionEnd = function () {\n    this.adapter.removeClass(_constants__WEBPACK_IMPORTED_MODULE_1__.cssClasses.SURFACE_SCRIM_HIDING);\n    this.adapter.removeClass(_constants__WEBPACK_IMPORTED_MODULE_1__.cssClasses.SURFACE_SCRIM_SHOWING);\n  };\n\n  MDCDialogFoundation.prototype.isOpen = function () {\n    return this.dialogOpen;\n  };\n\n  MDCDialogFoundation.prototype.getEscapeKeyAction = function () {\n    return this.escapeKeyAction;\n  };\n\n  MDCDialogFoundation.prototype.setEscapeKeyAction = function (action) {\n    this.escapeKeyAction = action;\n  };\n\n  MDCDialogFoundation.prototype.getScrimClickAction = function () {\n    return this.scrimClickAction;\n  };\n\n  MDCDialogFoundation.prototype.setScrimClickAction = function (action) {\n    this.scrimClickAction = action;\n  };\n\n  MDCDialogFoundation.prototype.getAutoStackButtons = function () {\n    return this.autoStackButtons;\n  };\n\n  MDCDialogFoundation.prototype.setAutoStackButtons = function (autoStack) {\n    this.autoStackButtons = autoStack;\n  };\n\n  MDCDialogFoundation.prototype.getSuppressDefaultPressSelector = function () {\n    return this.suppressDefaultPressSelector;\n  };\n\n  MDCDialogFoundation.prototype.setSuppressDefaultPressSelector = function (selector) {\n    this.suppressDefaultPressSelector = selector;\n  };\n\n  MDCDialogFoundation.prototype.layout = function () {\n    var _this = this;\n\n    this.animFrame.request(AnimationKeys.POLL_LAYOUT_CHANGE, function () {\n      _this.layoutInternal();\n    });\n  };\n  /** Handles click on the dialog root element. */\n\n\n  MDCDialogFoundation.prototype.handleClick = function (evt) {\n    var isScrim = this.adapter.eventTargetMatches(evt.target, _constants__WEBPACK_IMPORTED_MODULE_1__.strings.SCRIM_SELECTOR); // Check for scrim click first since it doesn't require querying ancestors.\n\n    if (isScrim && this.scrimClickAction !== '') {\n      this.close(this.scrimClickAction);\n    } else {\n      var action = this.adapter.getActionFromEvent(evt);\n\n      if (action) {\n        this.close(action);\n      }\n    }\n  };\n  /** Handles keydown on the dialog root element. */\n\n\n  MDCDialogFoundation.prototype.handleKeydown = function (evt) {\n    var isEnter = evt.key === 'Enter' || evt.keyCode === 13;\n\n    if (!isEnter) {\n      return;\n    }\n\n    var action = this.adapter.getActionFromEvent(evt);\n\n    if (action) {\n      // Action button callback is handled in `handleClick`,\n      // since space/enter keydowns on buttons trigger click events.\n      return;\n    } // `composedPath` is used here, when available, to account for use cases\n    // where a target meant to suppress the default press behaviour\n    // may exist in a shadow root.\n    // For example, a textarea inside a web component:\n    // <mwc-dialog>\n    //   <horizontal-layout>\n    //     #shadow-root (open)\n    //       <mwc-textarea>\n    //         #shadow-root (open)\n    //           <textarea></textarea>\n    //       </mwc-textarea>\n    //   </horizontal-layout>\n    // </mwc-dialog>\n\n\n    var target = evt.composedPath ? evt.composedPath()[0] : evt.target;\n    var isDefault = this.suppressDefaultPressSelector ? !this.adapter.eventTargetMatches(target, this.suppressDefaultPressSelector) : true;\n\n    if (isEnter && isDefault) {\n      this.adapter.clickDefaultButton();\n    }\n  };\n  /** Handles keydown on the document. */\n\n\n  MDCDialogFoundation.prototype.handleDocumentKeydown = function (evt) {\n    var isEscape = evt.key === 'Escape' || evt.keyCode === 27;\n\n    if (isEscape && this.escapeKeyAction !== '') {\n      this.close(this.escapeKeyAction);\n    }\n  };\n  /**\n   * Handles scroll event on the dialog's content element -- showing a scroll\n   * divider on the header or footer based on the scroll position. This handler\n   * should only be registered on full-screen dialogs with scrollable content.\n   */\n\n\n  MDCDialogFoundation.prototype.handleScrollEvent = function () {\n    var _this = this; // Since scroll events can fire at a high rate, we throttle these events by\n    // using requestAnimationFrame.\n\n\n    this.animFrame.request(AnimationKeys.POLL_SCROLL_POS, function () {\n      _this.toggleScrollDividerHeader();\n\n      _this.toggleScrollDividerFooter();\n    });\n  };\n\n  MDCDialogFoundation.prototype.layoutInternal = function () {\n    if (this.autoStackButtons) {\n      this.detectStackedButtons();\n    }\n\n    this.toggleScrollableClasses();\n  };\n\n  MDCDialogFoundation.prototype.handleAnimationTimerEnd = function () {\n    this.animationTimer = 0;\n    this.adapter.removeClass(_constants__WEBPACK_IMPORTED_MODULE_1__.cssClasses.OPENING);\n    this.adapter.removeClass(_constants__WEBPACK_IMPORTED_MODULE_1__.cssClasses.CLOSING);\n  };\n  /**\n   * Runs the given logic on the next animation frame, using setTimeout to\n   * factor in Firefox reflow behavior.\n   */\n\n\n  MDCDialogFoundation.prototype.runNextAnimationFrame = function (callback) {\n    var _this = this;\n\n    cancelAnimationFrame(this.animationFrame);\n    this.animationFrame = requestAnimationFrame(function () {\n      _this.animationFrame = 0;\n      clearTimeout(_this.animationTimer);\n      _this.animationTimer = setTimeout(callback, 0);\n    });\n  };\n\n  MDCDialogFoundation.prototype.detectStackedButtons = function () {\n    // Remove the class first to let us measure the buttons' natural positions.\n    this.adapter.removeClass(_constants__WEBPACK_IMPORTED_MODULE_1__.cssClasses.STACKED);\n    var areButtonsStacked = this.adapter.areButtonsStacked();\n\n    if (areButtonsStacked) {\n      this.adapter.addClass(_constants__WEBPACK_IMPORTED_MODULE_1__.cssClasses.STACKED);\n    }\n\n    if (areButtonsStacked !== this.areButtonsStacked) {\n      this.adapter.reverseButtons();\n      this.areButtonsStacked = areButtonsStacked;\n    }\n  };\n\n  MDCDialogFoundation.prototype.toggleScrollableClasses = function () {\n    // Remove the class first to let us measure the natural height of the\n    // content.\n    this.adapter.removeClass(_constants__WEBPACK_IMPORTED_MODULE_1__.cssClasses.SCROLLABLE);\n\n    if (this.adapter.isContentScrollable()) {\n      this.adapter.addClass(_constants__WEBPACK_IMPORTED_MODULE_1__.cssClasses.SCROLLABLE);\n\n      if (this.isFullscreen) {\n        // If dialog is full-screen and scrollable, check if a scroll divider\n        // should be shown.\n        this.toggleScrollDividerHeader();\n        this.toggleScrollDividerFooter();\n      }\n    }\n  };\n\n  MDCDialogFoundation.prototype.toggleScrollDividerHeader = function () {\n    if (!this.adapter.isScrollableContentAtTop()) {\n      this.adapter.addClass(_constants__WEBPACK_IMPORTED_MODULE_1__.cssClasses.SCROLL_DIVIDER_HEADER);\n    } else if (this.adapter.hasClass(_constants__WEBPACK_IMPORTED_MODULE_1__.cssClasses.SCROLL_DIVIDER_HEADER)) {\n      this.adapter.removeClass(_constants__WEBPACK_IMPORTED_MODULE_1__.cssClasses.SCROLL_DIVIDER_HEADER);\n    }\n  };\n\n  MDCDialogFoundation.prototype.toggleScrollDividerFooter = function () {\n    if (!this.adapter.isScrollableContentAtBottom()) {\n      this.adapter.addClass(_constants__WEBPACK_IMPORTED_MODULE_1__.cssClasses.SCROLL_DIVIDER_FOOTER);\n    } else if (this.adapter.hasClass(_constants__WEBPACK_IMPORTED_MODULE_1__.cssClasses.SCROLL_DIVIDER_FOOTER)) {\n      this.adapter.removeClass(_constants__WEBPACK_IMPORTED_MODULE_1__.cssClasses.SCROLL_DIVIDER_FOOTER);\n    }\n  };\n\n  return MDCDialogFoundation;\n}(_material_base_foundation__WEBPACK_IMPORTED_MODULE_3__.MDCFoundation);\n\n // tslint:disable-next-line:no-default-export Needed for backward compatibility with MDC Web v0.44.0 and earlier.\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (MDCDialogFoundation);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@material/dialog/foundation.js\n");

/***/ }),

/***/ "./node_modules/@material/dom/events.js":
/*!**********************************************!*\
  !*** ./node_modules/@material/dom/events.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"applyPassive\": () => (/* binding */ applyPassive)\n/* harmony export */ });\n/**\n * @license\n * Copyright 2019 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\n/**\n * Determine whether the current browser supports passive event listeners, and\n * if so, use them.\n */\nfunction applyPassive(globalObj) {\n  if (globalObj === void 0) {\n    globalObj = window;\n  }\n\n  return supportsPassiveOption(globalObj) ? {\n    passive: true\n  } : false;\n}\n\nfunction supportsPassiveOption(globalObj) {\n  if (globalObj === void 0) {\n    globalObj = window;\n  } // See\n  // https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener\n\n\n  var passiveSupported = false;\n\n  try {\n    var options = {\n      // This function will be called when the browser\n      // attempts to access the passive property.\n      get passive() {\n        passiveSupported = true;\n        return false;\n      }\n\n    };\n\n    var handler = function () {};\n\n    globalObj.document.addEventListener('test', handler, options);\n    globalObj.document.removeEventListener('test', handler, options);\n  } catch (err) {\n    passiveSupported = false;\n  }\n\n  return passiveSupported;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsL2RvbS9ldmVudHMuanMuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFxQkE7O0FBRUE7OztBQUdBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7O0FBRUE7QUFDQTtBQUFBO0FBRUE7O0FBRUE7QUFBQTtBQUFBO0FBQUE7QUFFQTs7O0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFOQTs7QUFTQTs7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ob21lLWFzc2lzdGFudC1mcm9udGVuZC9ldmVudHMudHM/ZmU2NSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOSBHb29nbGUgSW5jLlxuICpcbiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbiAqIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbiAqIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbiAqIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbiAqIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuICogZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbiAqXG4gKiBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuICogYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4gKlxuICogVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuICogSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4gKiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbiAqIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbiAqIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4gKiBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4gKiBUSEUgU09GVFdBUkUuXG4gKi9cbi8qKlxuICogRGV0ZXJtaW5lIHdoZXRoZXIgdGhlIGN1cnJlbnQgYnJvd3NlciBzdXBwb3J0cyBwYXNzaXZlIGV2ZW50IGxpc3RlbmVycywgYW5kXG4gKiBpZiBzbywgdXNlIHRoZW0uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhcHBseVBhc3NpdmUoZ2xvYmFsT2JqKSB7XG4gICAgaWYgKGdsb2JhbE9iaiA9PT0gdm9pZCAwKSB7IGdsb2JhbE9iaiA9IHdpbmRvdzsgfVxuICAgIHJldHVybiBzdXBwb3J0c1Bhc3NpdmVPcHRpb24oZ2xvYmFsT2JqKSA/XG4gICAgICAgIHsgcGFzc2l2ZTogdHJ1ZSB9IDpcbiAgICAgICAgZmFsc2U7XG59XG5mdW5jdGlvbiBzdXBwb3J0c1Bhc3NpdmVPcHRpb24oZ2xvYmFsT2JqKSB7XG4gICAgaWYgKGdsb2JhbE9iaiA9PT0gdm9pZCAwKSB7IGdsb2JhbE9iaiA9IHdpbmRvdzsgfVxuICAgIC8vIFNlZVxuICAgIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9FdmVudFRhcmdldC9hZGRFdmVudExpc3RlbmVyXG4gICAgdmFyIHBhc3NpdmVTdXBwb3J0ZWQgPSBmYWxzZTtcbiAgICB0cnkge1xuICAgICAgICB2YXIgb3B0aW9ucyA9IHtcbiAgICAgICAgICAgIC8vIFRoaXMgZnVuY3Rpb24gd2lsbCBiZSBjYWxsZWQgd2hlbiB0aGUgYnJvd3NlclxuICAgICAgICAgICAgLy8gYXR0ZW1wdHMgdG8gYWNjZXNzIHRoZSBwYXNzaXZlIHByb3BlcnR5LlxuICAgICAgICAgICAgZ2V0IHBhc3NpdmUoKSB7XG4gICAgICAgICAgICAgICAgcGFzc2l2ZVN1cHBvcnRlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICB2YXIgaGFuZGxlciA9IGZ1bmN0aW9uICgpIHsgfTtcbiAgICAgICAgZ2xvYmFsT2JqLmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3Rlc3QnLCBoYW5kbGVyLCBvcHRpb25zKTtcbiAgICAgICAgZ2xvYmFsT2JqLmRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Rlc3QnLCBoYW5kbGVyLCBvcHRpb25zKTtcbiAgICB9XG4gICAgY2F0Y2ggKGVycikge1xuICAgICAgICBwYXNzaXZlU3VwcG9ydGVkID0gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiBwYXNzaXZlU3VwcG9ydGVkO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXZlbnRzLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@material/dom/events.js\n");

/***/ }),

/***/ "./node_modules/@material/mwc-dialog/mwc-dialog-base.js":
/*!**************************************************************!*\
  !*** ./node_modules/@material/mwc-dialog/mwc-dialog-base.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"DialogBase\": () => (/* binding */ DialogBase)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.es6.js\");\n/* harmony import */ var blocking_elements__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! blocking-elements */ \"./node_modules/blocking-elements/dist/blocking-elements.js\");\n/* harmony import */ var blocking_elements__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(blocking_elements__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var wicg_inert__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! wicg-inert */ \"./node_modules/wicg-inert/src/inert.js\");\n/* harmony import */ var wicg_inert__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(wicg_inert__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _material_dialog_constants__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @material/dialog/constants */ \"./node_modules/@material/dialog/constants.js\");\n/* harmony import */ var _material_dialog_foundation__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @material/dialog/foundation */ \"./node_modules/@material/dialog/foundation.js\");\n/* harmony import */ var _material_dom_events__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @material/dom/events */ \"./node_modules/@material/dom/events.js\");\n/* harmony import */ var _material_dom_ponyfill__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @material/dom/ponyfill */ \"./node_modules/@material/dom/ponyfill.js\");\n/* harmony import */ var _material_mwc_base_base_element__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @material/mwc-base/base-element */ \"./node_modules/@material/mwc-base/base-element.js\");\n/* harmony import */ var _material_mwc_base_observer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @material/mwc-base/observer */ \"./node_modules/@material/mwc-base/observer.js\");\n/* harmony import */ var lit__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! lit */ \"./node_modules/lit/index.js\");\n/* harmony import */ var lit_decorators_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! lit/decorators.js */ \"./node_modules/lit/decorators.js\");\n/* harmony import */ var lit_directives_class_map_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! lit/directives/class-map.js */ \"./node_modules/lit/directives/class-map.js\");\n/**\n * @license\n * Copyright 2019 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n // Style preference for leading underscores.\n// tslint:disable:strip-private-property-underscore\n\n\n\n\n\n\n\n\n\n\n\n\nconst blockingElements = document.$blockingElements;\nclass DialogBase extends _material_mwc_base_base_element__WEBPACK_IMPORTED_MODULE_2__.BaseElement {\n  constructor() {\n    super(...arguments);\n    this.hideActions = false;\n    this.stacked = false;\n    this.heading = '';\n    this.scrimClickAction = 'close';\n    this.escapeKeyAction = 'close';\n    this.open = false;\n    this.defaultAction = 'close';\n    this.actionAttribute = 'dialogAction';\n    this.initialFocusAttribute = 'dialogInitialFocus';\n    this.initialSupressDefaultPressSelector = '';\n    this.mdcFoundationClass = _material_dialog_foundation__WEBPACK_IMPORTED_MODULE_7__[\"default\"];\n    this.boundHandleClick = null;\n    this.boundHandleKeydown = null;\n    this.boundHandleDocumentKeydown = null;\n  }\n\n  set suppressDefaultPressSelector(selector) {\n    if (this.mdcFoundation) {\n      this.mdcFoundation.setSuppressDefaultPressSelector(selector);\n    } else {\n      this.initialSupressDefaultPressSelector = selector;\n    }\n  }\n  /**\n   * @export\n   */\n\n\n  get suppressDefaultPressSelector() {\n    return this.mdcFoundation ? this.mdcFoundation.getSuppressDefaultPressSelector() : this.initialSupressDefaultPressSelector;\n  }\n\n  get primaryButton() {\n    let assignedNodes = this.primarySlot.assignedNodes();\n    assignedNodes = assignedNodes.filter(node => node instanceof HTMLElement);\n    const button = assignedNodes[0];\n    return button ? button : null;\n  }\n\n  emitNotification(name, action) {\n    const init = {\n      detail: action ? {\n        action\n      } : {}\n    };\n    const ev = new CustomEvent(name, init);\n    this.dispatchEvent(ev);\n  }\n\n  getInitialFocusEl() {\n    const initFocusSelector = `[${this.initialFocusAttribute}]`; // only search light DOM. This typically handles all the cases\n\n    const lightDomQs = this.querySelector(initFocusSelector);\n\n    if (lightDomQs) {\n      return lightDomQs;\n    } // if not in light dom, search each flattened distributed node.\n\n\n    const primarySlot = this.primarySlot;\n    const primaryNodes = primarySlot.assignedNodes({\n      flatten: true\n    });\n    const primaryFocusElement = this.searchNodeTreesForAttribute(primaryNodes, this.initialFocusAttribute);\n\n    if (primaryFocusElement) {\n      return primaryFocusElement;\n    }\n\n    const secondarySlot = this.secondarySlot;\n    const secondaryNodes = secondarySlot.assignedNodes({\n      flatten: true\n    });\n    const secondaryFocusElement = this.searchNodeTreesForAttribute(secondaryNodes, this.initialFocusAttribute);\n\n    if (secondaryFocusElement) {\n      return secondaryFocusElement;\n    }\n\n    const contentSlot = this.contentSlot;\n    const contentNodes = contentSlot.assignedNodes({\n      flatten: true\n    });\n    const initFocusElement = this.searchNodeTreesForAttribute(contentNodes, this.initialFocusAttribute);\n    return initFocusElement;\n  }\n\n  searchNodeTreesForAttribute(nodes, attribute) {\n    for (const node of nodes) {\n      if (!(node instanceof HTMLElement)) {\n        continue;\n      }\n\n      if (node.hasAttribute(attribute)) {\n        return node;\n      } else {\n        const selection = node.querySelector(`[${attribute}]`);\n\n        if (selection) {\n          return selection;\n        }\n      }\n    }\n\n    return null;\n  }\n\n  createAdapter() {\n    return Object.assign(Object.assign({}, (0,_material_mwc_base_base_element__WEBPACK_IMPORTED_MODULE_2__.addHasRemoveClass)(this.mdcRoot)), {\n      addBodyClass: () => document.body.style.overflow = 'hidden',\n      removeBodyClass: () => document.body.style.overflow = '',\n      areButtonsStacked: () => this.stacked,\n      clickDefaultButton: () => {\n        const primary = this.primaryButton;\n\n        if (primary) {\n          primary.click();\n        }\n      },\n      eventTargetMatches: (target, selector) => target ? (0,_material_dom_ponyfill__WEBPACK_IMPORTED_MODULE_8__.matches)(target, selector) : false,\n      getActionFromEvent: e => {\n        if (!e.target) {\n          return '';\n        }\n\n        const element = (0,_material_dom_ponyfill__WEBPACK_IMPORTED_MODULE_8__.closest)(e.target, `[${this.actionAttribute}]`);\n        const action = element && element.getAttribute(this.actionAttribute);\n        return action;\n      },\n      getInitialFocusEl: () => {\n        return this.getInitialFocusEl();\n      },\n      isContentScrollable: () => {\n        const el = this.contentElement;\n        return el ? el.scrollHeight > el.offsetHeight : false;\n      },\n      notifyClosed: action => this.emitNotification('closed', action),\n      notifyClosing: action => {\n        if (!this.closingDueToDisconnect) {\n          // Don't set our open state to closed just because we were\n          // disconnected. That way if we get reconnected, we'll know to\n          // re-open.\n          this.open = false;\n        }\n\n        this.emitNotification('closing', action);\n      },\n      notifyOpened: () => this.emitNotification('opened'),\n      notifyOpening: () => {\n        this.open = true;\n        this.emitNotification('opening');\n      },\n      reverseButtons: () => {},\n      releaseFocus: () => {\n        blockingElements.remove(this);\n      },\n      trapFocus: el => {\n        if (!this.isConnected) {\n          // this is the case where it is opened and closed and then removed\n          // from DOM before the animation has completed. Blocking Elements will\n          // throw if this is the case\n          return;\n        }\n\n        blockingElements.push(this);\n\n        if (el) {\n          el.focus();\n        }\n      },\n      registerContentEventHandler: (evtType, handler) => {\n        const el = this.contentElement;\n        el.addEventListener(evtType, handler);\n      },\n      deregisterContentEventHandler: (evtType, handler) => {\n        const el = this.contentElement;\n        el.removeEventListener(evtType, handler);\n      },\n      isScrollableContentAtTop: () => {\n        const el = this.contentElement;\n        return el ? el.scrollTop === 0 : false;\n      },\n      isScrollableContentAtBottom: () => {\n        const el = this.contentElement;\n        return el ? Math.ceil(el.scrollHeight - el.scrollTop) === el.clientHeight : false;\n      },\n      registerWindowEventHandler: (evtType, handler) => {\n        window.addEventListener(evtType, handler, (0,_material_dom_events__WEBPACK_IMPORTED_MODULE_9__.applyPassive)());\n      },\n      deregisterWindowEventHandler: (evtType, handler) => {\n        window.removeEventListener(evtType, handler, (0,_material_dom_events__WEBPACK_IMPORTED_MODULE_9__.applyPassive)());\n      }\n    });\n  }\n\n  render() {\n    const classes = {\n      [_material_dialog_constants__WEBPACK_IMPORTED_MODULE_10__.cssClasses.STACKED]: this.stacked\n    };\n    let heading = lit__WEBPACK_IMPORTED_MODULE_4__.html``;\n\n    if (this.heading) {\n      heading = this.renderHeading();\n    }\n\n    const actionsClasses = {\n      'mdc-dialog__actions': !this.hideActions\n    };\n    return lit__WEBPACK_IMPORTED_MODULE_4__.html`\n    <div class=\"mdc-dialog ${(0,lit_directives_class_map_js__WEBPACK_IMPORTED_MODULE_6__.classMap)(classes)}\"\n        role=\"alertdialog\"\n        aria-modal=\"true\"\n        aria-labelledby=\"title\"\n        aria-describedby=\"content\">\n      <div class=\"mdc-dialog__container\">\n        <div class=\"mdc-dialog__surface\">\n          ${heading}\n          <div id=\"content\" class=\"mdc-dialog__content\">\n            <slot id=\"contentSlot\"></slot>\n          </div>\n          <footer\n              id=\"actions\"\n              class=\"${(0,lit_directives_class_map_js__WEBPACK_IMPORTED_MODULE_6__.classMap)(actionsClasses)}\">\n            <span>\n              <slot name=\"secondaryAction\"></slot>\n            </span>\n            <span>\n             <slot name=\"primaryAction\"></slot>\n            </span>\n          </footer>\n        </div>\n      </div>\n      <div class=\"mdc-dialog__scrim\"></div>\n    </div>`;\n  }\n\n  renderHeading() {\n    return lit__WEBPACK_IMPORTED_MODULE_4__.html`\n      <h2 id=\"title\" class=\"mdc-dialog__title\">${this.heading}</h2>`;\n  }\n\n  firstUpdated() {\n    super.firstUpdated();\n    this.mdcFoundation.setAutoStackButtons(true);\n\n    if (this.initialSupressDefaultPressSelector) {\n      this.suppressDefaultPressSelector = this.initialSupressDefaultPressSelector;\n    } else {\n      this.suppressDefaultPressSelector = [this.suppressDefaultPressSelector, 'mwc-textarea', 'mwc-menu mwc-list-item', 'mwc-select mwc-list-item'].join(', ');\n    }\n\n    this.boundHandleClick = this.mdcFoundation.handleClick.bind(this.mdcFoundation);\n    this.boundHandleKeydown = this.mdcFoundation.handleKeydown.bind(this.mdcFoundation);\n    this.boundHandleDocumentKeydown = this.mdcFoundation.handleDocumentKeydown.bind(this.mdcFoundation);\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n\n    if (this.open && this.mdcFoundation && !this.mdcFoundation.isOpen()) {\n      // We probably got disconnected while we were still open. Re-open,\n      // matching the behavior of native <dialog>.\n      this.setEventListeners();\n      this.mdcFoundation.open();\n    }\n  }\n\n  disconnectedCallback() {\n    super.disconnectedCallback();\n\n    if (this.open && this.mdcFoundation) {\n      // If this dialog is opened and then disconnected, we want to close\n      // the foundation, so that 1) any pending timers are cancelled\n      // (in particular for trapFocus), and 2) if we reconnect, we can open\n      // the foundation again to retrigger animations and focus.\n      this.removeEventListeners();\n      this.closingDueToDisconnect = true;\n      this.mdcFoundation.close(this.currentAction || this.defaultAction);\n      this.closingDueToDisconnect = false;\n      this.currentAction = undefined; // When we close normally, the releaseFocus callback handles removing\n      // ourselves from the blocking elements stack. However, that callback\n      // happens on a delay, and when we are closing due to a disconnect we\n      // need to remove ourselves before the blocking element polyfill's\n      // mutation observer notices and logs a warning, since it's not valid to\n      // be in the blocking elements stack while disconnected.\n\n      blockingElements.remove(this);\n    }\n  }\n\n  forceLayout() {\n    this.mdcFoundation.layout();\n  }\n\n  focus() {\n    const initialFocusEl = this.getInitialFocusEl();\n    initialFocusEl && initialFocusEl.focus();\n  }\n\n  blur() {\n    if (!this.shadowRoot) {\n      return;\n    }\n\n    const activeEl = this.shadowRoot.activeElement;\n\n    if (activeEl) {\n      if (activeEl instanceof HTMLElement) {\n        activeEl.blur();\n      }\n    } else {\n      const root = this.getRootNode();\n      const activeEl = root instanceof Document ? root.activeElement : null;\n\n      if (activeEl instanceof HTMLElement) {\n        activeEl.blur();\n      }\n    }\n  }\n\n  setEventListeners() {\n    if (this.boundHandleClick) {\n      this.mdcRoot.addEventListener('click', this.boundHandleClick);\n    }\n\n    if (this.boundHandleKeydown) {\n      this.mdcRoot.addEventListener('keydown', this.boundHandleKeydown, (0,_material_dom_events__WEBPACK_IMPORTED_MODULE_9__.applyPassive)());\n    }\n\n    if (this.boundHandleDocumentKeydown) {\n      document.addEventListener('keydown', this.boundHandleDocumentKeydown, (0,_material_dom_events__WEBPACK_IMPORTED_MODULE_9__.applyPassive)());\n    }\n  }\n\n  removeEventListeners() {\n    if (this.boundHandleClick) {\n      this.mdcRoot.removeEventListener('click', this.boundHandleClick);\n    }\n\n    if (this.boundHandleKeydown) {\n      this.mdcRoot.removeEventListener('keydown', this.boundHandleKeydown);\n    }\n\n    if (this.boundHandleDocumentKeydown) {\n      document.removeEventListener('keydown', this.boundHandleDocumentKeydown);\n    }\n  }\n\n  close() {\n    this.open = false;\n  }\n\n  show() {\n    this.open = true;\n  }\n\n}\n\n(0,tslib__WEBPACK_IMPORTED_MODULE_11__.__decorate)([(0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_5__.query)('.mdc-dialog')], DialogBase.prototype, \"mdcRoot\", void 0);\n\n(0,tslib__WEBPACK_IMPORTED_MODULE_11__.__decorate)([(0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_5__.query)('slot[name=\"primaryAction\"]')], DialogBase.prototype, \"primarySlot\", void 0);\n\n(0,tslib__WEBPACK_IMPORTED_MODULE_11__.__decorate)([(0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_5__.query)('slot[name=\"secondaryAction\"]')], DialogBase.prototype, \"secondarySlot\", void 0);\n\n(0,tslib__WEBPACK_IMPORTED_MODULE_11__.__decorate)([(0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_5__.query)('#contentSlot')], DialogBase.prototype, \"contentSlot\", void 0);\n\n(0,tslib__WEBPACK_IMPORTED_MODULE_11__.__decorate)([(0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_5__.query)('.mdc-dialog__content')], DialogBase.prototype, \"contentElement\", void 0);\n\n(0,tslib__WEBPACK_IMPORTED_MODULE_11__.__decorate)([(0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_5__.query)('.mdc-container')], DialogBase.prototype, \"conatinerElement\", void 0);\n\n(0,tslib__WEBPACK_IMPORTED_MODULE_11__.__decorate)([(0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_5__.property)({\n  type: Boolean\n})], DialogBase.prototype, \"hideActions\", void 0);\n\n(0,tslib__WEBPACK_IMPORTED_MODULE_11__.__decorate)([(0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_5__.property)({\n  type: Boolean\n}), (0,_material_mwc_base_observer__WEBPACK_IMPORTED_MODULE_3__.observer)(function () {\n  this.forceLayout();\n})], DialogBase.prototype, \"stacked\", void 0);\n\n(0,tslib__WEBPACK_IMPORTED_MODULE_11__.__decorate)([(0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_5__.property)({\n  type: String\n})], DialogBase.prototype, \"heading\", void 0);\n\n(0,tslib__WEBPACK_IMPORTED_MODULE_11__.__decorate)([(0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_5__.property)({\n  type: String\n}), (0,_material_mwc_base_observer__WEBPACK_IMPORTED_MODULE_3__.observer)(function (newAction) {\n  this.mdcFoundation.setScrimClickAction(newAction);\n})], DialogBase.prototype, \"scrimClickAction\", void 0);\n\n(0,tslib__WEBPACK_IMPORTED_MODULE_11__.__decorate)([(0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_5__.property)({\n  type: String\n}), (0,_material_mwc_base_observer__WEBPACK_IMPORTED_MODULE_3__.observer)(function (newAction) {\n  this.mdcFoundation.setEscapeKeyAction(newAction);\n})], DialogBase.prototype, \"escapeKeyAction\", void 0);\n\n(0,tslib__WEBPACK_IMPORTED_MODULE_11__.__decorate)([(0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_5__.property)({\n  type: Boolean,\n  reflect: true\n}), (0,_material_mwc_base_observer__WEBPACK_IMPORTED_MODULE_3__.observer)(function (isOpen) {\n  // Check isConnected because we could have been disconnected before first\n  // update. If we're now closed, then we shouldn't start the MDC foundation\n  // opening animation. If we're now closed, then we've already closed the\n  // foundation in disconnectedCallback.\n  if (this.mdcFoundation && this.isConnected) {\n    if (isOpen) {\n      this.setEventListeners();\n      this.mdcFoundation.open();\n    } else {\n      this.removeEventListeners();\n      this.mdcFoundation.close(this.currentAction || this.defaultAction);\n      this.currentAction = undefined;\n    }\n  }\n})], DialogBase.prototype, \"open\", void 0);\n\n(0,tslib__WEBPACK_IMPORTED_MODULE_11__.__decorate)([(0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_5__.property)()], DialogBase.prototype, \"defaultAction\", void 0);\n\n(0,tslib__WEBPACK_IMPORTED_MODULE_11__.__decorate)([(0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_5__.property)()], DialogBase.prototype, \"actionAttribute\", void 0);\n\n(0,tslib__WEBPACK_IMPORTED_MODULE_11__.__decorate)([(0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_5__.property)()], DialogBase.prototype, \"initialFocusAttribute\", void 0);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@material/mwc-dialog/mwc-dialog-base.js\n");

/***/ }),

/***/ "./node_modules/@material/mwc-dialog/mwc-dialog.css.js":
/*!*************************************************************!*\
  !*** ./node_modules/@material/mwc-dialog/mwc-dialog.css.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"styles\": () => (/* binding */ styles)\n/* harmony export */ });\n/* harmony import */ var lit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lit */ \"./node_modules/lit/index.js\");\n/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-LIcense-Identifier: Apache-2.0\n */\n\nconst styles = lit__WEBPACK_IMPORTED_MODULE_0__.css`.mdc-dialog .mdc-dialog__surface{background-color:#fff;background-color:var(--mdc-theme-surface, #fff)}.mdc-dialog .mdc-dialog__scrim{background-color:rgba(0,0,0,.32)}.mdc-dialog .mdc-dialog__surface-scrim{background-color:rgba(0,0,0,.32)}.mdc-dialog .mdc-dialog__title{color:rgba(0,0,0,.87)}.mdc-dialog .mdc-dialog__content{color:rgba(0,0,0,.6)}.mdc-dialog .mdc-dialog__close{color:#000;color:var(--mdc-theme-on-surface, #000)}.mdc-dialog .mdc-dialog__close .mdc-icon-button__ripple::before,.mdc-dialog .mdc-dialog__close .mdc-icon-button__ripple::after{background-color:#000;background-color:var(--mdc-ripple-color, var(--mdc-theme-on-surface, #000))}.mdc-dialog .mdc-dialog__close:hover .mdc-icon-button__ripple::before,.mdc-dialog .mdc-dialog__close.mdc-ripple-surface--hover .mdc-icon-button__ripple::before{opacity:0.04;opacity:var(--mdc-ripple-hover-opacity, 0.04)}.mdc-dialog .mdc-dialog__close.mdc-ripple-upgraded--background-focused .mdc-icon-button__ripple::before,.mdc-dialog .mdc-dialog__close:not(.mdc-ripple-upgraded):focus .mdc-icon-button__ripple::before{transition-duration:75ms;opacity:0.12;opacity:var(--mdc-ripple-focus-opacity, 0.12)}.mdc-dialog .mdc-dialog__close:not(.mdc-ripple-upgraded) .mdc-icon-button__ripple::after{transition:opacity 150ms linear}.mdc-dialog .mdc-dialog__close:not(.mdc-ripple-upgraded):active .mdc-icon-button__ripple::after{transition-duration:75ms;opacity:0.12;opacity:var(--mdc-ripple-press-opacity, 0.12)}.mdc-dialog .mdc-dialog__close.mdc-ripple-upgraded{--mdc-ripple-fg-opacity:var(--mdc-ripple-press-opacity, 0.12)}.mdc-dialog.mdc-dialog--scrollable .mdc-dialog__title,.mdc-dialog.mdc-dialog--scrollable .mdc-dialog__actions,.mdc-dialog.mdc-dialog--scrollable.mdc-dialog-scroll-divider-footer .mdc-dialog__actions{border-color:rgba(0,0,0,.12)}.mdc-dialog.mdc-dialog--scrollable .mdc-dialog__title{border-bottom:1px solid rgba(0,0,0,.12);margin-bottom:0}.mdc-dialog.mdc-dialog-scroll-divider-header.mdc-dialog--fullscreen .mdc-dialog__header{box-shadow:0px 3px 1px -2px rgba(0, 0, 0, 0.2),0px 2px 2px 0px rgba(0, 0, 0, 0.14),0px 1px 5px 0px rgba(0,0,0,.12)}.mdc-dialog .mdc-dialog__surface{border-radius:4px;border-radius:var(--mdc-shape-medium, 4px)}.mdc-dialog__surface{box-shadow:0px 11px 15px -7px rgba(0, 0, 0, 0.2),0px 24px 38px 3px rgba(0, 0, 0, 0.14),0px 9px 46px 8px rgba(0,0,0,.12)}.mdc-dialog__title{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;font-family:Roboto, sans-serif;font-family:var(--mdc-typography-headline6-font-family, var(--mdc-typography-font-family, Roboto, sans-serif));font-size:1.25rem;font-size:var(--mdc-typography-headline6-font-size, 1.25rem);line-height:2rem;line-height:var(--mdc-typography-headline6-line-height, 2rem);font-weight:500;font-weight:var(--mdc-typography-headline6-font-weight, 500);letter-spacing:0.0125em;letter-spacing:var(--mdc-typography-headline6-letter-spacing, 0.0125em);text-decoration:inherit;text-decoration:var(--mdc-typography-headline6-text-decoration, inherit);text-transform:inherit;text-transform:var(--mdc-typography-headline6-text-transform, inherit)}.mdc-dialog__content{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;font-family:Roboto, sans-serif;font-family:var(--mdc-typography-body1-font-family, var(--mdc-typography-font-family, Roboto, sans-serif));font-size:1rem;font-size:var(--mdc-typography-body1-font-size, 1rem);line-height:1.5rem;line-height:var(--mdc-typography-body1-line-height, 1.5rem);font-weight:400;font-weight:var(--mdc-typography-body1-font-weight, 400);letter-spacing:0.03125em;letter-spacing:var(--mdc-typography-body1-letter-spacing, 0.03125em);text-decoration:inherit;text-decoration:var(--mdc-typography-body1-text-decoration, inherit);text-transform:inherit;text-transform:var(--mdc-typography-body1-text-transform, inherit)}.mdc-elevation-overlay{position:absolute;border-radius:inherit;pointer-events:none;opacity:0;opacity:var(--mdc-elevation-overlay-opacity, 0);transition:opacity 280ms cubic-bezier(0.4, 0, 0.2, 1);background-color:#fff;background-color:var(--mdc-elevation-overlay-color, #fff)}.mdc-dialog,.mdc-dialog__scrim{position:fixed;top:0;left:0;align-items:center;justify-content:center;box-sizing:border-box;width:100%;height:100%}.mdc-dialog{display:none;z-index:7;z-index:var(--mdc-dialog-z-index, 7)}.mdc-dialog .mdc-dialog__content{padding:20px 24px 20px 24px}.mdc-dialog .mdc-dialog__surface{min-width:280px}@media(max-width: 592px){.mdc-dialog .mdc-dialog__surface{max-width:calc(100vw - 32px)}}@media(min-width: 592px){.mdc-dialog .mdc-dialog__surface{max-width:560px}}.mdc-dialog .mdc-dialog__surface{max-height:calc(100% - 32px)}.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface{max-width:none}@media(max-width: 960px){.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface{max-height:560px;width:560px}.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface .mdc-dialog__close{right:-12px}}@media(max-width: 720px)and (max-width: 672px){.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface{width:calc(100vw - 112px)}}@media(max-width: 720px)and (min-width: 672px){.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface{width:560px}}@media(max-width: 720px)and (max-height: 720px){.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface{max-height:calc(100vh - 160px)}}@media(max-width: 720px)and (min-height: 720px){.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface{max-height:560px}}@media(max-width: 720px){.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface .mdc-dialog__close{right:-12px}}@media(max-width: 720px)and (max-height: 400px){.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface{height:100%;max-height:100vh;max-width:100vw;width:100vw;border-radius:0}.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface .mdc-dialog__close{order:-1;left:-12px}.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface .mdc-dialog__header{padding:0 16px 9px;justify-content:flex-start}.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface .mdc-dialog__title{margin-left:calc(16px - 2 * 12px)}}@media(max-width: 600px){.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface{height:100%;max-height:100vh;max-width:100vw;width:100vw;border-radius:0}.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface .mdc-dialog__close{order:-1;left:-12px}.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface .mdc-dialog__header{padding:0 16px 9px;justify-content:flex-start}.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface .mdc-dialog__title{margin-left:calc(16px - 2 * 12px)}}@media(min-width: 960px){.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface{width:calc(100vw - 400px)}.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface .mdc-dialog__close{right:-12px}}.mdc-dialog.mdc-dialog__scrim--hidden .mdc-dialog__scrim{opacity:0}.mdc-dialog__scrim{opacity:0;z-index:-1}.mdc-dialog__container{display:flex;flex-direction:row;align-items:center;justify-content:space-around;box-sizing:border-box;height:100%;transform:scale(0.8);opacity:0;pointer-events:none}.mdc-dialog__surface{position:relative;display:flex;flex-direction:column;flex-grow:0;flex-shrink:0;box-sizing:border-box;max-width:100%;max-height:100%;pointer-events:auto;overflow-y:auto}.mdc-dialog__surface .mdc-elevation-overlay{width:100%;height:100%;top:0;left:0}[dir=rtl] .mdc-dialog__surface,.mdc-dialog__surface[dir=rtl]{text-align:right}@media screen and (forced-colors: active),(-ms-high-contrast: active){.mdc-dialog__surface{outline:2px solid windowText}}.mdc-dialog__surface::before{position:absolute;box-sizing:border-box;width:100%;height:100%;top:0;left:0;border:2px solid transparent;border-radius:inherit;content:\"\";pointer-events:none}@media screen and (-ms-high-contrast: active),screen and (-ms-high-contrast: none){.mdc-dialog__surface::before{content:none}}.mdc-dialog__title{display:block;margin-top:0;position:relative;flex-shrink:0;box-sizing:border-box;margin:0 0 1px;padding:0 24px 9px}.mdc-dialog__title::before{display:inline-block;width:0;height:40px;content:\"\";vertical-align:0}[dir=rtl] .mdc-dialog__title,.mdc-dialog__title[dir=rtl]{text-align:right}.mdc-dialog--scrollable .mdc-dialog__title{margin-bottom:1px;padding-bottom:15px}.mdc-dialog--fullscreen .mdc-dialog__header{align-items:baseline;border-bottom:1px solid transparent;display:inline-flex;justify-content:space-between;padding:0 24px 9px;z-index:1}.mdc-dialog--fullscreen .mdc-dialog__header .mdc-dialog__close{right:-12px}.mdc-dialog--fullscreen .mdc-dialog__title{margin-bottom:0;padding:0;border-bottom:0}.mdc-dialog--fullscreen.mdc-dialog--scrollable .mdc-dialog__title{border-bottom:0;margin-bottom:0}.mdc-dialog--fullscreen .mdc-dialog__close{top:5px}.mdc-dialog--fullscreen.mdc-dialog--scrollable .mdc-dialog__actions{border-top:1px solid transparent}.mdc-dialog__content{flex-grow:1;box-sizing:border-box;margin:0;overflow:auto;-webkit-overflow-scrolling:touch}.mdc-dialog__content>:first-child{margin-top:0}.mdc-dialog__content>:last-child{margin-bottom:0}.mdc-dialog__title+.mdc-dialog__content,.mdc-dialog__header+.mdc-dialog__content{padding-top:0}.mdc-dialog--scrollable .mdc-dialog__title+.mdc-dialog__content{padding-top:8px;padding-bottom:8px}.mdc-dialog__content .mdc-deprecated-list:first-child:last-child{padding:6px 0 0}.mdc-dialog--scrollable .mdc-dialog__content .mdc-deprecated-list:first-child:last-child{padding:0}.mdc-dialog__actions{display:flex;position:relative;flex-shrink:0;flex-wrap:wrap;align-items:center;justify-content:flex-end;box-sizing:border-box;min-height:52px;margin:0;padding:8px;border-top:1px solid transparent}.mdc-dialog--stacked .mdc-dialog__actions{flex-direction:column;align-items:flex-end}.mdc-dialog__button{margin-left:8px;margin-right:0;max-width:100%;text-align:right}[dir=rtl] .mdc-dialog__button,.mdc-dialog__button[dir=rtl]{margin-left:0;margin-right:8px}.mdc-dialog__button:first-child{margin-left:0;margin-right:0}[dir=rtl] .mdc-dialog__button:first-child,.mdc-dialog__button:first-child[dir=rtl]{margin-left:0;margin-right:0}[dir=rtl] .mdc-dialog__button,.mdc-dialog__button[dir=rtl]{text-align:left}.mdc-dialog--stacked .mdc-dialog__button:not(:first-child){margin-top:12px}.mdc-dialog--open,.mdc-dialog--opening,.mdc-dialog--closing{display:flex}.mdc-dialog--opening .mdc-dialog__scrim{transition:opacity 150ms linear}.mdc-dialog--opening .mdc-dialog__container{transition:opacity 75ms linear,transform 150ms 0ms cubic-bezier(0, 0, 0.2, 1)}.mdc-dialog--closing .mdc-dialog__scrim,.mdc-dialog--closing .mdc-dialog__container{transition:opacity 75ms linear}.mdc-dialog--closing .mdc-dialog__container{transform:none}.mdc-dialog--open .mdc-dialog__scrim{opacity:1}.mdc-dialog--open .mdc-dialog__container{transform:none;opacity:1}.mdc-dialog--open.mdc-dialog__surface-scrim--shown .mdc-dialog__surface-scrim{opacity:1;z-index:1}.mdc-dialog--open.mdc-dialog__surface-scrim--hiding .mdc-dialog__surface-scrim{transition:opacity 75ms linear}.mdc-dialog--open.mdc-dialog__surface-scrim--showing .mdc-dialog__surface-scrim{transition:opacity 150ms linear}.mdc-dialog__surface-scrim{display:none;opacity:0;position:absolute;width:100%;height:100%}.mdc-dialog__surface-scrim--shown .mdc-dialog__surface-scrim,.mdc-dialog__surface-scrim--showing .mdc-dialog__surface-scrim,.mdc-dialog__surface-scrim--hiding .mdc-dialog__surface-scrim{display:block}.mdc-dialog-scroll-lock{overflow:hidden}#actions:not(.mdc-dialog__actions){display:none}.mdc-dialog__surface{box-shadow:var(--mdc-dialog-box-shadow, 0px 11px 15px -7px rgba(0, 0, 0, 0.2), 0px 24px 38px 3px rgba(0, 0, 0, 0.14), 0px 9px 46px 8px rgba(0, 0, 0, 0.12))}@media(min-width: 560px){.mdc-dialog .mdc-dialog__surface{max-width:560px;max-width:var(--mdc-dialog-max-width, 560px)}}.mdc-dialog .mdc-dialog__scrim{background-color:rgba(0, 0, 0, 0.32);background-color:var(--mdc-dialog-scrim-color, rgba(0, 0, 0, 0.32))}.mdc-dialog .mdc-dialog__title{color:rgba(0, 0, 0, 0.87);color:var(--mdc-dialog-heading-ink-color, rgba(0, 0, 0, 0.87))}.mdc-dialog .mdc-dialog__content{color:rgba(0, 0, 0, 0.6);color:var(--mdc-dialog-content-ink-color, rgba(0, 0, 0, 0.6))}.mdc-dialog.mdc-dialog--scrollable .mdc-dialog__title,.mdc-dialog.mdc-dialog--scrollable .mdc-dialog__actions{border-color:rgba(0, 0, 0, 0.12);border-color:var(--mdc-dialog-scroll-divider-color, rgba(0, 0, 0, 0.12))}.mdc-dialog .mdc-dialog__surface{min-width:280px;min-width:var(--mdc-dialog-min-width, 280px)}.mdc-dialog .mdc-dialog__surface{max-height:var(--mdc-dialog-max-height, calc(100% - 32px))}#actions ::slotted(*){margin-left:8px;margin-right:0;max-width:100%;text-align:right}[dir=rtl] #actions ::slotted(*),#actions ::slotted(*[dir=rtl]){margin-left:0;margin-right:8px}[dir=rtl] #actions ::slotted(*),#actions ::slotted(*[dir=rtl]){text-align:left}.mdc-dialog--stacked #actions{flex-direction:column-reverse}.mdc-dialog--stacked #actions *:not(:last-child) ::slotted(*){flex-basis:.000000001px;margin-top:12px}`;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@material/mwc-dialog/mwc-dialog.css.js\n");

/***/ }),

/***/ "./node_modules/blocking-elements/dist/blocking-elements.js":
/*!******************************************************************!*\
  !*** ./node_modules/blocking-elements/dist/blocking-elements.js ***!
  \******************************************************************/
/***/ (() => {

eval("/**\n * @license\n * Copyright 2016 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n(() => {\n  var _a, _b, _c;\n  /* Symbols for private properties */\n\n\n  const _blockingElements = Symbol();\n\n  const _alreadyInertElements = Symbol();\n\n  const _topElParents = Symbol();\n\n  const _siblingsToRestore = Symbol();\n\n  const _parentMO = Symbol();\n  /* Symbols for private static methods */\n\n\n  const _topChanged = Symbol();\n\n  const _swapInertedSibling = Symbol();\n\n  const _inertSiblings = Symbol();\n\n  const _restoreInertedSiblings = Symbol();\n\n  const _getParents = Symbol();\n\n  const _getDistributedChildren = Symbol();\n\n  const _isInertable = Symbol();\n\n  const _handleMutations = Symbol();\n\n  class BlockingElementsImpl {\n    constructor() {\n      /**\n       * The blocking elements.\n       */\n      this[_a] = [];\n      /**\n       * Used to keep track of the parents of the top element, from the element\n       * itself up to body. When top changes, the old top might have been removed\n       * from the document, so we need to memoize the inerted parents' siblings\n       * in order to restore their inerteness when top changes.\n       */\n\n      this[_b] = [];\n      /**\n       * Elements that are already inert before the first blocking element is\n       * pushed.\n       */\n\n      this[_c] = new Set();\n    }\n\n    destructor() {\n      // Restore original inertness.\n      this[_restoreInertedSiblings](this[_topElParents]); // Note we don't want to make these properties nullable on the class,\n      // since then we'd need non-null casts in many places. Calling a method on\n      // a BlockingElements instance after calling destructor will result in an\n      // exception.\n\n\n      const nullable = this;\n      nullable[_blockingElements] = null;\n      nullable[_topElParents] = null;\n      nullable[_alreadyInertElements] = null;\n    }\n\n    get top() {\n      const elems = this[_blockingElements];\n      return elems[elems.length - 1] || null;\n    }\n\n    push(element) {\n      if (!element || element === this.top) {\n        return;\n      } // Remove it from the stack, we'll bring it to the top.\n\n\n      this.remove(element);\n\n      this[_topChanged](element);\n\n      this[_blockingElements].push(element);\n    }\n\n    remove(element) {\n      const i = this[_blockingElements].indexOf(element);\n\n      if (i === -1) {\n        return false;\n      }\n\n      this[_blockingElements].splice(i, 1); // Top changed only if the removed element was the top element.\n\n\n      if (i === this[_blockingElements].length) {\n        this[_topChanged](this.top);\n      }\n\n      return true;\n    }\n\n    pop() {\n      const top = this.top;\n      top && this.remove(top);\n      return top;\n    }\n\n    has(element) {\n      return this[_blockingElements].indexOf(element) !== -1;\n    }\n    /**\n     * Sets `inert` to all document elements except the new top element, its\n     * parents, and its distributed content.\n     */\n\n\n    [(_a = _blockingElements, _b = _topElParents, _c = _alreadyInertElements, _topChanged)](newTop) {\n      const toKeepInert = this[_alreadyInertElements];\n      const oldParents = this[_topElParents]; // No new top, reset old top if any.\n\n      if (!newTop) {\n        this[_restoreInertedSiblings](oldParents);\n\n        toKeepInert.clear();\n        this[_topElParents] = [];\n        return;\n      }\n\n      const newParents = this[_getParents](newTop); // New top is not contained in the main document!\n\n\n      if (newParents[newParents.length - 1].parentNode !== document.body) {\n        throw Error('Non-connected element cannot be a blocking element');\n      } // Cast here because we know we'll call _inertSiblings on newParents\n      // below.\n\n\n      this[_topElParents] = newParents;\n\n      const toSkip = this[_getDistributedChildren](newTop); // No previous top element.\n\n\n      if (!oldParents.length) {\n        this[_inertSiblings](newParents, toSkip, toKeepInert);\n\n        return;\n      }\n\n      let i = oldParents.length - 1;\n      let j = newParents.length - 1; // Find common parent. Index 0 is the element itself (so stop before it).\n\n      while (i > 0 && j > 0 && oldParents[i] === newParents[j]) {\n        i--;\n        j--;\n      } // If up the parents tree there are 2 elements that are siblings, swap\n      // the inerted sibling.\n\n\n      if (oldParents[i] !== newParents[j]) {\n        this[_swapInertedSibling](oldParents[i], newParents[j]);\n      } // Restore old parents siblings inertness.\n\n\n      i > 0 && this[_restoreInertedSiblings](oldParents.slice(0, i)); // Make new parents siblings inert.\n\n      j > 0 && this[_inertSiblings](newParents.slice(0, j), toSkip, null);\n    }\n    /**\n     * Swaps inertness between two sibling elements.\n     * Sets the property `inert` over the attribute since the inert spec\n     * doesn't specify if it should be reflected.\n     * https://html.spec.whatwg.org/multipage/interaction.html#inert\n     */\n\n\n    [_swapInertedSibling](oldInert, newInert) {\n      const siblingsToRestore = oldInert[_siblingsToRestore]; // oldInert is not contained in siblings to restore, so we have to check\n      // if it's inertable and if already inert.\n\n      if (this[_isInertable](oldInert) && !oldInert.inert) {\n        oldInert.inert = true;\n        siblingsToRestore.add(oldInert);\n      } // If newInert was already between the siblings to restore, it means it is\n      // inertable and must be restored.\n\n\n      if (siblingsToRestore.has(newInert)) {\n        newInert.inert = false;\n        siblingsToRestore.delete(newInert);\n      }\n\n      newInert[_parentMO] = oldInert[_parentMO];\n      newInert[_siblingsToRestore] = siblingsToRestore;\n      oldInert[_parentMO] = undefined;\n      oldInert[_siblingsToRestore] = undefined;\n    }\n    /**\n     * Restores original inertness to the siblings of the elements.\n     * Sets the property `inert` over the attribute since the inert spec\n     * doesn't specify if it should be reflected.\n     * https://html.spec.whatwg.org/multipage/interaction.html#inert\n     */\n\n\n    [_restoreInertedSiblings](elements) {\n      for (const element of elements) {\n        const mo = element[_parentMO];\n        mo.disconnect();\n        element[_parentMO] = undefined;\n        const siblings = element[_siblingsToRestore];\n\n        for (const sibling of siblings) {\n          sibling.inert = false;\n        }\n\n        element[_siblingsToRestore] = undefined;\n      }\n    }\n    /**\n     * Inerts the siblings of the elements except the elements to skip. Stores\n     * the inerted siblings into the element's symbol `_siblingsToRestore`.\n     * Pass `toKeepInert` to collect the already inert elements.\n     * Sets the property `inert` over the attribute since the inert spec\n     * doesn't specify if it should be reflected.\n     * https://html.spec.whatwg.org/multipage/interaction.html#inert\n     */\n\n\n    [_inertSiblings](elements, toSkip, toKeepInert) {\n      for (const element of elements) {\n        // Assume element is not a Document, so it must have a parentNode.\n        const parent = element.parentNode;\n        const children = parent.children;\n        const inertedSiblings = new Set();\n\n        for (let j = 0; j < children.length; j++) {\n          const sibling = children[j]; // Skip the input element, if not inertable or to be skipped.\n\n          if (sibling === element || !this[_isInertable](sibling) || toSkip && toSkip.has(sibling)) {\n            continue;\n          } // Should be collected since already inerted.\n\n\n          if (toKeepInert && sibling.inert) {\n            toKeepInert.add(sibling);\n          } else {\n            sibling.inert = true;\n            inertedSiblings.add(sibling);\n          }\n        } // Store the siblings that were inerted.\n\n\n        element[_siblingsToRestore] = inertedSiblings; // Observe only immediate children mutations on the parent.\n\n        const mo = new MutationObserver(this[_handleMutations].bind(this));\n        element[_parentMO] = mo;\n        let parentToObserve = parent; // If we're using the ShadyDOM polyfill, then our parent could be a\n        // shady root, which is an object that acts like a ShadowRoot, but isn't\n        // actually a node in the real DOM. Observe the real DOM parent instead.\n\n        const maybeShadyRoot = parentToObserve;\n\n        if (maybeShadyRoot.__shady && maybeShadyRoot.host) {\n          parentToObserve = maybeShadyRoot.host;\n        }\n\n        mo.observe(parentToObserve, {\n          childList: true\n        });\n      }\n    }\n    /**\n     * Handles newly added/removed nodes by toggling their inertness.\n     * It also checks if the current top Blocking Element has been removed,\n     * notifying and removing it.\n     */\n\n\n    [_handleMutations](mutations) {\n      const parents = this[_topElParents];\n      const toKeepInert = this[_alreadyInertElements];\n\n      for (const mutation of mutations) {\n        // If the target is a shadowRoot, get its host as we skip shadowRoots when\n        // computing _topElParents.\n        const target = mutation.target.host || mutation.target;\n        const idx = target === document.body ? parents.length : parents.indexOf(target);\n        const inertedChild = parents[idx - 1];\n        const inertedSiblings = inertedChild[_siblingsToRestore]; // To restore.\n\n        for (let i = 0; i < mutation.removedNodes.length; i++) {\n          const sibling = mutation.removedNodes[i];\n\n          if (sibling === inertedChild) {\n            console.info('Detected removal of the top Blocking Element.');\n            this.pop();\n            return;\n          }\n\n          if (inertedSiblings.has(sibling)) {\n            sibling.inert = false;\n            inertedSiblings.delete(sibling);\n          }\n        } // To inert.\n\n\n        for (let i = 0; i < mutation.addedNodes.length; i++) {\n          const sibling = mutation.addedNodes[i];\n\n          if (!this[_isInertable](sibling)) {\n            continue;\n          }\n\n          if (toKeepInert && sibling.inert) {\n            toKeepInert.add(sibling);\n          } else {\n            sibling.inert = true;\n            inertedSiblings.add(sibling);\n          }\n        }\n      }\n    }\n    /**\n     * Returns if the element is inertable.\n     */\n\n\n    [_isInertable](element) {\n      return false === /^(style|template|script)$/.test(element.localName);\n    }\n    /**\n     * Returns the list of newParents of an element, starting from element\n     * (included) up to `document.body` (excluded).\n     */\n\n\n    [_getParents](element) {\n      const parents = [];\n      let current = element; // Stop to body.\n\n      while (current && current !== document.body) {\n        // Skip shadow roots.\n        if (current.nodeType === Node.ELEMENT_NODE) {\n          parents.push(current);\n        } // ShadowDom v1\n\n\n        if (current.assignedSlot) {\n          // Collect slots from deepest slot to top.\n          while (current = current.assignedSlot) {\n            parents.push(current);\n          } // Continue the search on the top slot.\n\n\n          current = parents.pop();\n          continue;\n        }\n\n        current = current.parentNode || current.host;\n      }\n\n      return parents;\n    }\n    /**\n     * Returns the distributed children of the element's shadow root.\n     * Returns null if the element doesn't have a shadow root.\n     */\n\n\n    [_getDistributedChildren](element) {\n      const shadowRoot = element.shadowRoot;\n\n      if (!shadowRoot) {\n        return null;\n      }\n\n      const result = new Set();\n      let i;\n      let j;\n      let nodes;\n      const slots = shadowRoot.querySelectorAll('slot');\n\n      if (slots.length && slots[0].assignedNodes) {\n        for (i = 0; i < slots.length; i++) {\n          nodes = slots[i].assignedNodes({\n            flatten: true\n          });\n\n          for (j = 0; j < nodes.length; j++) {\n            if (nodes[j].nodeType === Node.ELEMENT_NODE) {\n              result.add(nodes[j]);\n            }\n          }\n        } // No need to search for <content>.\n\n      }\n\n      return result;\n    }\n\n  }\n\n  document.$blockingElements = new BlockingElementsImpl();\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/blocking-elements/dist/blocking-elements.js\n");

/***/ }),

/***/ "./node_modules/wicg-inert/src/inert.js":
/*!**********************************************!*\
  !*** ./node_modules/wicg-inert/src/inert.js ***!
  \**********************************************/
/***/ (() => {

eval("/**\n * This work is licensed under the W3C Software and Document License\n * (http://www.w3.org/Consortium/Legal/2015/copyright-software-and-document).\n */\n// Convenience function for converting NodeLists.\n\n/** @type {typeof Array.prototype.slice} */\nconst slice = Array.prototype.slice;\n/**\n * IE has a non-standard name for \"matches\".\n * @type {typeof Element.prototype.matches}\n */\n\nconst matches = Element.prototype.matches || Element.prototype.msMatchesSelector;\n/** @type {string} */\n\nconst _focusableElementsString = ['a[href]', 'area[href]', 'input:not([disabled])', 'select:not([disabled])', 'textarea:not([disabled])', 'button:not([disabled])', 'iframe', 'object', 'embed', '[contenteditable]'].join(',');\n/**\n * `InertRoot` manages a single inert subtree, i.e. a DOM subtree whose root element has an `inert`\n * attribute.\n *\n * Its main functions are:\n *\n * - to create and maintain a set of managed `InertNode`s, including when mutations occur in the\n *   subtree. The `makeSubtreeUnfocusable()` method handles collecting `InertNode`s via registering\n *   each focusable node in the subtree with the singleton `InertManager` which manages all known\n *   focusable nodes within inert subtrees. `InertManager` ensures that a single `InertNode`\n *   instance exists for each focusable node which has at least one inert root as an ancestor.\n *\n * - to notify all managed `InertNode`s when this subtree stops being inert (i.e. when the `inert`\n *   attribute is removed from the root node). This is handled in the destructor, which calls the\n *   `deregister` method on `InertManager` for each managed inert node.\n */\n\n\nclass InertRoot {\n  /**\n   * @param {!Element} rootElement The Element at the root of the inert subtree.\n   * @param {!InertManager} inertManager The global singleton InertManager object.\n   */\n  constructor(rootElement, inertManager) {\n    /** @type {!InertManager} */\n    this._inertManager = inertManager;\n    /** @type {!Element} */\n\n    this._rootElement = rootElement;\n    /**\n     * @type {!Set<!InertNode>}\n     * All managed focusable nodes in this InertRoot's subtree.\n     */\n\n    this._managedNodes = new Set(); // Make the subtree hidden from assistive technology\n\n    if (this._rootElement.hasAttribute('aria-hidden')) {\n      /** @type {?string} */\n      this._savedAriaHidden = this._rootElement.getAttribute('aria-hidden');\n    } else {\n      this._savedAriaHidden = null;\n    }\n\n    this._rootElement.setAttribute('aria-hidden', 'true'); // Make all focusable elements in the subtree unfocusable and add them to _managedNodes\n\n\n    this._makeSubtreeUnfocusable(this._rootElement); // Watch for:\n    // - any additions in the subtree: make them unfocusable too\n    // - any removals from the subtree: remove them from this inert root's managed nodes\n    // - attribute changes: if `tabindex` is added, or removed from an intrinsically focusable\n    //   element, make that node a managed node.\n\n\n    this._observer = new MutationObserver(this._onMutation.bind(this));\n\n    this._observer.observe(this._rootElement, {\n      attributes: true,\n      childList: true,\n      subtree: true\n    });\n  }\n  /**\n   * Call this whenever this object is about to become obsolete.  This unwinds all of the state\n   * stored in this object and updates the state of all of the managed nodes.\n   */\n\n\n  destructor() {\n    this._observer.disconnect();\n\n    if (this._rootElement) {\n      if (this._savedAriaHidden !== null) {\n        this._rootElement.setAttribute('aria-hidden', this._savedAriaHidden);\n      } else {\n        this._rootElement.removeAttribute('aria-hidden');\n      }\n    }\n\n    this._managedNodes.forEach(function (inertNode) {\n      this._unmanageNode(inertNode.node);\n    }, this); // Note we cast the nulls to the ANY type here because:\n    // 1) We want the class properties to be declared as non-null, or else we\n    //    need even more casts throughout this code. All bets are off if an\n    //    instance has been destroyed and a method is called.\n    // 2) We don't want to cast \"this\", because we want type-aware optimizations\n    //    to know which properties we're setting.\n\n\n    this._observer = null;\n    this._rootElement = null;\n    this._managedNodes = null;\n    this._inertManager = null;\n  }\n  /**\n   * @return {!Set<!InertNode>} A copy of this InertRoot's managed nodes set.\n   */\n\n\n  get managedNodes() {\n    return new Set(this._managedNodes);\n  }\n  /** @return {boolean} */\n\n\n  get hasSavedAriaHidden() {\n    return this._savedAriaHidden !== null;\n  }\n  /** @param {?string} ariaHidden */\n\n\n  set savedAriaHidden(ariaHidden) {\n    this._savedAriaHidden = ariaHidden;\n  }\n  /** @return {?string} */\n\n\n  get savedAriaHidden() {\n    return this._savedAriaHidden;\n  }\n  /**\n   * @param {!Node} startNode\n   */\n\n\n  _makeSubtreeUnfocusable(startNode) {\n    composedTreeWalk(startNode, node => this._visitNode(node));\n    let activeElement = document.activeElement;\n\n    if (!document.body.contains(startNode)) {\n      // startNode may be in shadow DOM, so find its nearest shadowRoot to get the activeElement.\n      let node = startNode;\n      /** @type {!ShadowRoot|undefined} */\n\n      let root = undefined;\n\n      while (node) {\n        if (node.nodeType === Node.DOCUMENT_FRAGMENT_NODE) {\n          root = node;\n          break;\n        }\n\n        node = node.parentNode;\n      }\n\n      if (root) {\n        activeElement = root.activeElement;\n      }\n    }\n\n    if (startNode.contains(activeElement)) {\n      activeElement.blur(); // In IE11, if an element is already focused, and then set to tabindex=-1\n      // calling blur() will not actually move the focus.\n      // To work around this we call focus() on the body instead.\n\n      if (activeElement === document.activeElement) {\n        document.body.focus();\n      }\n    }\n  }\n  /**\n   * @param {!Node} node\n   */\n\n\n  _visitNode(node) {\n    if (node.nodeType !== Node.ELEMENT_NODE) {\n      return;\n    }\n\n    const element = node; // If a descendant inert root becomes un-inert, its descendants will still be inert because of\n    // this inert root, so all of its managed nodes need to be adopted by this InertRoot.\n\n    if (element !== this._rootElement && element.hasAttribute('inert')) {\n      this._adoptInertRoot(element);\n    }\n\n    if (matches.call(element, _focusableElementsString) || element.hasAttribute('tabindex')) {\n      this._manageNode(element);\n    }\n  }\n  /**\n   * Register the given node with this InertRoot and with InertManager.\n   * @param {!Node} node\n   */\n\n\n  _manageNode(node) {\n    const inertNode = this._inertManager.register(node, this);\n\n    this._managedNodes.add(inertNode);\n  }\n  /**\n   * Unregister the given node with this InertRoot and with InertManager.\n   * @param {!Node} node\n   */\n\n\n  _unmanageNode(node) {\n    const inertNode = this._inertManager.deregister(node, this);\n\n    if (inertNode) {\n      this._managedNodes.delete(inertNode);\n    }\n  }\n  /**\n   * Unregister the entire subtree starting at `startNode`.\n   * @param {!Node} startNode\n   */\n\n\n  _unmanageSubtree(startNode) {\n    composedTreeWalk(startNode, node => this._unmanageNode(node));\n  }\n  /**\n   * If a descendant node is found with an `inert` attribute, adopt its managed nodes.\n   * @param {!Element} node\n   */\n\n\n  _adoptInertRoot(node) {\n    let inertSubroot = this._inertManager.getInertRoot(node); // During initialisation this inert root may not have been registered yet,\n    // so register it now if need be.\n\n\n    if (!inertSubroot) {\n      this._inertManager.setInert(node, true);\n\n      inertSubroot = this._inertManager.getInertRoot(node);\n    }\n\n    inertSubroot.managedNodes.forEach(function (savedInertNode) {\n      this._manageNode(savedInertNode.node);\n    }, this);\n  }\n  /**\n   * Callback used when mutation observer detects subtree additions, removals, or attribute changes.\n   * @param {!Array<!MutationRecord>} records\n   * @param {!MutationObserver} self\n   */\n\n\n  _onMutation(records, self) {\n    records.forEach(function (record) {\n      const target = record.target;\n\n      if (record.type === 'childList') {\n        // Manage added nodes\n        slice.call(record.addedNodes).forEach(function (node) {\n          this._makeSubtreeUnfocusable(node);\n        }, this); // Un-manage removed nodes\n\n        slice.call(record.removedNodes).forEach(function (node) {\n          this._unmanageSubtree(node);\n        }, this);\n      } else if (record.type === 'attributes') {\n        if (record.attributeName === 'tabindex') {\n          // Re-initialise inert node if tabindex changes\n          this._manageNode(target);\n        } else if (target !== this._rootElement && record.attributeName === 'inert' && target.hasAttribute('inert')) {\n          // If a new inert root is added, adopt its managed nodes and make sure it knows about the\n          // already managed nodes from this inert subroot.\n          this._adoptInertRoot(target);\n\n          const inertSubroot = this._inertManager.getInertRoot(target);\n\n          this._managedNodes.forEach(function (managedNode) {\n            if (target.contains(managedNode.node)) {\n              inertSubroot._manageNode(managedNode.node);\n            }\n          });\n        }\n      }\n    }, this);\n  }\n\n}\n/**\n * `InertNode` initialises and manages a single inert node.\n * A node is inert if it is a descendant of one or more inert root elements.\n *\n * On construction, `InertNode` saves the existing `tabindex` value for the node, if any, and\n * either removes the `tabindex` attribute or sets it to `-1`, depending on whether the element\n * is intrinsically focusable or not.\n *\n * `InertNode` maintains a set of `InertRoot`s which are descendants of this `InertNode`. When an\n * `InertRoot` is destroyed, and calls `InertManager.deregister()`, the `InertManager` notifies the\n * `InertNode` via `removeInertRoot()`, which in turn destroys the `InertNode` if no `InertRoot`s\n * remain in the set. On destruction, `InertNode` reinstates the stored `tabindex` if one exists,\n * or removes the `tabindex` attribute if the element is intrinsically focusable.\n */\n\n\nclass InertNode {\n  /**\n   * @param {!Node} node A focusable element to be made inert.\n   * @param {!InertRoot} inertRoot The inert root element associated with this inert node.\n   */\n  constructor(node, inertRoot) {\n    /** @type {!Node} */\n    this._node = node;\n    /** @type {boolean} */\n\n    this._overrodeFocusMethod = false;\n    /**\n     * @type {!Set<!InertRoot>} The set of descendant inert roots.\n     *    If and only if this set becomes empty, this node is no longer inert.\n     */\n\n    this._inertRoots = new Set([inertRoot]);\n    /** @type {?number} */\n\n    this._savedTabIndex = null;\n    /** @type {boolean} */\n\n    this._destroyed = false; // Save any prior tabindex info and make this node untabbable\n\n    this.ensureUntabbable();\n  }\n  /**\n   * Call this whenever this object is about to become obsolete.\n   * This makes the managed node focusable again and deletes all of the previously stored state.\n   */\n\n\n  destructor() {\n    this._throwIfDestroyed();\n\n    if (this._node && this._node.nodeType === Node.ELEMENT_NODE) {\n      const element = this._node;\n\n      if (this._savedTabIndex !== null) {\n        element.setAttribute('tabindex', this._savedTabIndex);\n      } else {\n        element.removeAttribute('tabindex');\n      } // Use `delete` to restore native focus method.\n\n\n      if (this._overrodeFocusMethod) {\n        delete element.focus;\n      }\n    } // See note in InertRoot.destructor for why we cast these nulls to ANY.\n\n\n    this._node = null;\n    this._inertRoots = null;\n    this._destroyed = true;\n  }\n  /**\n   * @type {boolean} Whether this object is obsolete because the managed node is no longer inert.\n   * If the object has been destroyed, any attempt to access it will cause an exception.\n   */\n\n\n  get destroyed() {\n    return (\n      /** @type {!InertNode} */\n      this._destroyed\n    );\n  }\n  /**\n   * Throw if user tries to access destroyed InertNode.\n   */\n\n\n  _throwIfDestroyed() {\n    if (this.destroyed) {\n      throw new Error('Trying to access destroyed InertNode');\n    }\n  }\n  /** @return {boolean} */\n\n\n  get hasSavedTabIndex() {\n    return this._savedTabIndex !== null;\n  }\n  /** @return {!Node} */\n\n\n  get node() {\n    this._throwIfDestroyed();\n\n    return this._node;\n  }\n  /** @param {?number} tabIndex */\n\n\n  set savedTabIndex(tabIndex) {\n    this._throwIfDestroyed();\n\n    this._savedTabIndex = tabIndex;\n  }\n  /** @return {?number} */\n\n\n  get savedTabIndex() {\n    this._throwIfDestroyed();\n\n    return this._savedTabIndex;\n  }\n  /** Save the existing tabindex value and make the node untabbable and unfocusable */\n\n\n  ensureUntabbable() {\n    if (this.node.nodeType !== Node.ELEMENT_NODE) {\n      return;\n    }\n\n    const element = this.node;\n\n    if (matches.call(element, _focusableElementsString)) {\n      if (\n      /** @type {!HTMLElement} */\n      element.tabIndex === -1 && this.hasSavedTabIndex) {\n        return;\n      }\n\n      if (element.hasAttribute('tabindex')) {\n        this._savedTabIndex =\n        /** @type {!HTMLElement} */\n        element.tabIndex;\n      }\n\n      element.setAttribute('tabindex', '-1');\n\n      if (element.nodeType === Node.ELEMENT_NODE) {\n        element.focus = function () {};\n\n        this._overrodeFocusMethod = true;\n      }\n    } else if (element.hasAttribute('tabindex')) {\n      this._savedTabIndex =\n      /** @type {!HTMLElement} */\n      element.tabIndex;\n      element.removeAttribute('tabindex');\n    }\n  }\n  /**\n   * Add another inert root to this inert node's set of managing inert roots.\n   * @param {!InertRoot} inertRoot\n   */\n\n\n  addInertRoot(inertRoot) {\n    this._throwIfDestroyed();\n\n    this._inertRoots.add(inertRoot);\n  }\n  /**\n   * Remove the given inert root from this inert node's set of managing inert roots.\n   * If the set of managing inert roots becomes empty, this node is no longer inert,\n   * so the object should be destroyed.\n   * @param {!InertRoot} inertRoot\n   */\n\n\n  removeInertRoot(inertRoot) {\n    this._throwIfDestroyed();\n\n    this._inertRoots.delete(inertRoot);\n\n    if (this._inertRoots.size === 0) {\n      this.destructor();\n    }\n  }\n\n}\n/**\n * InertManager is a per-document singleton object which manages all inert roots and nodes.\n *\n * When an element becomes an inert root by having an `inert` attribute set and/or its `inert`\n * property set to `true`, the `setInert` method creates an `InertRoot` object for the element.\n * The `InertRoot` in turn registers itself as managing all of the element's focusable descendant\n * nodes via the `register()` method. The `InertManager` ensures that a single `InertNode` instance\n * is created for each such node, via the `_managedNodes` map.\n */\n\n\nclass InertManager {\n  /**\n   * @param {!Document} document\n   */\n  constructor(document) {\n    if (!document) {\n      throw new Error('Missing required argument; InertManager needs to wrap a document.');\n    }\n    /** @type {!Document} */\n\n\n    this._document = document;\n    /**\n     * All managed nodes known to this InertManager. In a map to allow looking up by Node.\n     * @type {!Map<!Node, !InertNode>}\n     */\n\n    this._managedNodes = new Map();\n    /**\n     * All inert roots known to this InertManager. In a map to allow looking up by Node.\n     * @type {!Map<!Node, !InertRoot>}\n     */\n\n    this._inertRoots = new Map();\n    /**\n     * Observer for mutations on `document.body`.\n     * @type {!MutationObserver}\n     */\n\n    this._observer = new MutationObserver(this._watchForInert.bind(this)); // Add inert style.\n\n    addInertStyle(document.head || document.body || document.documentElement); // Wait for document to be loaded.\n\n    if (document.readyState === 'loading') {\n      document.addEventListener('DOMContentLoaded', this._onDocumentLoaded.bind(this));\n    } else {\n      this._onDocumentLoaded();\n    }\n  }\n  /**\n   * Set whether the given element should be an inert root or not.\n   * @param {!Element} root\n   * @param {boolean} inert\n   */\n\n\n  setInert(root, inert) {\n    if (inert) {\n      if (this._inertRoots.has(root)) {\n        // element is already inert\n        return;\n      }\n\n      const inertRoot = new InertRoot(root, this);\n      root.setAttribute('inert', '');\n\n      this._inertRoots.set(root, inertRoot); // If not contained in the document, it must be in a shadowRoot.\n      // Ensure inert styles are added there.\n\n\n      if (!this._document.body.contains(root)) {\n        let parent = root.parentNode;\n\n        while (parent) {\n          if (parent.nodeType === 11) {\n            addInertStyle(parent);\n          }\n\n          parent = parent.parentNode;\n        }\n      }\n    } else {\n      if (!this._inertRoots.has(root)) {\n        // element is already non-inert\n        return;\n      }\n\n      const inertRoot = this._inertRoots.get(root);\n\n      inertRoot.destructor();\n\n      this._inertRoots.delete(root);\n\n      root.removeAttribute('inert');\n    }\n  }\n  /**\n   * Get the InertRoot object corresponding to the given inert root element, if any.\n   * @param {!Node} element\n   * @return {!InertRoot|undefined}\n   */\n\n\n  getInertRoot(element) {\n    return this._inertRoots.get(element);\n  }\n  /**\n   * Register the given InertRoot as managing the given node.\n   * In the case where the node has a previously existing inert root, this inert root will\n   * be added to its set of inert roots.\n   * @param {!Node} node\n   * @param {!InertRoot} inertRoot\n   * @return {!InertNode} inertNode\n   */\n\n\n  register(node, inertRoot) {\n    let inertNode = this._managedNodes.get(node);\n\n    if (inertNode !== undefined) {\n      // node was already in an inert subtree\n      inertNode.addInertRoot(inertRoot);\n    } else {\n      inertNode = new InertNode(node, inertRoot);\n    }\n\n    this._managedNodes.set(node, inertNode);\n\n    return inertNode;\n  }\n  /**\n   * De-register the given InertRoot as managing the given inert node.\n   * Removes the inert root from the InertNode's set of managing inert roots, and remove the inert\n   * node from the InertManager's set of managed nodes if it is destroyed.\n   * If the node is not currently managed, this is essentially a no-op.\n   * @param {!Node} node\n   * @param {!InertRoot} inertRoot\n   * @return {?InertNode} The potentially destroyed InertNode associated with this node, if any.\n   */\n\n\n  deregister(node, inertRoot) {\n    const inertNode = this._managedNodes.get(node);\n\n    if (!inertNode) {\n      return null;\n    }\n\n    inertNode.removeInertRoot(inertRoot);\n\n    if (inertNode.destroyed) {\n      this._managedNodes.delete(node);\n    }\n\n    return inertNode;\n  }\n  /**\n   * Callback used when document has finished loading.\n   */\n\n\n  _onDocumentLoaded() {\n    // Find all inert roots in document and make them actually inert.\n    const inertElements = slice.call(this._document.querySelectorAll('[inert]'));\n    inertElements.forEach(function (inertElement) {\n      this.setInert(inertElement, true);\n    }, this); // Comment this out to use programmatic API only.\n\n    this._observer.observe(this._document.body, {\n      attributes: true,\n      subtree: true,\n      childList: true\n    });\n  }\n  /**\n   * Callback used when mutation observer detects attribute changes.\n   * @param {!Array<!MutationRecord>} records\n   * @param {!MutationObserver} self\n   */\n\n\n  _watchForInert(records, self) {\n    const _this = this;\n\n    records.forEach(function (record) {\n      switch (record.type) {\n        case 'childList':\n          slice.call(record.addedNodes).forEach(function (node) {\n            if (node.nodeType !== Node.ELEMENT_NODE) {\n              return;\n            }\n\n            const inertElements = slice.call(node.querySelectorAll('[inert]'));\n\n            if (matches.call(node, '[inert]')) {\n              inertElements.unshift(node);\n            }\n\n            inertElements.forEach(function (inertElement) {\n              this.setInert(inertElement, true);\n            }, _this);\n          }, _this);\n          break;\n\n        case 'attributes':\n          if (record.attributeName !== 'inert') {\n            return;\n          }\n\n          const target = record.target;\n          const inert = target.hasAttribute('inert');\n\n          _this.setInert(target, inert);\n\n          break;\n      }\n    }, this);\n  }\n\n}\n/**\n * Recursively walk the composed tree from |node|.\n * @param {!Node} node\n * @param {(function (!Element))=} callback Callback to be called for each element traversed,\n *     before descending into child nodes.\n * @param {?ShadowRoot=} shadowRootAncestor The nearest ShadowRoot ancestor, if any.\n */\n\n\nfunction composedTreeWalk(node, callback, shadowRootAncestor) {\n  if (node.nodeType == Node.ELEMENT_NODE) {\n    const element = node;\n\n    if (callback) {\n      callback(element);\n    } // Descend into node:\n    // If it has a ShadowRoot, ignore all child elements - these will be picked\n    // up by the <content> or <shadow> elements. Descend straight into the\n    // ShadowRoot.\n\n\n    const shadowRoot =\n    /** @type {!HTMLElement} */\n    element.shadowRoot;\n\n    if (shadowRoot) {\n      composedTreeWalk(shadowRoot, callback, shadowRoot);\n      return;\n    } // If it is a <content> element, descend into distributed elements - these\n    // are elements from outside the shadow root which are rendered inside the\n    // shadow DOM.\n\n\n    if (element.localName == 'content') {\n      const content = element; // Verifies if ShadowDom v0 is supported.\n\n      const distributedNodes = content.getDistributedNodes ? content.getDistributedNodes() : [];\n\n      for (let i = 0; i < distributedNodes.length; i++) {\n        composedTreeWalk(distributedNodes[i], callback, shadowRootAncestor);\n      }\n\n      return;\n    } // If it is a <slot> element, descend into assigned nodes - these\n    // are elements from outside the shadow root which are rendered inside the\n    // shadow DOM.\n\n\n    if (element.localName == 'slot') {\n      const slot = element; // Verify if ShadowDom v1 is supported.\n\n      const distributedNodes = slot.assignedNodes ? slot.assignedNodes({\n        flatten: true\n      }) : [];\n\n      for (let i = 0; i < distributedNodes.length; i++) {\n        composedTreeWalk(distributedNodes[i], callback, shadowRootAncestor);\n      }\n\n      return;\n    }\n  } // If it is neither the parent of a ShadowRoot, a <content> element, a <slot>\n  // element, nor a <shadow> element recurse normally.\n\n\n  let child = node.firstChild;\n\n  while (child != null) {\n    composedTreeWalk(child, callback, shadowRootAncestor);\n    child = child.nextSibling;\n  }\n}\n/**\n * Adds a style element to the node containing the inert specific styles\n * @param {!Node} node\n */\n\n\nfunction addInertStyle(node) {\n  if (node.querySelector('style#inert-style')) {\n    return;\n  }\n\n  const style = document.createElement('style');\n  style.setAttribute('id', 'inert-style');\n  style.textContent = '\\n' + '[inert] {\\n' + '  pointer-events: none;\\n' + '  cursor: default;\\n' + '}\\n' + '\\n' + '[inert], [inert] * {\\n' + '  user-select: none;\\n' + '  -webkit-user-select: none;\\n' + '  -moz-user-select: none;\\n' + '  -ms-user-select: none;\\n' + '}\\n';\n  node.appendChild(style);\n}\n/** @type {!InertManager} */\n\n\nconst inertManager = new InertManager(document);\n\nif (!Element.prototype.hasOwnProperty('inert')) {\n  Object.defineProperty(Element.prototype, 'inert', {\n    enumerable: true,\n\n    /** @this {!Element} */\n    get: function () {\n      return this.hasAttribute('inert');\n    },\n\n    /** @this {!Element} */\n    set: function (inert) {\n      inertManager.setInert(this, inert);\n    }\n  });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/wicg-inert/src/inert.js\n");

/***/ })

}]);