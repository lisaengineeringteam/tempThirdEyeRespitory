"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkhome_assistant_frontend"] = self["webpackChunkhome_assistant_frontend"] || []).push([["vendors-node_modules_material_mwc-formfield_mwc-formfield_js-node_modules_polymer_iron-icon_i-5e0f93"],{

/***/ "./node_modules/@material/mwc-formfield/mwc-formfield.js":
/*!***************************************************************!*\
  !*** ./node_modules/@material/mwc-formfield/mwc-formfield.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Formfield\": () => (/* binding */ Formfield)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.es6.js\");\n/* harmony import */ var lit_decorators_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lit/decorators.js */ \"./node_modules/lit/decorators.js\");\n/* harmony import */ var _mwc_formfield_base__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./mwc-formfield-base */ \"./node_modules/@material/mwc-formfield/mwc-formfield-base.js\");\n/* harmony import */ var _mwc_formfield_css__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./mwc-formfield.css */ \"./node_modules/@material/mwc-formfield/mwc-formfield.css.js\");\n/**\n * @license\n * Copyright 2018 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n // Style preference for leading underscores.\n// tslint:disable:strip-private-property-underscore\n\n\n\n\nlet Formfield = class Formfield extends _mwc_formfield_base__WEBPACK_IMPORTED_MODULE_1__.FormfieldBase {};\nFormfield.styles = [_mwc_formfield_css__WEBPACK_IMPORTED_MODULE_2__.styles];\nFormfield = (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([(0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_0__.customElement)('mwc-formfield')], Formfield);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsL213Yy1mb3JtZmllbGQvbXdjLWZvcm1maWVsZC5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBOzs7O0FBSUE7QUFFQTtBQUNBOztBQUVBO0FBRUE7QUFDQTtBQVNBO0FBQ0E7QUFEQSIsInNvdXJjZXMiOlsid2VicGFjazovL2hvbWUtYXNzaXN0YW50LWZyb250ZW5kL213Yy1mb3JtZmllbGQudHM/OTViYiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOCBHb29nbGUgTExDXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQXBhY2hlLTIuMFxuICovXG5cbi8vIFN0eWxlIHByZWZlcmVuY2UgZm9yIGxlYWRpbmcgdW5kZXJzY29yZXMuXG4vLyB0c2xpbnQ6ZGlzYWJsZTpzdHJpcC1wcml2YXRlLXByb3BlcnR5LXVuZGVyc2NvcmVcblxuaW1wb3J0IHtjdXN0b21FbGVtZW50fSBmcm9tICdsaXQvZGVjb3JhdG9ycy5qcyc7XG5cbmltcG9ydCB7Rm9ybWZpZWxkQmFzZX0gZnJvbSAnLi9td2MtZm9ybWZpZWxkLWJhc2UnO1xuaW1wb3J0IHtzdHlsZXN9IGZyb20gJy4vbXdjLWZvcm1maWVsZC5jc3MnO1xuXG5kZWNsYXJlIGdsb2JhbCB7XG4gIGludGVyZmFjZSBIVE1MRWxlbWVudFRhZ05hbWVNYXAge1xuICAgICdtd2MtZm9ybWZpZWxkJzogRm9ybWZpZWxkO1xuICB9XG59XG5cbkBjdXN0b21FbGVtZW50KCdtd2MtZm9ybWZpZWxkJylcbmV4cG9ydCBjbGFzcyBGb3JtZmllbGQgZXh0ZW5kcyBGb3JtZmllbGRCYXNlIHtcbiAgc3RhdGljIG92ZXJyaWRlIHN0eWxlcyA9IFtzdHlsZXNdO1xufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@material/mwc-formfield/mwc-formfield.js\n");

/***/ }),

/***/ "./node_modules/@polymer/iron-icon/iron-icon.js":
/*!******************************************************!*\
  !*** ./node_modules/@polymer/iron-icon/iron-icon.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _polymer_iron_flex_layout_iron_flex_layout_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @polymer/iron-flex-layout/iron-flex-layout.js */ \"./node_modules/@polymer/iron-flex-layout/iron-flex-layout.js\");\n/* harmony import */ var _polymer_iron_meta_iron_meta_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @polymer/iron-meta/iron-meta.js */ \"./node_modules/@polymer/iron-meta/iron-meta.js\");\n/* harmony import */ var _polymer_polymer_lib_legacy_polymer_fn_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @polymer/polymer/lib/legacy/polymer-fn.js */ \"./node_modules/@polymer/polymer/lib/legacy/polymer-fn.js\");\n/* harmony import */ var _polymer_polymer_lib_legacy_polymer_dom_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @polymer/polymer/lib/legacy/polymer.dom.js */ \"./node_modules/@polymer/polymer/lib/legacy/polymer.dom.js\");\n/* harmony import */ var _polymer_polymer_lib_utils_html_tag_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @polymer/polymer/lib/utils/html-tag.js */ \"./node_modules/@polymer/polymer/lib/utils/html-tag.js\");\n/* harmony import */ var _polymer_polymer_polymer_legacy_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @polymer/polymer/polymer-legacy.js */ \"./node_modules/@polymer/polymer/polymer-legacy.js\");\n/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\n\n\n\n\n\n\n/**\n\nThe `iron-icon` element displays an icon. By default an icon renders as a 24px\nsquare.\n\nExample using src:\n\n    <iron-icon src=\"star.png\"></iron-icon>\n\nExample setting size to 32px x 32px:\n\n    <iron-icon class=\"big\" src=\"big_star.png\"></iron-icon>\n\n    <style is=\"custom-style\">\n      .big {\n        --iron-icon-height: 32px;\n        --iron-icon-width: 32px;\n      }\n    </style>\n\nThe iron elements include several sets of icons. To use the default set of\nicons, import `iron-icons.js` and use the `icon` attribute to specify an icon:\n\n    <script type=\"module\">\n      import \"@polymer/iron-icons/iron-icons.js\";\n    </script>\n\n    <iron-icon icon=\"menu\"></iron-icon>\n\nTo use a different built-in set of icons, import the specific\n`iron-icons/<iconset>-icons.js`, and specify the icon as `<iconset>:<icon>`.\nFor example, to use a communication icon, you would use:\n\n    <script type=\"module\">\n      import \"@polymer/iron-icons/communication-icons.js\";\n    </script>\n\n    <iron-icon icon=\"communication:email\"></iron-icon>\n\nYou can also create custom icon sets of bitmap or SVG icons.\n\nExample of using an icon named `cherry` from a custom iconset with the ID\n`fruit`:\n\n    <iron-icon icon=\"fruit:cherry\"></iron-icon>\n\nSee `<iron-iconset>` and `<iron-iconset-svg>` for more information about how to\ncreate a custom iconset.\n\nSee the `iron-icons` demo to see the icons available in the various iconsets.\n\n### Styling\n\nThe following custom properties are available for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--iron-icon` | Mixin applied to the icon | {}\n`--iron-icon-width` | Width of the icon | `24px`\n`--iron-icon-height` | Height of the icon | `24px`\n`--iron-icon-fill-color` | Fill color of the svg icon | `currentcolor`\n`--iron-icon-stroke-color` | Stroke color of the svg icon | none\n\n@group Iron Elements\n@element iron-icon\n@demo demo/index.html\n@hero hero.svg\n@homepage polymer.github.io\n*/\n\n(0,_polymer_polymer_lib_legacy_polymer_fn_js__WEBPACK_IMPORTED_MODULE_2__.Polymer)({\n  _template: _polymer_polymer_lib_utils_html_tag_js__WEBPACK_IMPORTED_MODULE_4__.html`\n    <style>\n      :host {\n        @apply --layout-inline;\n        @apply --layout-center-center;\n        position: relative;\n\n        vertical-align: middle;\n\n        fill: var(--iron-icon-fill-color, currentcolor);\n        stroke: var(--iron-icon-stroke-color, none);\n\n        width: var(--iron-icon-width, 24px);\n        height: var(--iron-icon-height, 24px);\n        @apply --iron-icon;\n      }\n\n      :host([hidden]) {\n        display: none;\n      }\n    </style>\n`,\n  is: 'iron-icon',\n  properties: {\n    /**\n     * The name of the icon to use. The name should be of the form:\n     * `iconset_name:icon_name`.\n     */\n    icon: {\n      type: String\n    },\n\n    /**\n     * The name of the theme to used, if one is specified by the\n     * iconset.\n     */\n    theme: {\n      type: String\n    },\n\n    /**\n     * If using iron-icon without an iconset, you can set the src to be\n     * the URL of an individual icon image file. Note that this will take\n     * precedence over a given icon attribute.\n     */\n    src: {\n      type: String\n    },\n\n    /**\n     * @type {!IronMeta}\n     */\n    _meta: {\n      value: _polymer_polymer_polymer_legacy_js__WEBPACK_IMPORTED_MODULE_5__.Base.create('iron-meta', {\n        type: 'iconset'\n      })\n    }\n  },\n  observers: ['_updateIcon(_meta, isAttached)', '_updateIcon(theme, isAttached)', '_srcChanged(src, isAttached)', '_iconChanged(icon, isAttached)'],\n  _DEFAULT_ICONSET: 'icons',\n  _iconChanged: function (icon) {\n    var parts = (icon || '').split(':');\n    this._iconName = parts.pop();\n    this._iconsetName = parts.pop() || this._DEFAULT_ICONSET;\n\n    this._updateIcon();\n  },\n  _srcChanged: function (src) {\n    this._updateIcon();\n  },\n  _usesIconset: function () {\n    return this.icon || !this.src;\n  },\n\n  /** @suppress {visibility} */\n  _updateIcon: function () {\n    if (this._usesIconset()) {\n      if (this._img && this._img.parentNode) {\n        (0,_polymer_polymer_lib_legacy_polymer_dom_js__WEBPACK_IMPORTED_MODULE_3__.dom)(this.root).removeChild(this._img);\n      }\n\n      if (this._iconName === '') {\n        if (this._iconset) {\n          this._iconset.removeIcon(this);\n        }\n      } else if (this._iconsetName && this._meta) {\n        this._iconset = this._meta.byKey(this._iconsetName);\n\n        if (this._iconset) {\n          this._iconset.applyIcon(this, this._iconName, this.theme);\n\n          this.unlisten(window, 'iron-iconset-added', '_updateIcon');\n        } else {\n          this.listen(window, 'iron-iconset-added', '_updateIcon');\n        }\n      }\n    } else {\n      if (this._iconset) {\n        this._iconset.removeIcon(this);\n      }\n\n      if (!this._img) {\n        this._img = document.createElement('img');\n        this._img.style.width = '100%';\n        this._img.style.height = '100%';\n        this._img.draggable = false;\n      }\n\n      this._img.src = this.src;\n      (0,_polymer_polymer_lib_legacy_polymer_dom_js__WEBPACK_IMPORTED_MODULE_3__.dom)(this.root).appendChild(this._img);\n    }\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@polymer/iron-icon/iron-icon.js\n");

/***/ }),

/***/ "./node_modules/@polymer/iron-meta/iron-meta.js":
/*!******************************************************!*\
  !*** ./node_modules/@polymer/iron-meta/iron-meta.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"IronMeta\": () => (/* binding */ IronMeta)\n/* harmony export */ });\n/* harmony import */ var _polymer_polymer_polymer_legacy_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @polymer/polymer/polymer-legacy.js */ \"./node_modules/@polymer/polymer/polymer-legacy.js\");\n/* harmony import */ var _polymer_polymer_lib_legacy_polymer_fn_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @polymer/polymer/lib/legacy/polymer-fn.js */ \"./node_modules/@polymer/polymer/lib/legacy/polymer-fn.js\");\n/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\n\n\nclass IronMeta {\n  /**\n   * @param {{\n   *   type: (string|null|undefined),\n   *   key: (string|null|undefined),\n   *   value: *,\n   * }=} options\n   */\n  constructor(options) {\n    IronMeta[' '](options);\n    /** @type {string} */\n\n    this.type = options && options.type || 'default';\n    /** @type {string|null|undefined} */\n\n    this.key = options && options.key;\n\n    if (options && 'value' in options) {\n      /** @type {*} */\n      this.value = options.value;\n    }\n  }\n  /** @return {*} */\n\n\n  get value() {\n    var type = this.type;\n    var key = this.key;\n\n    if (type && key) {\n      return IronMeta.types[type] && IronMeta.types[type][key];\n    }\n  }\n  /** @param {*} value */\n\n\n  set value(value) {\n    var type = this.type;\n    var key = this.key;\n\n    if (type && key) {\n      type = IronMeta.types[type] = IronMeta.types[type] || {};\n\n      if (value == null) {\n        delete type[key];\n      } else {\n        type[key] = value;\n      }\n    }\n  }\n  /** @return {!Array<*>} */\n\n\n  get list() {\n    var type = this.type;\n\n    if (type) {\n      var items = IronMeta.types[this.type];\n\n      if (!items) {\n        return [];\n      }\n\n      return Object.keys(items).map(function (key) {\n        return metaDatas[this.type][key];\n      }, this);\n    }\n  }\n  /**\n   * @param {string} key\n   * @return {*}\n   */\n\n\n  byKey(key) {\n    this.key = key;\n    return this.value;\n  }\n\n}\n; // This function is used to convince Closure not to remove constructor calls\n// for instances that are not held anywhere. For example, when\n// `new IronMeta({...})` is used only for the side effect of adding a value.\n\nIronMeta[' '] = function () {};\n\nIronMeta.types = {};\nvar metaDatas = IronMeta.types;\n/**\n`iron-meta` is a generic element you can use for sharing information across the\nDOM tree. It uses [monostate pattern](http://c2.com/cgi/wiki?MonostatePattern)\nsuch that any instance of iron-meta has access to the shared information. You\ncan use `iron-meta` to share whatever you want (or create an extension [like\nx-meta] for enhancements).\n\nThe `iron-meta` instances containing your actual data can be loaded in an\nimport, or constructed in any way you see fit. The only requirement is that you\ncreate them before you try to access them.\n\nExamples:\n\nIf I create an instance like this:\n\n    <iron-meta key=\"info\" value=\"foo/bar\"></iron-meta>\n\nNote that value=\"foo/bar\" is the metadata I've defined. I could define more\nattributes or use child nodes to define additional metadata.\n\nNow I can access that element (and it's metadata) from any iron-meta instance\nvia the byKey method, e.g.\n\n    meta.byKey('info');\n\nPure imperative form would be like:\n\n    document.createElement('iron-meta').byKey('info');\n\nOr, in a Polymer element, you can include a meta in your template:\n\n    <iron-meta id=\"meta\"></iron-meta>\n    ...\n    this.$.meta.byKey('info');\n\n@group Iron Elements\n@demo demo/index.html\n@element iron-meta\n*/\n\n(0,_polymer_polymer_lib_legacy_polymer_fn_js__WEBPACK_IMPORTED_MODULE_1__.Polymer)({\n  is: 'iron-meta',\n  properties: {\n    /**\n     * The type of meta-data.  All meta-data of the same type is stored\n     * together.\n     * @type {string}\n     */\n    type: {\n      type: String,\n      value: 'default'\n    },\n\n    /**\n     * The key used to store `value` under the `type` namespace.\n     * @type {?string}\n     */\n    key: {\n      type: String\n    },\n\n    /**\n     * The meta-data to store or retrieve.\n     * @type {*}\n     */\n    value: {\n      type: String,\n      notify: true\n    },\n\n    /**\n     * If true, `value` is set to the iron-meta instance itself.\n     */\n    self: {\n      type: Boolean,\n      observer: '_selfChanged'\n    },\n    __meta: {\n      type: Boolean,\n      computed: '__computeMeta(type, key, value)'\n    }\n  },\n  hostAttributes: {\n    hidden: true\n  },\n  __computeMeta: function (type, key, value) {\n    var meta = new IronMeta({\n      type: type,\n      key: key\n    });\n\n    if (value !== undefined && value !== meta.value) {\n      meta.value = value;\n    } else if (this.value !== meta.value) {\n      this.value = meta.value;\n    }\n\n    return meta;\n  },\n\n  get list() {\n    return this.__meta && this.__meta.list;\n  },\n\n  _selfChanged: function (self) {\n    if (self) {\n      this.value = this;\n    }\n  },\n\n  /**\n   * Retrieves meta data value by key.\n   *\n   * @method byKey\n   * @param {string} key The key of the meta-data to be returned.\n   * @return {*}\n   */\n  byKey: function (key) {\n    return new IronMeta({\n      type: this.type,\n      key: key\n    }).value;\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@polymer/iron-meta/iron-meta.js\n");

/***/ }),

/***/ "./node_modules/idb-keyval/dist/esm/index.js":
/*!***************************************************!*\
  !*** ./node_modules/idb-keyval/dist/esm/index.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"clear\": () => (/* binding */ clear),\n/* harmony export */   \"createStore\": () => (/* binding */ createStore),\n/* harmony export */   \"del\": () => (/* binding */ del),\n/* harmony export */   \"entries\": () => (/* binding */ entries),\n/* harmony export */   \"get\": () => (/* binding */ get),\n/* harmony export */   \"getMany\": () => (/* binding */ getMany),\n/* harmony export */   \"keys\": () => (/* binding */ keys),\n/* harmony export */   \"promisifyRequest\": () => (/* binding */ promisifyRequest),\n/* harmony export */   \"set\": () => (/* binding */ set),\n/* harmony export */   \"setMany\": () => (/* binding */ setMany),\n/* harmony export */   \"update\": () => (/* binding */ update),\n/* harmony export */   \"values\": () => (/* binding */ values)\n/* harmony export */ });\n/* harmony import */ var safari_14_idb_fix__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! safari-14-idb-fix */ \"./node_modules/safari-14-idb-fix/dist/esm/index.js\");\n\n\nfunction promisifyRequest(request) {\n  return new Promise((resolve, reject) => {\n    // @ts-ignore - file size hacks\n    request.oncomplete = request.onsuccess = () => resolve(request.result); // @ts-ignore - file size hacks\n\n\n    request.onabort = request.onerror = () => reject(request.error);\n  });\n}\n\nfunction createStore(dbName, storeName) {\n  const dbp = (0,safari_14_idb_fix__WEBPACK_IMPORTED_MODULE_0__[\"default\"])().then(() => {\n    const request = indexedDB.open(dbName);\n\n    request.onupgradeneeded = () => request.result.createObjectStore(storeName);\n\n    return promisifyRequest(request);\n  });\n  return (txMode, callback) => dbp.then(db => callback(db.transaction(storeName, txMode).objectStore(storeName)));\n}\n\nlet defaultGetStoreFunc;\n\nfunction defaultGetStore() {\n  if (!defaultGetStoreFunc) {\n    defaultGetStoreFunc = createStore('keyval-store', 'keyval');\n  }\n\n  return defaultGetStoreFunc;\n}\n/**\n * Get a value by its key.\n *\n * @param key\n * @param customStore Method to get a custom store. Use with caution (see the docs).\n */\n\n\nfunction get(key, customStore = defaultGetStore()) {\n  return customStore('readonly', store => promisifyRequest(store.get(key)));\n}\n/**\n * Set a value with a key.\n *\n * @param key\n * @param value\n * @param customStore Method to get a custom store. Use with caution (see the docs).\n */\n\n\nfunction set(key, value, customStore = defaultGetStore()) {\n  return customStore('readwrite', store => {\n    store.put(value, key);\n    return promisifyRequest(store.transaction);\n  });\n}\n/**\n * Set multiple values at once. This is faster than calling set() multiple times.\n * It's also atomic – if one of the pairs can't be added, none will be added.\n *\n * @param entries Array of entries, where each entry is an array of `[key, value]`.\n * @param customStore Method to get a custom store. Use with caution (see the docs).\n */\n\n\nfunction setMany(entries, customStore = defaultGetStore()) {\n  return customStore('readwrite', store => {\n    entries.forEach(entry => store.put(entry[1], entry[0]));\n    return promisifyRequest(store.transaction);\n  });\n}\n/**\n * Get multiple values by their keys\n *\n * @param keys\n * @param customStore Method to get a custom store. Use with caution (see the docs).\n */\n\n\nfunction getMany(keys, customStore = defaultGetStore()) {\n  return customStore('readonly', store => Promise.all(keys.map(key => promisifyRequest(store.get(key)))));\n}\n/**\n * Update a value. This lets you see the old value and update it as an atomic operation.\n *\n * @param key\n * @param updater A callback that takes the old value and returns a new value.\n * @param customStore Method to get a custom store. Use with caution (see the docs).\n */\n\n\nfunction update(key, updater, customStore = defaultGetStore()) {\n  return customStore('readwrite', store => // Need to create the promise manually.\n  // If I try to chain promises, the transaction closes in browsers\n  // that use a promise polyfill (IE10/11).\n  new Promise((resolve, reject) => {\n    store.get(key).onsuccess = function () {\n      try {\n        store.put(updater(this.result), key);\n        resolve(promisifyRequest(store.transaction));\n      } catch (err) {\n        reject(err);\n      }\n    };\n  }));\n}\n/**\n * Delete a particular key from the store.\n *\n * @param key\n * @param customStore Method to get a custom store. Use with caution (see the docs).\n */\n\n\nfunction del(key, customStore = defaultGetStore()) {\n  return customStore('readwrite', store => {\n    store.delete(key);\n    return promisifyRequest(store.transaction);\n  });\n}\n/**\n * Clear all values in the store.\n *\n * @param customStore Method to get a custom store. Use with caution (see the docs).\n */\n\n\nfunction clear(customStore = defaultGetStore()) {\n  return customStore('readwrite', store => {\n    store.clear();\n    return promisifyRequest(store.transaction);\n  });\n}\n\nfunction eachCursor(customStore, callback) {\n  return customStore('readonly', store => {\n    // This would be store.getAllKeys(), but it isn't supported by Edge or Safari.\n    // And openKeyCursor isn't supported by Safari.\n    store.openCursor().onsuccess = function () {\n      if (!this.result) return;\n      callback(this.result);\n      this.result.continue();\n    };\n\n    return promisifyRequest(store.transaction);\n  });\n}\n/**\n * Get all keys in the store.\n *\n * @param customStore Method to get a custom store. Use with caution (see the docs).\n */\n\n\nfunction keys(customStore = defaultGetStore()) {\n  const items = [];\n  return eachCursor(customStore, cursor => items.push(cursor.key)).then(() => items);\n}\n/**\n * Get all values in the store.\n *\n * @param customStore Method to get a custom store. Use with caution (see the docs).\n */\n\n\nfunction values(customStore = defaultGetStore()) {\n  const items = [];\n  return eachCursor(customStore, cursor => items.push(cursor.value)).then(() => items);\n}\n/**\n * Get all entries in the store. Each entry is an array of `[key, value]`.\n *\n * @param customStore Method to get a custom store. Use with caution (see the docs).\n */\n\n\nfunction entries(customStore = defaultGetStore()) {\n  const items = [];\n  return eachCursor(customStore, cursor => items.push([cursor.key, cursor.value])).then(() => items);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/idb-keyval/dist/esm/index.js\n");

/***/ }),

/***/ "./node_modules/safari-14-idb-fix/dist/esm/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/safari-14-idb-fix/dist/esm/index.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/**\n * https://bugs.webkit.org/show_bug.cgi?id=226547\n * Safari has a horrible bug where IDB requests can hang while the browser is starting up.\n * The only solution is to keep nudging it until it's awake.\n * This probably creates garbage, but garbage is better than totally failing.\n */\nfunction idbReady() {\n  const isSafari = !navigator.userAgentData && /Safari\\//.test(navigator.userAgent) && !/Chrom(e|ium)\\//.test(navigator.userAgent); // No point putting other browsers or older versions of Safari through this mess.\n\n  if (!isSafari || !indexedDB.databases) return Promise.resolve();\n  let intervalId;\n  return new Promise(resolve => {\n    const tryIdb = () => indexedDB.databases().finally(resolve);\n\n    intervalId = setInterval(tryIdb, 100);\n    tryIdb();\n  }).finally(() => clearInterval(intervalId));\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (idbReady);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvc2FmYXJpLTE0LWlkYi1maXgvZGlzdC9lc20vaW5kZXguanMuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBSUE7QUFFQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ob21lLWFzc2lzdGFudC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9zYWZhcmktMTQtaWRiLWZpeC9kaXN0L2VzbS9pbmRleC5qcz9kZmY0Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTIyNjU0N1xuICogU2FmYXJpIGhhcyBhIGhvcnJpYmxlIGJ1ZyB3aGVyZSBJREIgcmVxdWVzdHMgY2FuIGhhbmcgd2hpbGUgdGhlIGJyb3dzZXIgaXMgc3RhcnRpbmcgdXAuXG4gKiBUaGUgb25seSBzb2x1dGlvbiBpcyB0byBrZWVwIG51ZGdpbmcgaXQgdW50aWwgaXQncyBhd2FrZS5cbiAqIFRoaXMgcHJvYmFibHkgY3JlYXRlcyBnYXJiYWdlLCBidXQgZ2FyYmFnZSBpcyBiZXR0ZXIgdGhhbiB0b3RhbGx5IGZhaWxpbmcuXG4gKi9cbmZ1bmN0aW9uIGlkYlJlYWR5KCkge1xuICAgIGNvbnN0IGlzU2FmYXJpID0gIW5hdmlnYXRvci51c2VyQWdlbnREYXRhICYmXG4gICAgICAgIC9TYWZhcmlcXC8vLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCkgJiZcbiAgICAgICAgIS9DaHJvbShlfGl1bSlcXC8vLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCk7XG4gICAgLy8gTm8gcG9pbnQgcHV0dGluZyBvdGhlciBicm93c2VycyBvciBvbGRlciB2ZXJzaW9ucyBvZiBTYWZhcmkgdGhyb3VnaCB0aGlzIG1lc3MuXG4gICAgaWYgKCFpc1NhZmFyaSB8fCAhaW5kZXhlZERCLmRhdGFiYXNlcylcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICAgIGxldCBpbnRlcnZhbElkO1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuICAgICAgICBjb25zdCB0cnlJZGIgPSAoKSA9PiBpbmRleGVkREIuZGF0YWJhc2VzKCkuZmluYWxseShyZXNvbHZlKTtcbiAgICAgICAgaW50ZXJ2YWxJZCA9IHNldEludGVydmFsKHRyeUlkYiwgMTAwKTtcbiAgICAgICAgdHJ5SWRiKCk7XG4gICAgfSkuZmluYWxseSgoKSA9PiBjbGVhckludGVydmFsKGludGVydmFsSWQpKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgaWRiUmVhZHk7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/safari-14-idb-fix/dist/esm/index.js\n");

/***/ }),

/***/ "./node_modules/comlink/dist/esm/comlink.mjs":
/*!***************************************************!*\
  !*** ./node_modules/comlink/dist/esm/comlink.mjs ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"createEndpoint\": () => (/* binding */ createEndpoint),\n/* harmony export */   \"expose\": () => (/* binding */ expose),\n/* harmony export */   \"proxy\": () => (/* binding */ proxy),\n/* harmony export */   \"proxyMarker\": () => (/* binding */ proxyMarker),\n/* harmony export */   \"releaseProxy\": () => (/* binding */ releaseProxy),\n/* harmony export */   \"transfer\": () => (/* binding */ transfer),\n/* harmony export */   \"transferHandlers\": () => (/* binding */ transferHandlers),\n/* harmony export */   \"windowEndpoint\": () => (/* binding */ windowEndpoint),\n/* harmony export */   \"wrap\": () => (/* binding */ wrap)\n/* harmony export */ });\n/**\r\n * Copyright 2019 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nconst proxyMarker = Symbol(\"Comlink.proxy\");\nconst createEndpoint = Symbol(\"Comlink.endpoint\");\nconst releaseProxy = Symbol(\"Comlink.releaseProxy\");\nconst throwMarker = Symbol(\"Comlink.thrown\");\n\nconst isObject = val => typeof val === \"object\" && val !== null || typeof val === \"function\";\n/**\r\n * Internal transfer handle to handle objects marked to proxy.\r\n */\n\n\nconst proxyTransferHandler = {\n  canHandle: val => isObject(val) && val[proxyMarker],\n\n  serialize(obj) {\n    const {\n      port1,\n      port2\n    } = new MessageChannel();\n    expose(obj, port1);\n    return [port2, [port2]];\n  },\n\n  deserialize(port) {\n    port.start();\n    return wrap(port);\n  }\n\n};\n/**\r\n * Internal transfer handler to handle thrown exceptions.\r\n */\n\nconst throwTransferHandler = {\n  canHandle: value => isObject(value) && throwMarker in value,\n\n  serialize({\n    value\n  }) {\n    let serialized;\n\n    if (value instanceof Error) {\n      serialized = {\n        isError: true,\n        value: {\n          message: value.message,\n          name: value.name,\n          stack: value.stack\n        }\n      };\n    } else {\n      serialized = {\n        isError: false,\n        value\n      };\n    }\n\n    return [serialized, []];\n  },\n\n  deserialize(serialized) {\n    if (serialized.isError) {\n      throw Object.assign(new Error(serialized.value.message), serialized.value);\n    }\n\n    throw serialized.value;\n  }\n\n};\n/**\r\n * Allows customizing the serialization of certain values.\r\n */\n\nconst transferHandlers = new Map([[\"proxy\", proxyTransferHandler], [\"throw\", throwTransferHandler]]);\n\nfunction expose(obj, ep = self) {\n  ep.addEventListener(\"message\", function callback(ev) {\n    if (!ev || !ev.data) {\n      return;\n    }\n\n    const {\n      id,\n      type,\n      path\n    } = Object.assign({\n      path: []\n    }, ev.data);\n    const argumentList = (ev.data.argumentList || []).map(fromWireValue);\n    let returnValue;\n\n    try {\n      const parent = path.slice(0, -1).reduce((obj, prop) => obj[prop], obj);\n      const rawValue = path.reduce((obj, prop) => obj[prop], obj);\n\n      switch (type) {\n        case \"GET\"\n        /* GET */\n        :\n          {\n            returnValue = rawValue;\n          }\n          break;\n\n        case \"SET\"\n        /* SET */\n        :\n          {\n            parent[path.slice(-1)[0]] = fromWireValue(ev.data.value);\n            returnValue = true;\n          }\n          break;\n\n        case \"APPLY\"\n        /* APPLY */\n        :\n          {\n            returnValue = rawValue.apply(parent, argumentList);\n          }\n          break;\n\n        case \"CONSTRUCT\"\n        /* CONSTRUCT */\n        :\n          {\n            const value = new rawValue(...argumentList);\n            returnValue = proxy(value);\n          }\n          break;\n\n        case \"ENDPOINT\"\n        /* ENDPOINT */\n        :\n          {\n            const {\n              port1,\n              port2\n            } = new MessageChannel();\n            expose(obj, port2);\n            returnValue = transfer(port1, [port1]);\n          }\n          break;\n\n        case \"RELEASE\"\n        /* RELEASE */\n        :\n          {\n            returnValue = undefined;\n          }\n          break;\n\n        default:\n          return;\n      }\n    } catch (value) {\n      returnValue = {\n        value,\n        [throwMarker]: 0\n      };\n    }\n\n    Promise.resolve(returnValue).catch(value => {\n      return {\n        value,\n        [throwMarker]: 0\n      };\n    }).then(returnValue => {\n      const [wireValue, transferables] = toWireValue(returnValue);\n      ep.postMessage(Object.assign(Object.assign({}, wireValue), {\n        id\n      }), transferables);\n\n      if (type === \"RELEASE\"\n      /* RELEASE */\n      ) {\n        // detach and deactive after sending release response above.\n        ep.removeEventListener(\"message\", callback);\n        closeEndPoint(ep);\n      }\n    });\n  });\n\n  if (ep.start) {\n    ep.start();\n  }\n}\n\nfunction isMessagePort(endpoint) {\n  return endpoint.constructor.name === \"MessagePort\";\n}\n\nfunction closeEndPoint(endpoint) {\n  if (isMessagePort(endpoint)) endpoint.close();\n}\n\nfunction wrap(ep, target) {\n  return createProxy(ep, [], target);\n}\n\nfunction throwIfProxyReleased(isReleased) {\n  if (isReleased) {\n    throw new Error(\"Proxy has been released and is not useable\");\n  }\n}\n\nfunction createProxy(ep, path = [], target = function () {}) {\n  let isProxyReleased = false;\n  const proxy = new Proxy(target, {\n    get(_target, prop) {\n      throwIfProxyReleased(isProxyReleased);\n\n      if (prop === releaseProxy) {\n        return () => {\n          return requestResponseMessage(ep, {\n            type: \"RELEASE\"\n            /* RELEASE */\n            ,\n            path: path.map(p => p.toString())\n          }).then(() => {\n            closeEndPoint(ep);\n            isProxyReleased = true;\n          });\n        };\n      }\n\n      if (prop === \"then\") {\n        if (path.length === 0) {\n          return {\n            then: () => proxy\n          };\n        }\n\n        const r = requestResponseMessage(ep, {\n          type: \"GET\"\n          /* GET */\n          ,\n          path: path.map(p => p.toString())\n        }).then(fromWireValue);\n        return r.then.bind(r);\n      }\n\n      return createProxy(ep, [...path, prop]);\n    },\n\n    set(_target, prop, rawValue) {\n      throwIfProxyReleased(isProxyReleased); // FIXME: ES6 Proxy Handler `set` methods are supposed to return a\n      // boolean. To show good will, we return true asynchronously ¯\\_(ツ)_/¯\n\n      const [value, transferables] = toWireValue(rawValue);\n      return requestResponseMessage(ep, {\n        type: \"SET\"\n        /* SET */\n        ,\n        path: [...path, prop].map(p => p.toString()),\n        value\n      }, transferables).then(fromWireValue);\n    },\n\n    apply(_target, _thisArg, rawArgumentList) {\n      throwIfProxyReleased(isProxyReleased);\n      const last = path[path.length - 1];\n\n      if (last === createEndpoint) {\n        return requestResponseMessage(ep, {\n          type: \"ENDPOINT\"\n          /* ENDPOINT */\n\n        }).then(fromWireValue);\n      } // We just pretend that `bind()` didn’t happen.\n\n\n      if (last === \"bind\") {\n        return createProxy(ep, path.slice(0, -1));\n      }\n\n      const [argumentList, transferables] = processArguments(rawArgumentList);\n      return requestResponseMessage(ep, {\n        type: \"APPLY\"\n        /* APPLY */\n        ,\n        path: path.map(p => p.toString()),\n        argumentList\n      }, transferables).then(fromWireValue);\n    },\n\n    construct(_target, rawArgumentList) {\n      throwIfProxyReleased(isProxyReleased);\n      const [argumentList, transferables] = processArguments(rawArgumentList);\n      return requestResponseMessage(ep, {\n        type: \"CONSTRUCT\"\n        /* CONSTRUCT */\n        ,\n        path: path.map(p => p.toString()),\n        argumentList\n      }, transferables).then(fromWireValue);\n    }\n\n  });\n  return proxy;\n}\n\nfunction myFlat(arr) {\n  return Array.prototype.concat.apply([], arr);\n}\n\nfunction processArguments(argumentList) {\n  const processed = argumentList.map(toWireValue);\n  return [processed.map(v => v[0]), myFlat(processed.map(v => v[1]))];\n}\n\nconst transferCache = new WeakMap();\n\nfunction transfer(obj, transfers) {\n  transferCache.set(obj, transfers);\n  return obj;\n}\n\nfunction proxy(obj) {\n  return Object.assign(obj, {\n    [proxyMarker]: true\n  });\n}\n\nfunction windowEndpoint(w, context = self, targetOrigin = \"*\") {\n  return {\n    postMessage: (msg, transferables) => w.postMessage(msg, targetOrigin, transferables),\n    addEventListener: context.addEventListener.bind(context),\n    removeEventListener: context.removeEventListener.bind(context)\n  };\n}\n\nfunction toWireValue(value) {\n  for (const [name, handler] of transferHandlers) {\n    if (handler.canHandle(value)) {\n      const [serializedValue, transferables] = handler.serialize(value);\n      return [{\n        type: \"HANDLER\"\n        /* HANDLER */\n        ,\n        name,\n        value: serializedValue\n      }, transferables];\n    }\n  }\n\n  return [{\n    type: \"RAW\"\n    /* RAW */\n    ,\n    value\n  }, transferCache.get(value) || []];\n}\n\nfunction fromWireValue(value) {\n  switch (value.type) {\n    case \"HANDLER\"\n    /* HANDLER */\n    :\n      return transferHandlers.get(value.name).deserialize(value.value);\n\n    case \"RAW\"\n    /* RAW */\n    :\n      return value.value;\n  }\n}\n\nfunction requestResponseMessage(ep, msg, transfers) {\n  return new Promise(resolve => {\n    const id = generateUUID();\n    ep.addEventListener(\"message\", function l(ev) {\n      if (!ev.data || !ev.data.id || ev.data.id !== id) {\n        return;\n      }\n\n      ep.removeEventListener(\"message\", l);\n      resolve(ev.data);\n    });\n\n    if (ep.start) {\n      ep.start();\n    }\n\n    ep.postMessage(Object.assign({\n      id\n    }, msg), transfers);\n  });\n}\n\nfunction generateUUID() {\n  return new Array(4).fill(0).map(() => Math.floor(Math.random() * Number.MAX_SAFE_INTEGER).toString(16)).join(\"-\");\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvY29tbGluay9kaXN0L2VzbS9jb21saW5rLm1qcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBQTs7Ozs7Ozs7Ozs7O0FBd0JBO0FBQ0E7QUFDQTtBQUVBOztBQXVKQTtBQWdDQTs7Ozs7QUFHQTtBQUNBOztBQUVBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBWEE7QUFzQkE7Ozs7QUFHQTtBQUlBOztBQUVBO0FBQUE7QUFBQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBSEE7QUFGQTtBQVFBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFDQTs7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUlBOztBQUNBO0FBQ0E7O0FBM0JBO0FBOEJBOzs7O0FBR0E7O0FBUUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFEQTtBQUlBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBcENBO0FBc0NBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFDQTs7QUFDQTtBQUVBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFFQTtBQUNBO0FBQUE7QUFBQTs7QUFDQTtBQUFBO0FBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBS0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQURBO0FBRUE7QUFGQTtBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUNBOztBQUNBO0FBQ0E7QUFBQTtBQURBO0FBRUE7QUFGQTtBQUlBO0FBQ0E7O0FBQ0E7QUFDQTs7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBR0E7QUFBQTtBQURBO0FBRUE7QUFDQTtBQUhBO0FBT0E7O0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUFBOztBQURBO0FBR0E7OztBQUVBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBR0E7QUFBQTtBQURBO0FBRUE7QUFDQTtBQUhBO0FBT0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFHQTtBQUFBO0FBREE7QUFFQTtBQUNBO0FBSEE7QUFPQTs7QUE1RUE7QUE4RUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUFBO0FBQUE7QUFDQTs7QUFFQTtBQUtBO0FBQ0E7QUFFQTtBQUNBO0FBSkE7QUFNQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFBQTtBQURBO0FBRUE7QUFDQTtBQUhBO0FBT0E7QUFDQTs7QUFDQTtBQUVBO0FBQUE7QUFEQTtBQUVBO0FBRkE7QUFNQTs7QUFFQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7O0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFKQTtBQU1BOztBQUVBO0FBS0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBSUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ob21lLWFzc2lzdGFudC1mcm9udGVuZC8uLi8uLi9zcmMvY29tbGluay50cz8yNGI0Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IDIwMTkgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHtcbiAgRW5kcG9pbnQsXG4gIEV2ZW50U291cmNlLFxuICBNZXNzYWdlLFxuICBNZXNzYWdlVHlwZSxcbiAgUG9zdE1lc3NhZ2VXaXRoT3JpZ2luLFxuICBXaXJlVmFsdWUsXG4gIFdpcmVWYWx1ZVR5cGUsXG59IGZyb20gXCIuL3Byb3RvY29sXCI7XG5leHBvcnQgeyBFbmRwb2ludCB9O1xuXG5leHBvcnQgY29uc3QgcHJveHlNYXJrZXIgPSBTeW1ib2woXCJDb21saW5rLnByb3h5XCIpO1xuZXhwb3J0IGNvbnN0IGNyZWF0ZUVuZHBvaW50ID0gU3ltYm9sKFwiQ29tbGluay5lbmRwb2ludFwiKTtcbmV4cG9ydCBjb25zdCByZWxlYXNlUHJveHkgPSBTeW1ib2woXCJDb21saW5rLnJlbGVhc2VQcm94eVwiKTtcblxuY29uc3QgdGhyb3dNYXJrZXIgPSBTeW1ib2woXCJDb21saW5rLnRocm93blwiKTtcblxuLyoqXG4gKiBJbnRlcmZhY2Ugb2YgdmFsdWVzIHRoYXQgd2VyZSBtYXJrZWQgdG8gYmUgcHJveGllZCB3aXRoIGBjb21saW5rLnByb3h5KClgLlxuICogQ2FuIGFsc28gYmUgaW1wbGVtZW50ZWQgYnkgY2xhc3Nlcy5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBQcm94eU1hcmtlZCB7XG4gIFtwcm94eU1hcmtlcl06IHRydWU7XG59XG5cbi8qKlxuICogVGFrZXMgYSB0eXBlIGFuZCB3cmFwcyBpdCBpbiBhIFByb21pc2UsIGlmIGl0IG5vdCBhbHJlYWR5IGlzIG9uZS5cbiAqIFRoaXMgaXMgdG8gYXZvaWQgYFByb21pc2U8UHJvbWlzZTxUPj5gLlxuICpcbiAqIFRoaXMgaXMgdGhlIGludmVyc2Ugb2YgYFVucHJvbWlzaWZ5PFQ+YC5cbiAqL1xudHlwZSBQcm9taXNpZnk8VD4gPSBUIGV4dGVuZHMgUHJvbWlzZTx1bmtub3duPiA/IFQgOiBQcm9taXNlPFQ+O1xuLyoqXG4gKiBUYWtlcyBhIHR5cGUgdGhhdCBtYXkgYmUgUHJvbWlzZSBhbmQgdW53cmFwcyB0aGUgUHJvbWlzZSB0eXBlLlxuICogSWYgYFBgIGlzIG5vdCBhIFByb21pc2UsIGl0IHJldHVybnMgYFBgLlxuICpcbiAqIFRoaXMgaXMgdGhlIGludmVyc2Ugb2YgYFByb21pc2lmeTxUPmAuXG4gKi9cbnR5cGUgVW5wcm9taXNpZnk8UD4gPSBQIGV4dGVuZHMgUHJvbWlzZTxpbmZlciBUPiA/IFQgOiBQO1xuXG4vKipcbiAqIFRha2VzIHRoZSByYXcgdHlwZSBvZiBhIHJlbW90ZSBwcm9wZXJ0eSBhbmQgcmV0dXJucyB0aGUgdHlwZSB0aGF0IGlzIHZpc2libGUgdG8gdGhlIGxvY2FsIHRocmVhZCBvbiB0aGUgcHJveHkuXG4gKlxuICogTm90ZTogVGhpcyBuZWVkcyB0byBiZSBpdHMgb3duIHR5cGUgYWxpYXMsIG90aGVyd2lzZSBpdCB3aWxsIG5vdCBkaXN0cmlidXRlIG92ZXIgdW5pb25zLlxuICogU2VlIGh0dHBzOi8vd3d3LnR5cGVzY3JpcHRsYW5nLm9yZy9kb2NzL2hhbmRib29rL2FkdmFuY2VkLXR5cGVzLmh0bWwjZGlzdHJpYnV0aXZlLWNvbmRpdGlvbmFsLXR5cGVzXG4gKi9cbnR5cGUgUmVtb3RlUHJvcGVydHk8VD4gPVxuICAvLyBJZiB0aGUgdmFsdWUgaXMgYSBtZXRob2QsIGNvbWxpbmsgd2lsbCBwcm94eSBpdCBhdXRvbWF0aWNhbGx5LlxuICAvLyBPYmplY3RzIGFyZSBvbmx5IHByb3hpZWQgaWYgdGhleSBhcmUgbWFya2VkIHRvIGJlIHByb3hpZWQuXG4gIC8vIE90aGVyd2lzZSwgdGhlIHByb3BlcnR5IGlzIGNvbnZlcnRlZCB0byBhIFByb21pc2UgdGhhdCByZXNvbHZlcyB0aGUgY2xvbmVkIHZhbHVlLlxuICBUIGV4dGVuZHMgRnVuY3Rpb24gfCBQcm94eU1hcmtlZCA/IFJlbW90ZTxUPiA6IFByb21pc2lmeTxUPjtcblxuLyoqXG4gKiBUYWtlcyB0aGUgcmF3IHR5cGUgb2YgYSBwcm9wZXJ0eSBhcyBhIHJlbW90ZSB0aHJlYWQgd291bGQgc2VlIGl0IHRocm91Z2ggYSBwcm94eSAoZS5nLiB3aGVuIHBhc3NlZCBpbiBhcyBhIGZ1bmN0aW9uXG4gKiBhcmd1bWVudCkgYW5kIHJldHVybnMgdGhlIHR5cGUgdGhhdCB0aGUgbG9jYWwgdGhyZWFkIGhhcyB0byBzdXBwbHkuXG4gKlxuICogVGhpcyBpcyB0aGUgaW52ZXJzZSBvZiBgUmVtb3RlUHJvcGVydHk8VD5gLlxuICpcbiAqIE5vdGU6IFRoaXMgbmVlZHMgdG8gYmUgaXRzIG93biB0eXBlIGFsaWFzLCBvdGhlcndpc2UgaXQgd2lsbCBub3QgZGlzdHJpYnV0ZSBvdmVyIHVuaW9ucy4gU2VlXG4gKiBodHRwczovL3d3dy50eXBlc2NyaXB0bGFuZy5vcmcvZG9jcy9oYW5kYm9vay9hZHZhbmNlZC10eXBlcy5odG1sI2Rpc3RyaWJ1dGl2ZS1jb25kaXRpb25hbC10eXBlc1xuICovXG50eXBlIExvY2FsUHJvcGVydHk8VD4gPSBUIGV4dGVuZHMgRnVuY3Rpb24gfCBQcm94eU1hcmtlZFxuICA/IExvY2FsPFQ+XG4gIDogVW5wcm9taXNpZnk8VD47XG5cbi8qKlxuICogUHJveGllcyBgVGAgaWYgaXQgaXMgYSBgUHJveHlNYXJrZWRgLCBjbG9uZXMgaXQgb3RoZXJ3aXNlIChhcyBoYW5kbGVkIGJ5IHN0cnVjdHVyZWQgY2xvbmluZyBhbmQgdHJhbnNmZXIgaGFuZGxlcnMpLlxuICovXG5leHBvcnQgdHlwZSBQcm94eU9yQ2xvbmU8VD4gPSBUIGV4dGVuZHMgUHJveHlNYXJrZWQgPyBSZW1vdGU8VD4gOiBUO1xuLyoqXG4gKiBJbnZlcnNlIG9mIGBQcm94eU9yQ2xvbmU8VD5gLlxuICovXG5leHBvcnQgdHlwZSBVbnByb3h5T3JDbG9uZTxUPiA9IFQgZXh0ZW5kcyBSZW1vdGVPYmplY3Q8UHJveHlNYXJrZWQ+XG4gID8gTG9jYWw8VD5cbiAgOiBUO1xuXG4vKipcbiAqIFRha2VzIHRoZSByYXcgdHlwZSBvZiBhIHJlbW90ZSBvYmplY3QgaW4gdGhlIG90aGVyIHRocmVhZCBhbmQgcmV0dXJucyB0aGUgdHlwZSBhcyBpdCBpcyB2aXNpYmxlIHRvIHRoZSBsb2NhbCB0aHJlYWRcbiAqIHdoZW4gcHJveGllZCB3aXRoIGBDb21saW5rLnByb3h5KClgLlxuICpcbiAqIFRoaXMgZG9lcyBub3QgaGFuZGxlIGNhbGwgc2lnbmF0dXJlcywgd2hpY2ggaXMgaGFuZGxlZCBieSB0aGUgbW9yZSBnZW5lcmFsIGBSZW1vdGU8VD5gIHR5cGUuXG4gKlxuICogQHRlbXBsYXRlIFQgVGhlIHJhdyB0eXBlIG9mIGEgcmVtb3RlIG9iamVjdCBhcyBzZWVuIGluIHRoZSBvdGhlciB0aHJlYWQuXG4gKi9cbmV4cG9ydCB0eXBlIFJlbW90ZU9iamVjdDxUPiA9IHsgW1AgaW4ga2V5b2YgVF06IFJlbW90ZVByb3BlcnR5PFRbUF0+IH07XG4vKipcbiAqIFRha2VzIHRoZSB0eXBlIG9mIGFuIG9iamVjdCBhcyBhIHJlbW90ZSB0aHJlYWQgd291bGQgc2VlIGl0IHRocm91Z2ggYSBwcm94eSAoZS5nLiB3aGVuIHBhc3NlZCBpbiBhcyBhIGZ1bmN0aW9uXG4gKiBhcmd1bWVudCkgYW5kIHJldHVybnMgdGhlIHR5cGUgdGhhdCB0aGUgbG9jYWwgdGhyZWFkIGhhcyB0byBzdXBwbHkuXG4gKlxuICogVGhpcyBkb2VzIG5vdCBoYW5kbGUgY2FsbCBzaWduYXR1cmVzLCB3aGljaCBpcyBoYW5kbGVkIGJ5IHRoZSBtb3JlIGdlbmVyYWwgYExvY2FsPFQ+YCB0eXBlLlxuICpcbiAqIFRoaXMgaXMgdGhlIGludmVyc2Ugb2YgYFJlbW90ZU9iamVjdDxUPmAuXG4gKlxuICogQHRlbXBsYXRlIFQgVGhlIHR5cGUgb2YgYSBwcm94aWVkIG9iamVjdC5cbiAqL1xuZXhwb3J0IHR5cGUgTG9jYWxPYmplY3Q8VD4gPSB7IFtQIGluIGtleW9mIFRdOiBMb2NhbFByb3BlcnR5PFRbUF0+IH07XG5cbi8qKlxuICogQWRkaXRpb25hbCBzcGVjaWFsIGNvbWxpbmsgbWV0aG9kcyBhdmFpbGFibGUgb24gZWFjaCBwcm94eSByZXR1cm5lZCBieSBgQ29tbGluay53cmFwKClgLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIFByb3h5TWV0aG9kcyB7XG4gIFtjcmVhdGVFbmRwb2ludF06ICgpID0+IFByb21pc2U8TWVzc2FnZVBvcnQ+O1xuICBbcmVsZWFzZVByb3h5XTogKCkgPT4gdm9pZDtcbn1cblxuLyoqXG4gKiBUYWtlcyB0aGUgcmF3IHR5cGUgb2YgYSByZW1vdGUgb2JqZWN0LCBmdW5jdGlvbiBvciBjbGFzcyBpbiB0aGUgb3RoZXIgdGhyZWFkIGFuZCByZXR1cm5zIHRoZSB0eXBlIGFzIGl0IGlzIHZpc2libGUgdG9cbiAqIHRoZSBsb2NhbCB0aHJlYWQgZnJvbSB0aGUgcHJveHkgcmV0dXJuIHZhbHVlIG9mIGBDb21saW5rLndyYXAoKWAgb3IgYENvbWxpbmsucHJveHkoKWAuXG4gKi9cbmV4cG9ydCB0eXBlIFJlbW90ZTxUPiA9XG4gIC8vIEhhbmRsZSBwcm9wZXJ0aWVzXG4gIFJlbW90ZU9iamVjdDxUPiAmXG4gICAgLy8gSGFuZGxlIGNhbGwgc2lnbmF0dXJlIChpZiBwcmVzZW50KVxuICAgIChUIGV4dGVuZHMgKC4uLmFyZ3M6IGluZmVyIFRBcmd1bWVudHMpID0+IGluZmVyIFRSZXR1cm5cbiAgICAgID8gKFxuICAgICAgICAgIC4uLmFyZ3M6IHsgW0kgaW4ga2V5b2YgVEFyZ3VtZW50c106IFVucHJveHlPckNsb25lPFRBcmd1bWVudHNbSV0+IH1cbiAgICAgICAgKSA9PiBQcm9taXNpZnk8UHJveHlPckNsb25lPFVucHJvbWlzaWZ5PFRSZXR1cm4+Pj5cbiAgICAgIDogdW5rbm93bikgJlxuICAgIC8vIEhhbmRsZSBjb25zdHJ1Y3Qgc2lnbmF0dXJlIChpZiBwcmVzZW50KVxuICAgIC8vIFRoZSByZXR1cm4gb2YgY29uc3RydWN0IHNpZ25hdHVyZXMgaXMgYWx3YXlzIHByb3hpZWQgKHdoZXRoZXIgbWFya2VkIG9yIG5vdClcbiAgICAoVCBleHRlbmRzIHsgbmV3ICguLi5hcmdzOiBpbmZlciBUQXJndW1lbnRzKTogaW5mZXIgVEluc3RhbmNlIH1cbiAgICAgID8ge1xuICAgICAgICAgIG5ldyAoXG4gICAgICAgICAgICAuLi5hcmdzOiB7XG4gICAgICAgICAgICAgIFtJIGluIGtleW9mIFRBcmd1bWVudHNdOiBVbnByb3h5T3JDbG9uZTxUQXJndW1lbnRzW0ldPjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICApOiBQcm9taXNpZnk8UmVtb3RlPFRJbnN0YW5jZT4+O1xuICAgICAgICB9XG4gICAgICA6IHVua25vd24pICZcbiAgICAvLyBJbmNsdWRlIGFkZGl0aW9uYWwgc3BlY2lhbCBjb21saW5rIG1ldGhvZHMgYXZhaWxhYmxlIG9uIHRoZSBwcm94eS5cbiAgICBQcm94eU1ldGhvZHM7XG5cbi8qKlxuICogRXhwcmVzc2VzIHRoYXQgYSB0eXBlIGNhbiBiZSBlaXRoZXIgYSBzeW5jIG9yIGFzeW5jLlxuICovXG50eXBlIE1heWJlUHJvbWlzZTxUPiA9IFByb21pc2U8VD4gfCBUO1xuXG4vKipcbiAqIFRha2VzIHRoZSByYXcgdHlwZSBvZiBhIHJlbW90ZSBvYmplY3QsIGZ1bmN0aW9uIG9yIGNsYXNzIGFzIGEgcmVtb3RlIHRocmVhZCB3b3VsZCBzZWUgaXQgdGhyb3VnaCBhIHByb3h5IChlLmcuIHdoZW5cbiAqIHBhc3NlZCBpbiBhcyBhIGZ1bmN0aW9uIGFyZ3VtZW50KSBhbmQgcmV0dXJucyB0aGUgdHlwZSB0aGUgbG9jYWwgdGhyZWFkIGhhcyB0byBzdXBwbHkuXG4gKlxuICogVGhpcyBpcyB0aGUgaW52ZXJzZSBvZiBgUmVtb3RlPFQ+YC4gSXQgdGFrZXMgYSBgUmVtb3RlPFQ+YCBhbmQgcmV0dXJucyBpdHMgb3JpZ2luYWwgaW5wdXQgYFRgLlxuICovXG5leHBvcnQgdHlwZSBMb2NhbDxUPiA9XG4gIC8vIE9taXQgdGhlIHNwZWNpYWwgcHJveHkgbWV0aG9kcyAodGhleSBkb24ndCBuZWVkIHRvIGJlIHN1cHBsaWVkLCBjb21saW5rIGFkZHMgdGhlbSlcbiAgT21pdDxMb2NhbE9iamVjdDxUPiwga2V5b2YgUHJveHlNZXRob2RzPiAmXG4gICAgLy8gSGFuZGxlIGNhbGwgc2lnbmF0dXJlcyAoaWYgcHJlc2VudClcbiAgICAoVCBleHRlbmRzICguLi5hcmdzOiBpbmZlciBUQXJndW1lbnRzKSA9PiBpbmZlciBUUmV0dXJuXG4gICAgICA/IChcbiAgICAgICAgICAuLi5hcmdzOiB7IFtJIGluIGtleW9mIFRBcmd1bWVudHNdOiBQcm94eU9yQ2xvbmU8VEFyZ3VtZW50c1tJXT4gfVxuICAgICAgICApID0+IC8vIFRoZSByYXcgZnVuY3Rpb24gY291bGQgZWl0aGVyIGJlIHN5bmMgb3IgYXN5bmMsIGJ1dCBpcyBhbHdheXMgcHJveGllZCBhdXRvbWF0aWNhbGx5XG4gICAgICAgIE1heWJlUHJvbWlzZTxVbnByb3h5T3JDbG9uZTxVbnByb21pc2lmeTxUUmV0dXJuPj4+XG4gICAgICA6IHVua25vd24pICZcbiAgICAvLyBIYW5kbGUgY29uc3RydWN0IHNpZ25hdHVyZSAoaWYgcHJlc2VudClcbiAgICAvLyBUaGUgcmV0dXJuIG9mIGNvbnN0cnVjdCBzaWduYXR1cmVzIGlzIGFsd2F5cyBwcm94aWVkICh3aGV0aGVyIG1hcmtlZCBvciBub3QpXG4gICAgKFQgZXh0ZW5kcyB7IG5ldyAoLi4uYXJnczogaW5mZXIgVEFyZ3VtZW50cyk6IGluZmVyIFRJbnN0YW5jZSB9XG4gICAgICA/IHtcbiAgICAgICAgICBuZXcgKFxuICAgICAgICAgICAgLi4uYXJnczoge1xuICAgICAgICAgICAgICBbSSBpbiBrZXlvZiBUQXJndW1lbnRzXTogUHJveHlPckNsb25lPFRBcmd1bWVudHNbSV0+O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICk6IC8vIFRoZSByYXcgY29uc3RydWN0b3IgY291bGQgZWl0aGVyIGJlIHN5bmMgb3IgYXN5bmMsIGJ1dCBpcyBhbHdheXMgcHJveGllZCBhdXRvbWF0aWNhbGx5XG4gICAgICAgICAgTWF5YmVQcm9taXNlPExvY2FsPFVucHJvbWlzaWZ5PFRJbnN0YW5jZT4+PjtcbiAgICAgICAgfVxuICAgICAgOiB1bmtub3duKTtcblxuY29uc3QgaXNPYmplY3QgPSAodmFsOiB1bmtub3duKTogdmFsIGlzIG9iamVjdCA9PlxuICAodHlwZW9mIHZhbCA9PT0gXCJvYmplY3RcIiAmJiB2YWwgIT09IG51bGwpIHx8IHR5cGVvZiB2YWwgPT09IFwiZnVuY3Rpb25cIjtcblxuLyoqXG4gKiBDdXN0b21pemVzIHRoZSBzZXJpYWxpemF0aW9uIG9mIGNlcnRhaW4gdmFsdWVzIGFzIGRldGVybWluZWQgYnkgYGNhbkhhbmRsZSgpYC5cbiAqXG4gKiBAdGVtcGxhdGUgVCBUaGUgaW5wdXQgdHlwZSBiZWluZyBoYW5kbGVkIGJ5IHRoaXMgdHJhbnNmZXIgaGFuZGxlci5cbiAqIEB0ZW1wbGF0ZSBTIFRoZSBzZXJpYWxpemVkIHR5cGUgc2VudCBvdmVyIHRoZSB3aXJlLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIFRyYW5zZmVySGFuZGxlcjxULCBTPiB7XG4gIC8qKlxuICAgKiBHZXRzIGNhbGxlZCBmb3IgZXZlcnkgdmFsdWUgdG8gZGV0ZXJtaW5lIHdoZXRoZXIgdGhpcyB0cmFuc2ZlciBoYW5kbGVyXG4gICAqIHNob3VsZCBzZXJpYWxpemUgdGhlIHZhbHVlLCB3aGljaCBpbmNsdWRlcyBjaGVja2luZyB0aGF0IGl0IGlzIG9mIHRoZSByaWdodFxuICAgKiB0eXBlIChidXQgY2FuIHBlcmZvcm0gY2hlY2tzIGJleW9uZCB0aGF0IGFzIHdlbGwpLlxuICAgKi9cbiAgY2FuSGFuZGxlKHZhbHVlOiB1bmtub3duKTogdmFsdWUgaXMgVDtcblxuICAvKipcbiAgICogR2V0cyBjYWxsZWQgd2l0aCB0aGUgdmFsdWUgaWYgYGNhbkhhbmRsZSgpYCByZXR1cm5lZCBgdHJ1ZWAgdG8gcHJvZHVjZSBhXG4gICAqIHZhbHVlIHRoYXQgY2FuIGJlIHNlbnQgaW4gYSBtZXNzYWdlLCBjb25zaXN0aW5nIG9mIHN0cnVjdHVyZWQtY2xvbmVhYmxlXG4gICAqIHZhbHVlcyBhbmQvb3IgdHJhbnNmZXJyYWJsZSBvYmplY3RzLlxuICAgKi9cbiAgc2VyaWFsaXplKHZhbHVlOiBUKTogW1MsIFRyYW5zZmVyYWJsZVtdXTtcblxuICAvKipcbiAgICogR2V0cyBjYWxsZWQgdG8gZGVzZXJpYWxpemUgYW4gaW5jb21pbmcgdmFsdWUgdGhhdCB3YXMgc2VyaWFsaXplZCBpbiB0aGVcbiAgICogb3RoZXIgdGhyZWFkIHdpdGggdGhpcyB0cmFuc2ZlciBoYW5kbGVyIChrbm93biB0aHJvdWdoIHRoZSBuYW1lIGl0IHdhc1xuICAgKiByZWdpc3RlcmVkIHVuZGVyKS5cbiAgICovXG4gIGRlc2VyaWFsaXplKHZhbHVlOiBTKTogVDtcbn1cblxuLyoqXG4gKiBJbnRlcm5hbCB0cmFuc2ZlciBoYW5kbGUgdG8gaGFuZGxlIG9iamVjdHMgbWFya2VkIHRvIHByb3h5LlxuICovXG5jb25zdCBwcm94eVRyYW5zZmVySGFuZGxlcjogVHJhbnNmZXJIYW5kbGVyPG9iamVjdCwgTWVzc2FnZVBvcnQ+ID0ge1xuICBjYW5IYW5kbGU6ICh2YWwpOiB2YWwgaXMgUHJveHlNYXJrZWQgPT5cbiAgICBpc09iamVjdCh2YWwpICYmICh2YWwgYXMgUHJveHlNYXJrZWQpW3Byb3h5TWFya2VyXSxcbiAgc2VyaWFsaXplKG9iaikge1xuICAgIGNvbnN0IHsgcG9ydDEsIHBvcnQyIH0gPSBuZXcgTWVzc2FnZUNoYW5uZWwoKTtcbiAgICBleHBvc2Uob2JqLCBwb3J0MSk7XG4gICAgcmV0dXJuIFtwb3J0MiwgW3BvcnQyXV07XG4gIH0sXG4gIGRlc2VyaWFsaXplKHBvcnQpIHtcbiAgICBwb3J0LnN0YXJ0KCk7XG4gICAgcmV0dXJuIHdyYXAocG9ydCk7XG4gIH0sXG59O1xuXG5pbnRlcmZhY2UgVGhyb3duVmFsdWUge1xuICBbdGhyb3dNYXJrZXJdOiB1bmtub3duOyAvLyBqdXN0IG5lZWRzIHRvIGJlIHByZXNlbnRcbiAgdmFsdWU6IHVua25vd247XG59XG50eXBlIFNlcmlhbGl6ZWRUaHJvd25WYWx1ZSA9XG4gIHwgeyBpc0Vycm9yOiB0cnVlOyB2YWx1ZTogRXJyb3IgfVxuICB8IHsgaXNFcnJvcjogZmFsc2U7IHZhbHVlOiB1bmtub3duIH07XG5cbi8qKlxuICogSW50ZXJuYWwgdHJhbnNmZXIgaGFuZGxlciB0byBoYW5kbGUgdGhyb3duIGV4Y2VwdGlvbnMuXG4gKi9cbmNvbnN0IHRocm93VHJhbnNmZXJIYW5kbGVyOiBUcmFuc2ZlckhhbmRsZXI8XG4gIFRocm93blZhbHVlLFxuICBTZXJpYWxpemVkVGhyb3duVmFsdWVcbj4gPSB7XG4gIGNhbkhhbmRsZTogKHZhbHVlKTogdmFsdWUgaXMgVGhyb3duVmFsdWUgPT5cbiAgICBpc09iamVjdCh2YWx1ZSkgJiYgdGhyb3dNYXJrZXIgaW4gdmFsdWUsXG4gIHNlcmlhbGl6ZSh7IHZhbHVlIH0pIHtcbiAgICBsZXQgc2VyaWFsaXplZDogU2VyaWFsaXplZFRocm93blZhbHVlO1xuICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICBzZXJpYWxpemVkID0ge1xuICAgICAgICBpc0Vycm9yOiB0cnVlLFxuICAgICAgICB2YWx1ZToge1xuICAgICAgICAgIG1lc3NhZ2U6IHZhbHVlLm1lc3NhZ2UsXG4gICAgICAgICAgbmFtZTogdmFsdWUubmFtZSxcbiAgICAgICAgICBzdGFjazogdmFsdWUuc3RhY2ssXG4gICAgICAgIH0sXG4gICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICBzZXJpYWxpemVkID0geyBpc0Vycm9yOiBmYWxzZSwgdmFsdWUgfTtcbiAgICB9XG4gICAgcmV0dXJuIFtzZXJpYWxpemVkLCBbXV07XG4gIH0sXG4gIGRlc2VyaWFsaXplKHNlcmlhbGl6ZWQpIHtcbiAgICBpZiAoc2VyaWFsaXplZC5pc0Vycm9yKSB7XG4gICAgICB0aHJvdyBPYmplY3QuYXNzaWduKFxuICAgICAgICBuZXcgRXJyb3Ioc2VyaWFsaXplZC52YWx1ZS5tZXNzYWdlKSxcbiAgICAgICAgc2VyaWFsaXplZC52YWx1ZVxuICAgICAgKTtcbiAgICB9XG4gICAgdGhyb3cgc2VyaWFsaXplZC52YWx1ZTtcbiAgfSxcbn07XG5cbi8qKlxuICogQWxsb3dzIGN1c3RvbWl6aW5nIHRoZSBzZXJpYWxpemF0aW9uIG9mIGNlcnRhaW4gdmFsdWVzLlxuICovXG5leHBvcnQgY29uc3QgdHJhbnNmZXJIYW5kbGVycyA9IG5ldyBNYXA8XG4gIHN0cmluZyxcbiAgVHJhbnNmZXJIYW5kbGVyPHVua25vd24sIHVua25vd24+XG4+KFtcbiAgW1wicHJveHlcIiwgcHJveHlUcmFuc2ZlckhhbmRsZXJdLFxuICBbXCJ0aHJvd1wiLCB0aHJvd1RyYW5zZmVySGFuZGxlcl0sXG5dKTtcblxuZXhwb3J0IGZ1bmN0aW9uIGV4cG9zZShvYmo6IGFueSwgZXA6IEVuZHBvaW50ID0gc2VsZiBhcyBhbnkpIHtcbiAgZXAuYWRkRXZlbnRMaXN0ZW5lcihcIm1lc3NhZ2VcIiwgZnVuY3Rpb24gY2FsbGJhY2soZXY6IE1lc3NhZ2VFdmVudCkge1xuICAgIGlmICghZXYgfHwgIWV2LmRhdGEpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgeyBpZCwgdHlwZSwgcGF0aCB9ID0ge1xuICAgICAgcGF0aDogW10gYXMgc3RyaW5nW10sXG4gICAgICAuLi4oZXYuZGF0YSBhcyBNZXNzYWdlKSxcbiAgICB9O1xuICAgIGNvbnN0IGFyZ3VtZW50TGlzdCA9IChldi5kYXRhLmFyZ3VtZW50TGlzdCB8fCBbXSkubWFwKGZyb21XaXJlVmFsdWUpO1xuICAgIGxldCByZXR1cm5WYWx1ZTtcbiAgICB0cnkge1xuICAgICAgY29uc3QgcGFyZW50ID0gcGF0aC5zbGljZSgwLCAtMSkucmVkdWNlKChvYmosIHByb3ApID0+IG9ialtwcm9wXSwgb2JqKTtcbiAgICAgIGNvbnN0IHJhd1ZhbHVlID0gcGF0aC5yZWR1Y2UoKG9iaiwgcHJvcCkgPT4gb2JqW3Byb3BdLCBvYmopO1xuICAgICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgIGNhc2UgTWVzc2FnZVR5cGUuR0VUOlxuICAgICAgICAgIHtcbiAgICAgICAgICAgIHJldHVyblZhbHVlID0gcmF3VmFsdWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIE1lc3NhZ2VUeXBlLlNFVDpcbiAgICAgICAgICB7XG4gICAgICAgICAgICBwYXJlbnRbcGF0aC5zbGljZSgtMSlbMF1dID0gZnJvbVdpcmVWYWx1ZShldi5kYXRhLnZhbHVlKTtcbiAgICAgICAgICAgIHJldHVyblZhbHVlID0gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgTWVzc2FnZVR5cGUuQVBQTFk6XG4gICAgICAgICAge1xuICAgICAgICAgICAgcmV0dXJuVmFsdWUgPSByYXdWYWx1ZS5hcHBseShwYXJlbnQsIGFyZ3VtZW50TGlzdCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIE1lc3NhZ2VUeXBlLkNPTlNUUlVDVDpcbiAgICAgICAgICB7XG4gICAgICAgICAgICBjb25zdCB2YWx1ZSA9IG5ldyByYXdWYWx1ZSguLi5hcmd1bWVudExpc3QpO1xuICAgICAgICAgICAgcmV0dXJuVmFsdWUgPSBwcm94eSh2YWx1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIE1lc3NhZ2VUeXBlLkVORFBPSU5UOlxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGNvbnN0IHsgcG9ydDEsIHBvcnQyIH0gPSBuZXcgTWVzc2FnZUNoYW5uZWwoKTtcbiAgICAgICAgICAgIGV4cG9zZShvYmosIHBvcnQyKTtcbiAgICAgICAgICAgIHJldHVyblZhbHVlID0gdHJhbnNmZXIocG9ydDEsIFtwb3J0MV0pO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBNZXNzYWdlVHlwZS5SRUxFQVNFOlxuICAgICAgICAgIHtcbiAgICAgICAgICAgIHJldHVyblZhbHVlID0gdW5kZWZpbmVkO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfSBjYXRjaCAodmFsdWUpIHtcbiAgICAgIHJldHVyblZhbHVlID0geyB2YWx1ZSwgW3Rocm93TWFya2VyXTogMCB9O1xuICAgIH1cbiAgICBQcm9taXNlLnJlc29sdmUocmV0dXJuVmFsdWUpXG4gICAgICAuY2F0Y2goKHZhbHVlKSA9PiB7XG4gICAgICAgIHJldHVybiB7IHZhbHVlLCBbdGhyb3dNYXJrZXJdOiAwIH07XG4gICAgICB9KVxuICAgICAgLnRoZW4oKHJldHVyblZhbHVlKSA9PiB7XG4gICAgICAgIGNvbnN0IFt3aXJlVmFsdWUsIHRyYW5zZmVyYWJsZXNdID0gdG9XaXJlVmFsdWUocmV0dXJuVmFsdWUpO1xuICAgICAgICBlcC5wb3N0TWVzc2FnZSh7IC4uLndpcmVWYWx1ZSwgaWQgfSwgdHJhbnNmZXJhYmxlcyk7XG4gICAgICAgIGlmICh0eXBlID09PSBNZXNzYWdlVHlwZS5SRUxFQVNFKSB7XG4gICAgICAgICAgLy8gZGV0YWNoIGFuZCBkZWFjdGl2ZSBhZnRlciBzZW5kaW5nIHJlbGVhc2UgcmVzcG9uc2UgYWJvdmUuXG4gICAgICAgICAgZXAucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1lc3NhZ2VcIiwgY2FsbGJhY2sgYXMgYW55KTtcbiAgICAgICAgICBjbG9zZUVuZFBvaW50KGVwKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gIH0gYXMgYW55KTtcbiAgaWYgKGVwLnN0YXJ0KSB7XG4gICAgZXAuc3RhcnQoKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpc01lc3NhZ2VQb3J0KGVuZHBvaW50OiBFbmRwb2ludCk6IGVuZHBvaW50IGlzIE1lc3NhZ2VQb3J0IHtcbiAgcmV0dXJuIGVuZHBvaW50LmNvbnN0cnVjdG9yLm5hbWUgPT09IFwiTWVzc2FnZVBvcnRcIjtcbn1cblxuZnVuY3Rpb24gY2xvc2VFbmRQb2ludChlbmRwb2ludDogRW5kcG9pbnQpIHtcbiAgaWYgKGlzTWVzc2FnZVBvcnQoZW5kcG9pbnQpKSBlbmRwb2ludC5jbG9zZSgpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gd3JhcDxUPihlcDogRW5kcG9pbnQsIHRhcmdldD86IGFueSk6IFJlbW90ZTxUPiB7XG4gIHJldHVybiBjcmVhdGVQcm94eTxUPihlcCwgW10sIHRhcmdldCkgYXMgYW55O1xufVxuXG5mdW5jdGlvbiB0aHJvd0lmUHJveHlSZWxlYXNlZChpc1JlbGVhc2VkOiBib29sZWFuKSB7XG4gIGlmIChpc1JlbGVhc2VkKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiUHJveHkgaGFzIGJlZW4gcmVsZWFzZWQgYW5kIGlzIG5vdCB1c2VhYmxlXCIpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVByb3h5PFQ+KFxuICBlcDogRW5kcG9pbnQsXG4gIHBhdGg6IChzdHJpbmcgfCBudW1iZXIgfCBzeW1ib2wpW10gPSBbXSxcbiAgdGFyZ2V0OiBvYmplY3QgPSBmdW5jdGlvbiAoKSB7fVxuKTogUmVtb3RlPFQ+IHtcbiAgbGV0IGlzUHJveHlSZWxlYXNlZCA9IGZhbHNlO1xuICBjb25zdCBwcm94eSA9IG5ldyBQcm94eSh0YXJnZXQsIHtcbiAgICBnZXQoX3RhcmdldCwgcHJvcCkge1xuICAgICAgdGhyb3dJZlByb3h5UmVsZWFzZWQoaXNQcm94eVJlbGVhc2VkKTtcbiAgICAgIGlmIChwcm9wID09PSByZWxlYXNlUHJveHkpIHtcbiAgICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgICByZXR1cm4gcmVxdWVzdFJlc3BvbnNlTWVzc2FnZShlcCwge1xuICAgICAgICAgICAgdHlwZTogTWVzc2FnZVR5cGUuUkVMRUFTRSxcbiAgICAgICAgICAgIHBhdGg6IHBhdGgubWFwKChwKSA9PiBwLnRvU3RyaW5nKCkpLFxuICAgICAgICAgIH0pLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgY2xvc2VFbmRQb2ludChlcCk7XG4gICAgICAgICAgICBpc1Byb3h5UmVsZWFzZWQgPSB0cnVlO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgaWYgKHByb3AgPT09IFwidGhlblwiKSB7XG4gICAgICAgIGlmIChwYXRoLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgIHJldHVybiB7IHRoZW46ICgpID0+IHByb3h5IH07XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgciA9IHJlcXVlc3RSZXNwb25zZU1lc3NhZ2UoZXAsIHtcbiAgICAgICAgICB0eXBlOiBNZXNzYWdlVHlwZS5HRVQsXG4gICAgICAgICAgcGF0aDogcGF0aC5tYXAoKHApID0+IHAudG9TdHJpbmcoKSksXG4gICAgICAgIH0pLnRoZW4oZnJvbVdpcmVWYWx1ZSk7XG4gICAgICAgIHJldHVybiByLnRoZW4uYmluZChyKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBjcmVhdGVQcm94eShlcCwgWy4uLnBhdGgsIHByb3BdKTtcbiAgICB9LFxuICAgIHNldChfdGFyZ2V0LCBwcm9wLCByYXdWYWx1ZSkge1xuICAgICAgdGhyb3dJZlByb3h5UmVsZWFzZWQoaXNQcm94eVJlbGVhc2VkKTtcbiAgICAgIC8vIEZJWE1FOiBFUzYgUHJveHkgSGFuZGxlciBgc2V0YCBtZXRob2RzIGFyZSBzdXBwb3NlZCB0byByZXR1cm4gYVxuICAgICAgLy8gYm9vbGVhbi4gVG8gc2hvdyBnb29kIHdpbGwsIHdlIHJldHVybiB0cnVlIGFzeW5jaHJvbm91c2x5IMKvXFxfKOODhClfL8KvXG4gICAgICBjb25zdCBbdmFsdWUsIHRyYW5zZmVyYWJsZXNdID0gdG9XaXJlVmFsdWUocmF3VmFsdWUpO1xuICAgICAgcmV0dXJuIHJlcXVlc3RSZXNwb25zZU1lc3NhZ2UoXG4gICAgICAgIGVwLFxuICAgICAgICB7XG4gICAgICAgICAgdHlwZTogTWVzc2FnZVR5cGUuU0VULFxuICAgICAgICAgIHBhdGg6IFsuLi5wYXRoLCBwcm9wXS5tYXAoKHApID0+IHAudG9TdHJpbmcoKSksXG4gICAgICAgICAgdmFsdWUsXG4gICAgICAgIH0sXG4gICAgICAgIHRyYW5zZmVyYWJsZXNcbiAgICAgICkudGhlbihmcm9tV2lyZVZhbHVlKSBhcyBhbnk7XG4gICAgfSxcbiAgICBhcHBseShfdGFyZ2V0LCBfdGhpc0FyZywgcmF3QXJndW1lbnRMaXN0KSB7XG4gICAgICB0aHJvd0lmUHJveHlSZWxlYXNlZChpc1Byb3h5UmVsZWFzZWQpO1xuICAgICAgY29uc3QgbGFzdCA9IHBhdGhbcGF0aC5sZW5ndGggLSAxXTtcbiAgICAgIGlmICgobGFzdCBhcyBhbnkpID09PSBjcmVhdGVFbmRwb2ludCkge1xuICAgICAgICByZXR1cm4gcmVxdWVzdFJlc3BvbnNlTWVzc2FnZShlcCwge1xuICAgICAgICAgIHR5cGU6IE1lc3NhZ2VUeXBlLkVORFBPSU5ULFxuICAgICAgICB9KS50aGVuKGZyb21XaXJlVmFsdWUpO1xuICAgICAgfVxuICAgICAgLy8gV2UganVzdCBwcmV0ZW5kIHRoYXQgYGJpbmQoKWAgZGlkbuKAmXQgaGFwcGVuLlxuICAgICAgaWYgKGxhc3QgPT09IFwiYmluZFwiKSB7XG4gICAgICAgIHJldHVybiBjcmVhdGVQcm94eShlcCwgcGF0aC5zbGljZSgwLCAtMSkpO1xuICAgICAgfVxuICAgICAgY29uc3QgW2FyZ3VtZW50TGlzdCwgdHJhbnNmZXJhYmxlc10gPSBwcm9jZXNzQXJndW1lbnRzKHJhd0FyZ3VtZW50TGlzdCk7XG4gICAgICByZXR1cm4gcmVxdWVzdFJlc3BvbnNlTWVzc2FnZShcbiAgICAgICAgZXAsXG4gICAgICAgIHtcbiAgICAgICAgICB0eXBlOiBNZXNzYWdlVHlwZS5BUFBMWSxcbiAgICAgICAgICBwYXRoOiBwYXRoLm1hcCgocCkgPT4gcC50b1N0cmluZygpKSxcbiAgICAgICAgICBhcmd1bWVudExpc3QsXG4gICAgICAgIH0sXG4gICAgICAgIHRyYW5zZmVyYWJsZXNcbiAgICAgICkudGhlbihmcm9tV2lyZVZhbHVlKTtcbiAgICB9LFxuICAgIGNvbnN0cnVjdChfdGFyZ2V0LCByYXdBcmd1bWVudExpc3QpIHtcbiAgICAgIHRocm93SWZQcm94eVJlbGVhc2VkKGlzUHJveHlSZWxlYXNlZCk7XG4gICAgICBjb25zdCBbYXJndW1lbnRMaXN0LCB0cmFuc2ZlcmFibGVzXSA9IHByb2Nlc3NBcmd1bWVudHMocmF3QXJndW1lbnRMaXN0KTtcbiAgICAgIHJldHVybiByZXF1ZXN0UmVzcG9uc2VNZXNzYWdlKFxuICAgICAgICBlcCxcbiAgICAgICAge1xuICAgICAgICAgIHR5cGU6IE1lc3NhZ2VUeXBlLkNPTlNUUlVDVCxcbiAgICAgICAgICBwYXRoOiBwYXRoLm1hcCgocCkgPT4gcC50b1N0cmluZygpKSxcbiAgICAgICAgICBhcmd1bWVudExpc3QsXG4gICAgICAgIH0sXG4gICAgICAgIHRyYW5zZmVyYWJsZXNcbiAgICAgICkudGhlbihmcm9tV2lyZVZhbHVlKTtcbiAgICB9LFxuICB9KTtcbiAgcmV0dXJuIHByb3h5IGFzIGFueTtcbn1cblxuZnVuY3Rpb24gbXlGbGF0PFQ+KGFycjogKFQgfCBUW10pW10pOiBUW10ge1xuICByZXR1cm4gQXJyYXkucHJvdG90eXBlLmNvbmNhdC5hcHBseShbXSwgYXJyKTtcbn1cblxuZnVuY3Rpb24gcHJvY2Vzc0FyZ3VtZW50cyhhcmd1bWVudExpc3Q6IGFueVtdKTogW1dpcmVWYWx1ZVtdLCBUcmFuc2ZlcmFibGVbXV0ge1xuICBjb25zdCBwcm9jZXNzZWQgPSBhcmd1bWVudExpc3QubWFwKHRvV2lyZVZhbHVlKTtcbiAgcmV0dXJuIFtwcm9jZXNzZWQubWFwKCh2KSA9PiB2WzBdKSwgbXlGbGF0KHByb2Nlc3NlZC5tYXAoKHYpID0+IHZbMV0pKV07XG59XG5cbmNvbnN0IHRyYW5zZmVyQ2FjaGUgPSBuZXcgV2Vha01hcDxhbnksIFRyYW5zZmVyYWJsZVtdPigpO1xuZXhwb3J0IGZ1bmN0aW9uIHRyYW5zZmVyPFQ+KG9iajogVCwgdHJhbnNmZXJzOiBUcmFuc2ZlcmFibGVbXSk6IFQge1xuICB0cmFuc2ZlckNhY2hlLnNldChvYmosIHRyYW5zZmVycyk7XG4gIHJldHVybiBvYmo7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwcm94eTxUPihvYmo6IFQpOiBUICYgUHJveHlNYXJrZWQge1xuICByZXR1cm4gT2JqZWN0LmFzc2lnbihvYmosIHsgW3Byb3h5TWFya2VyXTogdHJ1ZSB9KSBhcyBhbnk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB3aW5kb3dFbmRwb2ludChcbiAgdzogUG9zdE1lc3NhZ2VXaXRoT3JpZ2luLFxuICBjb250ZXh0OiBFdmVudFNvdXJjZSA9IHNlbGYsXG4gIHRhcmdldE9yaWdpbiA9IFwiKlwiXG4pOiBFbmRwb2ludCB7XG4gIHJldHVybiB7XG4gICAgcG9zdE1lc3NhZ2U6IChtc2c6IGFueSwgdHJhbnNmZXJhYmxlczogVHJhbnNmZXJhYmxlW10pID0+XG4gICAgICB3LnBvc3RNZXNzYWdlKG1zZywgdGFyZ2V0T3JpZ2luLCB0cmFuc2ZlcmFibGVzKSxcbiAgICBhZGRFdmVudExpc3RlbmVyOiBjb250ZXh0LmFkZEV2ZW50TGlzdGVuZXIuYmluZChjb250ZXh0KSxcbiAgICByZW1vdmVFdmVudExpc3RlbmVyOiBjb250ZXh0LnJlbW92ZUV2ZW50TGlzdGVuZXIuYmluZChjb250ZXh0KSxcbiAgfTtcbn1cblxuZnVuY3Rpb24gdG9XaXJlVmFsdWUodmFsdWU6IGFueSk6IFtXaXJlVmFsdWUsIFRyYW5zZmVyYWJsZVtdXSB7XG4gIGZvciAoY29uc3QgW25hbWUsIGhhbmRsZXJdIG9mIHRyYW5zZmVySGFuZGxlcnMpIHtcbiAgICBpZiAoaGFuZGxlci5jYW5IYW5kbGUodmFsdWUpKSB7XG4gICAgICBjb25zdCBbc2VyaWFsaXplZFZhbHVlLCB0cmFuc2ZlcmFibGVzXSA9IGhhbmRsZXIuc2VyaWFsaXplKHZhbHVlKTtcbiAgICAgIHJldHVybiBbXG4gICAgICAgIHtcbiAgICAgICAgICB0eXBlOiBXaXJlVmFsdWVUeXBlLkhBTkRMRVIsXG4gICAgICAgICAgbmFtZSxcbiAgICAgICAgICB2YWx1ZTogc2VyaWFsaXplZFZhbHVlLFxuICAgICAgICB9LFxuICAgICAgICB0cmFuc2ZlcmFibGVzLFxuICAgICAgXTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIFtcbiAgICB7XG4gICAgICB0eXBlOiBXaXJlVmFsdWVUeXBlLlJBVyxcbiAgICAgIHZhbHVlLFxuICAgIH0sXG4gICAgdHJhbnNmZXJDYWNoZS5nZXQodmFsdWUpIHx8IFtdLFxuICBdO1xufVxuXG5mdW5jdGlvbiBmcm9tV2lyZVZhbHVlKHZhbHVlOiBXaXJlVmFsdWUpOiBhbnkge1xuICBzd2l0Y2ggKHZhbHVlLnR5cGUpIHtcbiAgICBjYXNlIFdpcmVWYWx1ZVR5cGUuSEFORExFUjpcbiAgICAgIHJldHVybiB0cmFuc2ZlckhhbmRsZXJzLmdldCh2YWx1ZS5uYW1lKSEuZGVzZXJpYWxpemUodmFsdWUudmFsdWUpO1xuICAgIGNhc2UgV2lyZVZhbHVlVHlwZS5SQVc6XG4gICAgICByZXR1cm4gdmFsdWUudmFsdWU7XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVxdWVzdFJlc3BvbnNlTWVzc2FnZShcbiAgZXA6IEVuZHBvaW50LFxuICBtc2c6IE1lc3NhZ2UsXG4gIHRyYW5zZmVycz86IFRyYW5zZmVyYWJsZVtdXG4pOiBQcm9taXNlPFdpcmVWYWx1ZT4ge1xuICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcbiAgICBjb25zdCBpZCA9IGdlbmVyYXRlVVVJRCgpO1xuICAgIGVwLmFkZEV2ZW50TGlzdGVuZXIoXCJtZXNzYWdlXCIsIGZ1bmN0aW9uIGwoZXY6IE1lc3NhZ2VFdmVudCkge1xuICAgICAgaWYgKCFldi5kYXRhIHx8ICFldi5kYXRhLmlkIHx8IGV2LmRhdGEuaWQgIT09IGlkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGVwLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtZXNzYWdlXCIsIGwgYXMgYW55KTtcbiAgICAgIHJlc29sdmUoZXYuZGF0YSk7XG4gICAgfSBhcyBhbnkpO1xuICAgIGlmIChlcC5zdGFydCkge1xuICAgICAgZXAuc3RhcnQoKTtcbiAgICB9XG4gICAgZXAucG9zdE1lc3NhZ2UoeyBpZCwgLi4ubXNnIH0sIHRyYW5zZmVycyk7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBnZW5lcmF0ZVVVSUQoKTogc3RyaW5nIHtcbiAgcmV0dXJuIG5ldyBBcnJheSg0KVxuICAgIC5maWxsKDApXG4gICAgLm1hcCgoKSA9PiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUikudG9TdHJpbmcoMTYpKVxuICAgIC5qb2luKFwiLVwiKTtcbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/comlink/dist/esm/comlink.mjs\n");

/***/ })

}]);