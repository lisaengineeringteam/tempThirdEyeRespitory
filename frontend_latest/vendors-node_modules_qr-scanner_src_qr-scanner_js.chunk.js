"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkhome_assistant_frontend"] = self["webpackChunkhome_assistant_frontend"] || []).push([["vendors-node_modules_qr-scanner_src_qr-scanner_js"],{

/***/ "./node_modules/qr-scanner/src/qr-scanner.js":
/*!***************************************************!*\
  !*** ./node_modules/qr-scanner/src/qr-scanner.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ QrScanner)\n/* harmony export */ });\nclass QrScanner {\n  /* async */\n  static hasCamera() {\n    return QrScanner.listCameras(false).then(cameras => !!cameras.length).catch(() => false);\n  }\n  /* async */\n\n\n  static listCameras(requestLabels = false) {\n    if (!navigator.mediaDevices) return Promise.resolve([]); // Note that enumerateDevices can always be called and does not prompt the user for permission.\n    // However, enumerateDevices only includes device labels if served via https and an active media stream exists\n    // or permission to access the camera was given. Therefore, ask for camera permission by opening a stream, if\n    // labels were requested.\n\n    let openedStream = null;\n    return (requestLabels ? navigator.mediaDevices.getUserMedia({\n      audio: false,\n      video: true\n    }).then(stream => openedStream = stream) // Fail gracefully, especially if the device has no camera or on mobile when the camera is already in\n    // use and some browsers disallow a second stream.\n    .catch(() => {}) : Promise.resolve()).then(() => navigator.mediaDevices.enumerateDevices()).then(devices => devices.filter(device => device.kind === 'videoinput').map((device, i) => ({\n      id: device.deviceId,\n      label: device.label || (i === 0 ? 'Default Camera' : `Camera ${i + 1}`)\n    }))).finally(() => {\n      // close the stream we just opened for getting camera access for listing the device labels\n      if (!openedStream) return;\n\n      for (const track of openedStream.getTracks()) {\n        track.stop();\n        openedStream.removeTrack(track);\n      }\n    });\n  }\n\n  constructor(video, onDecode, canvasSizeOrOnDecodeError = this._onDecodeError, canvasSizeOrCalculateScanRegion = this._calculateScanRegion, preferredCamera = 'environment') {\n    this.$video = video;\n    this.$canvas = document.createElement('canvas');\n    this._onDecode = onDecode;\n    this._legacyCanvasSize = QrScanner.DEFAULT_CANVAS_SIZE;\n    this._preferredCamera = preferredCamera;\n    this._active = false;\n    this._paused = false;\n    this._flashOn = false;\n\n    if (typeof canvasSizeOrOnDecodeError === 'number') {\n      // legacy function signature where the third argument is the canvas size\n      this._legacyCanvasSize = canvasSizeOrOnDecodeError;\n      console.warn('You\\'re using a deprecated version of the QrScanner constructor which will be removed in ' + 'the future');\n    } else {\n      this._onDecodeError = canvasSizeOrOnDecodeError;\n    }\n\n    if (typeof canvasSizeOrCalculateScanRegion === 'number') {\n      // legacy function signature where the fourth argument is the canvas size\n      this._legacyCanvasSize = canvasSizeOrCalculateScanRegion;\n      console.warn('You\\'re using a deprecated version of the QrScanner constructor which will be removed in ' + 'the future');\n    } else {\n      this._calculateScanRegion = canvasSizeOrCalculateScanRegion;\n    }\n\n    this._scanRegion = this._calculateScanRegion(video);\n    this._onPlay = this._onPlay.bind(this);\n    this._onLoadedMetaData = this._onLoadedMetaData.bind(this);\n    this._onVisibilityChange = this._onVisibilityChange.bind(this);\n    video.disablePictureInPicture = true; // Allow inline playback on iPhone instead of requiring full screen playback,\n    // see https://webkit.org/blog/6784/new-video-policies-for-ios/\n\n    video.playsInline = true; // Allow play() on iPhone without requiring a user gesture. Should not really be needed as camera stream\n    // includes no audio, but just to be safe.\n\n    video.muted = true; // Avoid Safari stopping the video stream on a hidden video.\n    // See https://github.com/cozmo/jsQR/issues/185\n\n    let shouldHideVideo = false;\n\n    if (video.hidden) {\n      video.hidden = false;\n      shouldHideVideo = true;\n    }\n\n    if (!document.body.contains(video)) {\n      document.body.appendChild(video);\n      shouldHideVideo = true;\n    }\n\n    requestAnimationFrame(() => {\n      // Checking in requestAnimationFrame which should avoid a potential additional re-flow for getComputedStyle.\n      const computedStyle = window.getComputedStyle(video);\n\n      if (computedStyle.display === 'none') {\n        video.style.setProperty('display', 'block', 'important');\n        shouldHideVideo = true;\n      }\n\n      if (computedStyle.visibility !== 'visible') {\n        video.style.setProperty('visibility', 'visible', 'important');\n        shouldHideVideo = true;\n      }\n\n      if (shouldHideVideo) {\n        // Hide the video in a way that doesn't cause Safari to stop the playback.\n        console.warn('QrScanner has overwritten the video hiding style to avoid Safari stopping the playback.');\n        video.style.opacity = 0;\n        video.style.width = 0;\n        video.style.height = 0;\n      }\n    });\n    video.addEventListener('play', this._onPlay);\n    video.addEventListener('loadedmetadata', this._onLoadedMetaData);\n    document.addEventListener('visibilitychange', this._onVisibilityChange);\n    this._qrEnginePromise = QrScanner.createQrEngine();\n  }\n  /* async */\n\n\n  hasFlash() {\n    let openedStream = null;\n    return (this.$video.srcObject ? Promise.resolve(this.$video.srcObject.getVideoTracks()[0]) : this._getCameraStream().then(({\n      stream\n    }) => {\n      console.warn('Call hasFlash after successfully starting the scanner to avoid creating ' + 'a temporary video stream');\n      openedStream = stream;\n      return stream.getVideoTracks()[0];\n    })).then(track => 'torch' in track.getSettings()).catch(() => false).finally(() => {\n      // close the stream we just opened for detecting whether it supports flash\n      if (!openedStream) return;\n\n      for (const track of openedStream.getTracks()) {\n        track.stop();\n        openedStream.removeTrack(track);\n      }\n    });\n  }\n\n  isFlashOn() {\n    return this._flashOn;\n  }\n  /* async */\n\n\n  toggleFlash() {\n    if (this._flashOn) {\n      return this.turnFlashOff();\n    } else {\n      return this.turnFlashOn();\n    }\n  }\n  /* async */\n\n\n  turnFlashOn() {\n    if (this._flashOn) return Promise.resolve();\n    this._flashOn = true;\n    if (!this._active || this._paused) return Promise.resolve(); // flash will be turned on later on .start()\n\n    return this.hasFlash().then(hasFlash => {\n      if (!hasFlash) return Promise.reject('No flash available'); // Note that the video track is guaranteed to exist at this point\n\n      return this.$video.srcObject.getVideoTracks()[0].applyConstraints({\n        advanced: [{\n          torch: true\n        }]\n      });\n    }).catch(() => {\n      this._flashOn = false;\n      throw e;\n    });\n  }\n  /* async */\n\n\n  turnFlashOff() {\n    if (!this._flashOn) return; // applyConstraints with torch: false does not work to turn the flashlight off, as a stream's torch stays\n    // continuously on, see https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackConstraints#torch. Therefore,\n    // we have to stop the stream to turn the flashlight off.\n\n    this._flashOn = false;\n    return this._restartVideoStream();\n  }\n\n  destroy() {\n    this.$video.removeEventListener('loadedmetadata', this._onLoadedMetaData);\n    this.$video.removeEventListener('play', this._onPlay);\n    document.removeEventListener('visibilitychange', this._onVisibilityChange);\n    this.stop();\n\n    QrScanner._postWorkerMessage(this._qrEnginePromise, 'close');\n  }\n  /* async */\n\n\n  start() {\n    if (this._active && !this._paused) {\n      return Promise.resolve();\n    }\n\n    if (window.location.protocol !== 'https:') {\n      // warn but try starting the camera anyways\n      console.warn('The camera stream is only accessible if the page is transferred via https.');\n    }\n\n    this._active = true;\n\n    if (document.hidden) {\n      // camera will be started as soon as tab is in foreground\n      return Promise.resolve();\n    }\n\n    this._paused = false;\n\n    if (this.$video.srcObject) {\n      // camera stream already/still set\n      this.$video.play();\n      return Promise.resolve();\n    }\n\n    return this._getCameraStream().then(({\n      stream,\n      facingMode\n    }) => {\n      this.$video.srcObject = stream;\n      this.$video.play();\n\n      this._setVideoMirror(facingMode); // Restart the flash if it was previously on\n\n\n      if (this._flashOn) {\n        this._flashOn = false; // force turnFlashOn to restart the flash\n\n        this.turnFlashOn().catch(() => {});\n      }\n    }).catch(e => {\n      this._active = false;\n      throw e;\n    });\n  }\n\n  stop() {\n    this.pause();\n    this._active = false;\n  }\n  /* async */\n\n\n  pause(stopStreamImmediately = false) {\n    this._paused = true;\n\n    if (!this._active) {\n      return Promise.resolve(true);\n    }\n\n    this.$video.pause();\n\n    const stopStream = () => {\n      const tracks = this.$video.srcObject ? this.$video.srcObject.getTracks() : [];\n\n      for (const track of tracks) {\n        track.stop(); //  note that this will also automatically turn the flashlight off\n\n        this.$video.srcObject.removeTrack(track);\n      }\n\n      this.$video.srcObject = null;\n    };\n\n    if (stopStreamImmediately) {\n      stopStream();\n      return Promise.resolve(true);\n    }\n\n    return new Promise(resolve => setTimeout(resolve, 300)).then(() => {\n      if (!this._paused) return false;\n      stopStream();\n      return true;\n    });\n  }\n  /* async */\n\n\n  setCamera(facingModeOrDeviceId) {\n    if (facingModeOrDeviceId === this._preferredCamera) return Promise.resolve();\n    this._preferredCamera = facingModeOrDeviceId; // Restart the scanner with the new camera which will also update the video mirror and the scan region.\n\n    return this._restartVideoStream();\n  }\n  /* async */\n\n\n  static scanImage(imageOrFileOrUrl, scanRegion = null, qrEngine = null, canvas = null, disallowCanvasResizing = false, alsoTryWithoutScanRegion = false) {\n    const gotExternalWorker = qrEngine instanceof Worker;\n    let promise = Promise.all([qrEngine || QrScanner.createQrEngine(), QrScanner._loadImage(imageOrFileOrUrl)]).then(([engine, image]) => {\n      qrEngine = engine;\n      let canvasContext;\n      [canvas, canvasContext] = this._drawToCanvas(image, scanRegion, canvas, disallowCanvasResizing);\n\n      if (qrEngine instanceof Worker) {\n        if (!gotExternalWorker) {\n          // Enable scanning of inverted color qr codes. Not using _postWorkerMessage as it's async\n          qrEngine.postMessage({\n            type: 'inversionMode',\n            data: 'both'\n          });\n        }\n\n        return new Promise((resolve, reject) => {\n          let timeout, onMessage, onError;\n\n          onMessage = event => {\n            if (event.data.type !== 'qrResult') {\n              return;\n            }\n\n            qrEngine.removeEventListener('message', onMessage);\n            qrEngine.removeEventListener('error', onError);\n            clearTimeout(timeout);\n\n            if (event.data.data !== null) {\n              resolve(event.data.data);\n            } else {\n              reject(QrScanner.NO_QR_CODE_FOUND);\n            }\n          };\n\n          onError = e => {\n            qrEngine.removeEventListener('message', onMessage);\n            qrEngine.removeEventListener('error', onError);\n            clearTimeout(timeout);\n            const errorMessage = !e ? 'Unknown Error' : e.message || e;\n            reject('Scanner error: ' + errorMessage);\n          };\n\n          qrEngine.addEventListener('message', onMessage);\n          qrEngine.addEventListener('error', onError);\n          timeout = setTimeout(() => onError('timeout'), 10000);\n          const imageData = canvasContext.getImageData(0, 0, canvas.width, canvas.height);\n          qrEngine.postMessage({\n            type: 'decode',\n            data: imageData\n          }, [imageData.data.buffer]);\n        });\n      } else {\n        return new Promise((resolve, reject) => {\n          const timeout = setTimeout(() => reject('Scanner error: timeout'), 10000);\n          qrEngine.detect(canvas).then(scanResults => {\n            if (!scanResults.length) {\n              reject(QrScanner.NO_QR_CODE_FOUND);\n            } else {\n              resolve(scanResults[0].rawValue);\n            }\n          }).catch(e => reject('Scanner error: ' + (e.message || e))).finally(() => clearTimeout(timeout));\n        });\n      }\n    });\n\n    if (scanRegion && alsoTryWithoutScanRegion) {\n      promise = promise.catch(() => QrScanner.scanImage(imageOrFileOrUrl, null, qrEngine, canvas, disallowCanvasResizing));\n    }\n\n    promise = promise.finally(() => {\n      if (gotExternalWorker) return;\n\n      QrScanner._postWorkerMessage(qrEngine, 'close');\n    });\n    return promise;\n  }\n\n  setGrayscaleWeights(red, green, blue, useIntegerApproximation = true) {\n    // Note that for the native BarcodeDecoder, this is a no-op. However, the native implementations work also\n    // well with colored qr codes.\n    QrScanner._postWorkerMessage(this._qrEnginePromise, 'grayscaleWeights', {\n      red,\n      green,\n      blue,\n      useIntegerApproximation\n    });\n  }\n\n  setInversionMode(inversionMode) {\n    // Note that for the native BarcodeDecoder, this is a no-op. However, the native implementations scan normal\n    // and inverted qr codes by default\n    QrScanner._postWorkerMessage(this._qrEnginePromise, 'inversionMode', inversionMode);\n  }\n  /* async */\n\n\n  static createQrEngine(workerPath = QrScanner.WORKER_PATH) {\n    return ('BarcodeDetector' in window && BarcodeDetector.getSupportedFormats ? BarcodeDetector.getSupportedFormats() : Promise.resolve([])).then(supportedFormats => supportedFormats.indexOf('qr_code') !== -1 ? new BarcodeDetector({\n      formats: ['qr_code']\n    }) : new Worker(workerPath));\n  }\n\n  _onPlay() {\n    this._scanRegion = this._calculateScanRegion(this.$video);\n\n    this._scanFrame();\n  }\n\n  _onLoadedMetaData() {\n    this._scanRegion = this._calculateScanRegion(this.$video);\n  }\n\n  _onVisibilityChange() {\n    if (document.hidden) {\n      this.pause();\n    } else if (this._active) {\n      this.start();\n    }\n  }\n\n  _calculateScanRegion(video) {\n    // Default scan region calculation. Note that this can be overwritten in the constructor.\n    const smallestDimension = Math.min(video.videoWidth, video.videoHeight);\n    const scanRegionSize = Math.round(2 / 3 * smallestDimension);\n    return {\n      x: Math.round((video.videoWidth - scanRegionSize) / 2),\n      y: Math.round((video.videoHeight - scanRegionSize) / 2),\n      width: scanRegionSize,\n      height: scanRegionSize,\n      downScaledWidth: this._legacyCanvasSize,\n      downScaledHeight: this._legacyCanvasSize\n    };\n  }\n\n  _scanFrame() {\n    if (!this._active || this.$video.paused || this.$video.ended) return false; // using requestAnimationFrame to avoid scanning if tab is in background\n\n    requestAnimationFrame(() => {\n      if (this.$video.readyState <= 1) {\n        // Skip scans until the video is ready as drawImage() only works correctly on a video with readyState\n        // > 1, see https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/drawImage#Notes.\n        // This also avoids false positives for videos paused after a successful scan which remains visible on\n        // the canvas until the video is started again and ready.\n        this._scanFrame();\n\n        return;\n      }\n\n      this._qrEnginePromise.then(qrEngine => QrScanner.scanImage(this.$video, this._scanRegion, qrEngine, this.$canvas)).then(this._onDecode, error => {\n        if (!this._active) return;\n        const errorMessage = error.message || error;\n\n        if (errorMessage.indexOf('service unavailable') !== -1) {\n          // When the native BarcodeDetector crashed, create a new one\n          this._qrEnginePromise = QrScanner.createQrEngine();\n        }\n\n        this._onDecodeError(error);\n      }).then(() => this._scanFrame());\n    });\n  }\n\n  _onDecodeError(error) {\n    // default error handler; can be overwritten in the constructor\n    if (error === QrScanner.NO_QR_CODE_FOUND) return;\n    console.log(error);\n  }\n  /* async */\n\n\n  _getCameraStream() {\n    if (!navigator.mediaDevices) {\n      return Promise.reject('Camera not found.');\n    }\n\n    const preferenceType = this._preferredCamera === 'environment' || this._preferredCamera === 'user' ? 'facingMode' : 'deviceId';\n    const constraintsWithoutCamera = [{\n      width: {\n        min: 1024\n      }\n    }, {\n      width: {\n        min: 768\n      }\n    }, {}];\n    const constraintsWithCamera = constraintsWithoutCamera.map(constraint => Object.assign({}, constraint, {\n      [preferenceType]: {\n        exact: this._preferredCamera\n      }\n    })); // First try constraints with camera, then without camera. Using reduceRight as the Promise is build in a\n    // bottom up fashion.\n\n    return [...constraintsWithCamera, ...constraintsWithoutCamera].reduceRight((fallback, constraint) => () => navigator.mediaDevices.getUserMedia({\n      video: constraint,\n      audio: false\n    }).then(stream => ({\n      stream,\n      // Try to determine the facing mode from the stream, otherwise use a guess or 'environment' as\n      // default. Note that the guess is not always accurate as Safari returns cameras of different facing\n      // mode, even for exact facingMode constraints.\n      facingMode: this._getFacingMode(stream) || (constraint.facingMode ? this._preferredCamera // _preferredCamera is a facing mode and we are able to fulfill it\n      : this._preferredCamera === 'environment' ? 'user' // switch as _preferredCamera was environment but we are not able to fulfill it\n      : 'environment' // switch from unfulfilled user facingMode or default to environment\n      )\n    })).catch(fallback), () => Promise.reject('Camera not found.'))();\n  }\n  /* async */\n\n\n  _restartVideoStream() {\n    // Note that we always pause the stream and not only if !this._paused as even if this._paused === true, the\n    // stream might still be running, as it's by default only stopped after a delay of 300ms.\n    const wasPaused = this._paused;\n    return this.pause(true).then(paused => {\n      if (!paused || wasPaused || !this._active) return;\n      return this.start();\n    });\n  }\n\n  _setVideoMirror(facingMode) {\n    // in user facing mode mirror the video to make it easier for the user to position the QR code\n    const scaleFactor = facingMode === 'user' ? -1 : 1;\n    this.$video.style.transform = 'scaleX(' + scaleFactor + ')';\n  }\n\n  _getFacingMode(videoStream) {\n    const videoTrack = videoStream.getVideoTracks()[0];\n    if (!videoTrack) return null; // unknown\n    // inspired by https://github.com/JodusNodus/react-qr-reader/blob/master/src/getDeviceId.js#L13\n\n    return /rear|back|environment/i.test(videoTrack.label) ? 'environment' : /front|user|face/i.test(videoTrack.label) ? 'user' : null; // unknown\n  }\n\n  static _drawToCanvas(image, scanRegion = null, canvas = null, disallowCanvasResizing = false) {\n    canvas = canvas || document.createElement('canvas');\n    const scanRegionX = scanRegion && scanRegion.x ? scanRegion.x : 0;\n    const scanRegionY = scanRegion && scanRegion.y ? scanRegion.y : 0;\n    const scanRegionWidth = scanRegion && scanRegion.width ? scanRegion.width : image.width || image.videoWidth;\n    const scanRegionHeight = scanRegion && scanRegion.height ? scanRegion.height : image.height || image.videoHeight;\n\n    if (!disallowCanvasResizing) {\n      const canvasWidth = scanRegion && scanRegion.downScaledWidth ? scanRegion.downScaledWidth : scanRegionWidth;\n      const canvasHeight = scanRegion && scanRegion.downScaledHeight ? scanRegion.downScaledHeight : scanRegionHeight; // Setting the canvas width or height clears the canvas, even if the values didn't change, therefore only\n      // set them if they actually changed.\n\n      if (canvas.width !== canvasWidth) {\n        canvas.width = canvasWidth;\n      }\n\n      if (canvas.height !== canvasHeight) {\n        canvas.height = canvasHeight;\n      }\n    }\n\n    const context = canvas.getContext('2d', {\n      alpha: false\n    });\n    context.imageSmoothingEnabled = false; // gives less blurry images\n\n    context.drawImage(image, scanRegionX, scanRegionY, scanRegionWidth, scanRegionHeight, 0, 0, canvas.width, canvas.height);\n    return [canvas, context];\n  }\n  /* async */\n\n\n  static _loadImage(imageOrFileOrBlobOrUrl) {\n    if (imageOrFileOrBlobOrUrl instanceof HTMLCanvasElement || imageOrFileOrBlobOrUrl instanceof HTMLVideoElement || window.ImageBitmap && imageOrFileOrBlobOrUrl instanceof window.ImageBitmap || window.OffscreenCanvas && imageOrFileOrBlobOrUrl instanceof window.OffscreenCanvas) {\n      return Promise.resolve(imageOrFileOrBlobOrUrl);\n    } else if (imageOrFileOrBlobOrUrl instanceof Image) {\n      return QrScanner._awaitImageLoad(imageOrFileOrBlobOrUrl).then(() => imageOrFileOrBlobOrUrl);\n    } else if (imageOrFileOrBlobOrUrl instanceof File || imageOrFileOrBlobOrUrl instanceof Blob || imageOrFileOrBlobOrUrl instanceof URL || typeof imageOrFileOrBlobOrUrl === 'string') {\n      const image = new Image();\n\n      if (imageOrFileOrBlobOrUrl instanceof File || imageOrFileOrBlobOrUrl instanceof Blob) {\n        image.src = URL.createObjectURL(imageOrFileOrBlobOrUrl);\n      } else {\n        image.src = imageOrFileOrBlobOrUrl;\n      }\n\n      return QrScanner._awaitImageLoad(image).then(() => {\n        if (imageOrFileOrBlobOrUrl instanceof File || imageOrFileOrBlobOrUrl instanceof Blob) {\n          URL.revokeObjectURL(image.src);\n        }\n\n        return image;\n      });\n    } else {\n      return Promise.reject('Unsupported image type.');\n    }\n  }\n  /* async */\n\n\n  static _awaitImageLoad(image) {\n    return new Promise((resolve, reject) => {\n      if (image.complete && image.naturalWidth !== 0) {\n        // already loaded\n        resolve();\n      } else {\n        let onLoad, onError;\n\n        onLoad = () => {\n          image.removeEventListener('load', onLoad);\n          image.removeEventListener('error', onError);\n          resolve();\n        };\n\n        onError = () => {\n          image.removeEventListener('load', onLoad);\n          image.removeEventListener('error', onError);\n          reject('Image load error');\n        };\n\n        image.addEventListener('load', onLoad);\n        image.addEventListener('error', onError);\n      }\n    });\n  }\n  /* async */\n\n\n  static _postWorkerMessage(qrEngineOrQrEnginePromise, type, data) {\n    return Promise.resolve(qrEngineOrQrEnginePromise).then(qrEngine => {\n      if (!(qrEngine instanceof Worker)) return;\n      qrEngine.postMessage({\n        type,\n        data\n      });\n    });\n  }\n\n}\nQrScanner.DEFAULT_CANVAS_SIZE = 400;\nQrScanner.NO_QR_CODE_FOUND = 'No QR code found';\nQrScanner.WORKER_PATH = 'qr-scanner-worker.min.js';//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/qr-scanner/src/qr-scanner.js\n");

/***/ })

}]);